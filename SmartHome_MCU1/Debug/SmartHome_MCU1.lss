
SmartHome_MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004c84  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a2  00800060  00004c84  00004cf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003a98  00000000  00000000  00004e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000fdc  00000000  00000000  00008934  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00009910  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00009a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00009bff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000bc44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000cd45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000dcc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000de48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000e10a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 21 24 	jmp	0x4842	; 0x4842 <__vector_16>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	fc e4       	ldi	r31, 0x4C	; 76
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 93 11 	call	0x2326	; 0x2326 <main>
      7a:	0c 94 40 26 	jmp	0x4c80	; 0x4c80 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d8 25 	jmp	0x4bb0	; 0x4bb0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa ee       	ldi	r26, 0xEA	; 234
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f4 25 	jmp	0x4be8	; 0x4be8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e4 25 	jmp	0x4bc8	; 0x4bc8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 00 26 	jmp	0x4c00	; 0x4c00 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e4 25 	jmp	0x4bc8	; 0x4bc8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 00 26 	jmp	0x4c00	; 0x4c00 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d8 25 	jmp	0x4bb0	; 0x4bb0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8a ee       	ldi	r24, 0xEA	; 234
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f4 25 	jmp	0x4be8	; 0x4be8 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e0 25 	jmp	0x4bc0	; 0x4bc0 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6a ee       	ldi	r22, 0xEA	; 234
     68c:	71 e0       	ldi	r23, 0x01	; 1
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 fc 25 	jmp	0x4bf8	; 0x4bf8 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 e4 25 	jmp	0x4bc8	; 0x4bc8 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 00 26 	jmp	0x4c00	; 0x4c00 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 e4 25 	jmp	0x4bc8	; 0x4bc8 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 00 26 	jmp	0x4c00	; 0x4c00 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 e4 25 	jmp	0x4bc8	; 0x4bc8 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 00 26 	jmp	0x4c00	; 0x4c00 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_VidSetPinDirection>:
#include"DIO.h"

//function for direction
void DIO_VidSetPinDirection( u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Direction)    //preph name_returntype_funcName
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	29 97       	sbiw	r28, 0x09	; 9
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6a 83       	std	Y+2, r22	; 0x02
     ca6:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_U8Direction)
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	39 87       	std	Y+9, r19	; 0x09
     cb0:	28 87       	std	Y+8, r18	; 0x08
     cb2:	88 85       	ldd	r24, Y+8	; 0x08
     cb4:	99 85       	ldd	r25, Y+9	; 0x09
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	39 f0       	breq	.+14     	; 0xcc8 <DIO_VidSetPinDirection+0x3a>
     cba:	28 85       	ldd	r18, Y+8	; 0x08
     cbc:	39 85       	ldd	r19, Y+9	; 0x09
     cbe:	21 30       	cpi	r18, 0x01	; 1
     cc0:	31 05       	cpc	r19, r1
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <DIO_VidSetPinDirection+0x38>
     cc4:	75 c0       	rjmp	.+234    	; 0xdb0 <DIO_VidSetPinDirection+0x122>
     cc6:	e2 c0       	rjmp	.+452    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	{
	    case DIO_INPUT:
	      switch(Copy_U8Port)
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	3f 83       	std	Y+7, r19	; 0x07
     cd0:	2e 83       	std	Y+6, r18	; 0x06
     cd2:	8e 81       	ldd	r24, Y+6	; 0x06
     cd4:	9f 81       	ldd	r25, Y+7	; 0x07
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	91 05       	cpc	r25, r1
     cda:	59 f1       	breq	.+86     	; 0xd32 <DIO_VidSetPinDirection+0xa4>
     cdc:	2e 81       	ldd	r18, Y+6	; 0x06
     cde:	3f 81       	ldd	r19, Y+7	; 0x07
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	2c f4       	brge	.+10     	; 0xcf0 <DIO_VidSetPinDirection+0x62>
     ce6:	8e 81       	ldd	r24, Y+6	; 0x06
     ce8:	9f 81       	ldd	r25, Y+7	; 0x07
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	69 f0       	breq	.+26     	; 0xd08 <DIO_VidSetPinDirection+0x7a>
     cee:	ce c0       	rjmp	.+412    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
     cf0:	2e 81       	ldd	r18, Y+6	; 0x06
     cf2:	3f 81       	ldd	r19, Y+7	; 0x07
     cf4:	22 30       	cpi	r18, 0x02	; 2
     cf6:	31 05       	cpc	r19, r1
     cf8:	89 f1       	breq	.+98     	; 0xd5c <DIO_VidSetPinDirection+0xce>
     cfa:	8e 81       	ldd	r24, Y+6	; 0x06
     cfc:	9f 81       	ldd	r25, Y+7	; 0x07
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	91 05       	cpc	r25, r1
     d02:	09 f4       	brne	.+2      	; 0xd06 <DIO_VidSetPinDirection+0x78>
     d04:	40 c0       	rjmp	.+128    	; 0xd86 <DIO_VidSetPinDirection+0xf8>
     d06:	c2 c0       	rjmp	.+388    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	      {
	    	case DIO_PORTA:
	    		CLR_BIT( DDRA , Copy_U8Pin);
     d08:	aa e3       	ldi	r26, 0x3A	; 58
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ea e3       	ldi	r30, 0x3A	; 58
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_VidSetPinDirection+0x98>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_VidSetPinDirection+0x94>
     d2a:	80 95       	com	r24
     d2c:	84 23       	and	r24, r20
     d2e:	8c 93       	st	X, r24
     d30:	ad c0       	rjmp	.+346    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    		break;
	    	case DIO_PORTB:
	    		CLR_BIT( DDRB , Copy_U8Pin);
     d32:	a7 e3       	ldi	r26, 0x37	; 55
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e7 e3       	ldi	r30, 0x37	; 55
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_VidSetPinDirection+0xc2>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_VidSetPinDirection+0xbe>
     d54:	80 95       	com	r24
     d56:	84 23       	and	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	98 c0       	rjmp	.+304    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    		break;
	    	case DIO_PORTC:
	    		CLR_BIT( DDRC , Copy_U8Pin);
     d5c:	a4 e3       	ldi	r26, 0x34	; 52
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e4 e3       	ldi	r30, 0x34	; 52
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	48 2f       	mov	r20, r24
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 2e       	mov	r0, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <DIO_VidSetPinDirection+0xec>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <DIO_VidSetPinDirection+0xe8>
     d7e:	80 95       	com	r24
     d80:	84 23       	and	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	83 c0       	rjmp	.+262    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    	    break;
	    	case DIO_PORTD:
	    		CLR_BIT( DDRD , Copy_U8Pin);
     d86:	a1 e3       	ldi	r26, 0x31	; 49
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e1 e3       	ldi	r30, 0x31	; 49
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_VidSetPinDirection+0x116>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_VidSetPinDirection+0x112>
     da8:	80 95       	com	r24
     daa:	84 23       	and	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	6e c0       	rjmp	.+220    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    	    break;

	      }
	      break;
	    case DIO_OUTPUT:
	    	switch(Copy_U8Port)
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	3d 83       	std	Y+5, r19	; 0x05
     db8:	2c 83       	std	Y+4, r18	; 0x04
     dba:	8c 81       	ldd	r24, Y+4	; 0x04
     dbc:	9d 81       	ldd	r25, Y+5	; 0x05
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	91 05       	cpc	r25, r1
     dc2:	49 f1       	breq	.+82     	; 0xe16 <DIO_VidSetPinDirection+0x188>
     dc4:	2c 81       	ldd	r18, Y+4	; 0x04
     dc6:	3d 81       	ldd	r19, Y+5	; 0x05
     dc8:	22 30       	cpi	r18, 0x02	; 2
     dca:	31 05       	cpc	r19, r1
     dcc:	2c f4       	brge	.+10     	; 0xdd8 <DIO_VidSetPinDirection+0x14a>
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	9d 81       	ldd	r25, Y+5	; 0x05
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	61 f0       	breq	.+24     	; 0xdee <DIO_VidSetPinDirection+0x160>
     dd6:	5a c0       	rjmp	.+180    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
     dd8:	2c 81       	ldd	r18, Y+4	; 0x04
     dda:	3d 81       	ldd	r19, Y+5	; 0x05
     ddc:	22 30       	cpi	r18, 0x02	; 2
     dde:	31 05       	cpc	r19, r1
     de0:	71 f1       	breq	.+92     	; 0xe3e <DIO_VidSetPinDirection+0x1b0>
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	9d 81       	ldd	r25, Y+5	; 0x05
     de6:	83 30       	cpi	r24, 0x03	; 3
     de8:	91 05       	cpc	r25, r1
     dea:	e9 f1       	breq	.+122    	; 0xe66 <DIO_VidSetPinDirection+0x1d8>
     dec:	4f c0       	rjmp	.+158    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    		    {
	    		    	case DIO_PORTA:
	    		    		SET_BIT( DDRA , Copy_U8Pin);
     dee:	aa e3       	ldi	r26, 0x3A	; 58
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	ea e3       	ldi	r30, 0x3A	; 58
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_VidSetPinDirection+0x17e>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_VidSetPinDirection+0x17a>
     e10:	84 2b       	or	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	3b c0       	rjmp	.+118    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    		    		break;
	    		    	case DIO_PORTB:
	    		    		SET_BIT( DDRB , Copy_U8Pin);
     e16:	a7 e3       	ldi	r26, 0x37	; 55
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e7 e3       	ldi	r30, 0x37	; 55
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_VidSetPinDirection+0x1a6>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_VidSetPinDirection+0x1a2>
     e38:	84 2b       	or	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	27 c0       	rjmp	.+78     	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    		    		break;
	    		    	case DIO_PORTC:
	    		    		SET_BIT( DDRC , Copy_U8Pin);
     e3e:	a4 e3       	ldi	r26, 0x34	; 52
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e4 e3       	ldi	r30, 0x34	; 52
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_VidSetPinDirection+0x1ce>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <DIO_VidSetPinDirection+0x1ca>
     e60:	84 2b       	or	r24, r20
     e62:	8c 93       	st	X, r24
     e64:	13 c0       	rjmp	.+38     	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    		    	    break;
	    		    	case DIO_PORTD:
	    		    		SET_BIT( DDRD , Copy_U8Pin);
     e66:	a1 e3       	ldi	r26, 0x31	; 49
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e1 e3       	ldi	r30, 0x31	; 49
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_VidSetPinDirection+0x1f6>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_VidSetPinDirection+0x1f2>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
	    		    	    break;
	    		    }
	    	break;
	}
}
     e8c:	29 96       	adiw	r28, 0x09	; 9
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <DIO_VidSetPinValue>:
//function for value
void DIO_VidSetPinValue( u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Value)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	29 97       	sbiw	r28, 0x09	; 9
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	6a 83       	std	Y+2, r22	; 0x02
     eb6:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_U8Value)
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	39 87       	std	Y+9, r19	; 0x09
     ec0:	28 87       	std	Y+8, r18	; 0x08
     ec2:	88 85       	ldd	r24, Y+8	; 0x08
     ec4:	99 85       	ldd	r25, Y+9	; 0x09
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	39 f0       	breq	.+14     	; 0xed8 <DIO_VidSetPinValue+0x3a>
     eca:	28 85       	ldd	r18, Y+8	; 0x08
     ecc:	39 85       	ldd	r19, Y+9	; 0x09
     ece:	21 30       	cpi	r18, 0x01	; 1
     ed0:	31 05       	cpc	r19, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <DIO_VidSetPinValue+0x38>
     ed4:	75 c0       	rjmp	.+234    	; 0xfc0 <DIO_VidSetPinValue+0x122>
     ed6:	e2 c0       	rjmp	.+452    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	{
	    case DIO_LOW:
	      switch(Copy_U8Port)
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	3f 83       	std	Y+7, r19	; 0x07
     ee0:	2e 83       	std	Y+6, r18	; 0x06
     ee2:	8e 81       	ldd	r24, Y+6	; 0x06
     ee4:	9f 81       	ldd	r25, Y+7	; 0x07
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	59 f1       	breq	.+86     	; 0xf42 <DIO_VidSetPinValue+0xa4>
     eec:	2e 81       	ldd	r18, Y+6	; 0x06
     eee:	3f 81       	ldd	r19, Y+7	; 0x07
     ef0:	22 30       	cpi	r18, 0x02	; 2
     ef2:	31 05       	cpc	r19, r1
     ef4:	2c f4       	brge	.+10     	; 0xf00 <DIO_VidSetPinValue+0x62>
     ef6:	8e 81       	ldd	r24, Y+6	; 0x06
     ef8:	9f 81       	ldd	r25, Y+7	; 0x07
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	69 f0       	breq	.+26     	; 0xf18 <DIO_VidSetPinValue+0x7a>
     efe:	ce c0       	rjmp	.+412    	; 0x109c <DIO_VidSetPinValue+0x1fe>
     f00:	2e 81       	ldd	r18, Y+6	; 0x06
     f02:	3f 81       	ldd	r19, Y+7	; 0x07
     f04:	22 30       	cpi	r18, 0x02	; 2
     f06:	31 05       	cpc	r19, r1
     f08:	89 f1       	breq	.+98     	; 0xf6c <DIO_VidSetPinValue+0xce>
     f0a:	8e 81       	ldd	r24, Y+6	; 0x06
     f0c:	9f 81       	ldd	r25, Y+7	; 0x07
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	91 05       	cpc	r25, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <DIO_VidSetPinValue+0x78>
     f14:	40 c0       	rjmp	.+128    	; 0xf96 <DIO_VidSetPinValue+0xf8>
     f16:	c2 c0       	rjmp	.+388    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	      {
	    	case DIO_PORTA:
	    		CLR_BIT( PORTA , Copy_U8Pin);
     f18:	ab e3       	ldi	r26, 0x3B	; 59
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	eb e3       	ldi	r30, 0x3B	; 59
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <DIO_VidSetPinValue+0x98>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <DIO_VidSetPinValue+0x94>
     f3a:	80 95       	com	r24
     f3c:	84 23       	and	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	ad c0       	rjmp	.+346    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    		break;
	    	case DIO_PORTB:
	    		CLR_BIT( PORTB , Copy_U8Pin);
     f42:	a8 e3       	ldi	r26, 0x38	; 56
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e3       	ldi	r30, 0x38	; 56
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_VidSetPinValue+0xc2>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_VidSetPinValue+0xbe>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	98 c0       	rjmp	.+304    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    		break;
	    	case DIO_PORTC:
	    		CLR_BIT( PORTC , Copy_U8Pin);
     f6c:	a5 e3       	ldi	r26, 0x35	; 53
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e5 e3       	ldi	r30, 0x35	; 53
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_VidSetPinValue+0xec>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_VidSetPinValue+0xe8>
     f8e:	80 95       	com	r24
     f90:	84 23       	and	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	83 c0       	rjmp	.+262    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    	    break;
	    	case DIO_PORTD:
	    		CLR_BIT( PORTD , Copy_U8Pin);
     f96:	a2 e3       	ldi	r26, 0x32	; 50
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e2 e3       	ldi	r30, 0x32	; 50
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_VidSetPinValue+0x116>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_VidSetPinValue+0x112>
     fb8:	80 95       	com	r24
     fba:	84 23       	and	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	6e c0       	rjmp	.+220    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    	    break;

	      }
	      break;
	    case DIO_HIGH:
	    	switch(Copy_U8Port)
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	3d 83       	std	Y+5, r19	; 0x05
     fc8:	2c 83       	std	Y+4, r18	; 0x04
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	9d 81       	ldd	r25, Y+5	; 0x05
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	91 05       	cpc	r25, r1
     fd2:	49 f1       	breq	.+82     	; 0x1026 <DIO_VidSetPinValue+0x188>
     fd4:	2c 81       	ldd	r18, Y+4	; 0x04
     fd6:	3d 81       	ldd	r19, Y+5	; 0x05
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	2c f4       	brge	.+10     	; 0xfe8 <DIO_VidSetPinValue+0x14a>
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	61 f0       	breq	.+24     	; 0xffe <DIO_VidSetPinValue+0x160>
     fe6:	5a c0       	rjmp	.+180    	; 0x109c <DIO_VidSetPinValue+0x1fe>
     fe8:	2c 81       	ldd	r18, Y+4	; 0x04
     fea:	3d 81       	ldd	r19, Y+5	; 0x05
     fec:	22 30       	cpi	r18, 0x02	; 2
     fee:	31 05       	cpc	r19, r1
     ff0:	71 f1       	breq	.+92     	; 0x104e <DIO_VidSetPinValue+0x1b0>
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	83 30       	cpi	r24, 0x03	; 3
     ff8:	91 05       	cpc	r25, r1
     ffa:	e9 f1       	breq	.+122    	; 0x1076 <DIO_VidSetPinValue+0x1d8>
     ffc:	4f c0       	rjmp	.+158    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    		    {
	    		    	case DIO_PORTA:
	    		    		SET_BIT( PORTA , Copy_U8Pin);
     ffe:	ab e3       	ldi	r26, 0x3B	; 59
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	eb e3       	ldi	r30, 0x3B	; 59
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_VidSetPinValue+0x17e>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_VidSetPinValue+0x17a>
    1020:	84 2b       	or	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	3b c0       	rjmp	.+118    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    		    		break;
	    		    	case DIO_PORTB:
	    		    		SET_BIT( PORTB , Copy_U8Pin);
    1026:	a8 e3       	ldi	r26, 0x38	; 56
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e8 e3       	ldi	r30, 0x38	; 56
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_VidSetPinValue+0x1a6>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_VidSetPinValue+0x1a2>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	27 c0       	rjmp	.+78     	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    		    		break;
	    		    	case DIO_PORTC:
	    		    		SET_BIT( PORTC , Copy_U8Pin);
    104e:	a5 e3       	ldi	r26, 0x35	; 53
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e5 e3       	ldi	r30, 0x35	; 53
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_VidSetPinValue+0x1ce>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_VidSetPinValue+0x1ca>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	13 c0       	rjmp	.+38     	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    		    	    break;
	    		    	case DIO_PORTD:
	    		    		SET_BIT( PORTD , Copy_U8Pin);
    1076:	a2 e3       	ldi	r26, 0x32	; 50
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e2 e3       	ldi	r30, 0x32	; 50
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_VidSetPinValue+0x1f6>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_VidSetPinValue+0x1f2>
    1098:	84 2b       	or	r24, r20
    109a:	8c 93       	st	X, r24
	    		    	    break;
	    		    }
	    	        break;
	}

}
    109c:	29 96       	adiw	r28, 0x09	; 9
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <DIO_VidSetPortDirection>:


 //function to set port direction
void DIO_VidSetPortDirection(u8 Copy_U8Port , u8 Copy_U8Direction)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <DIO_VidSetPortDirection+0x6>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <DIO_VidSetPortDirection+0x8>
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	3c 83       	std	Y+4, r19	; 0x04
    10c6:	2b 83       	std	Y+3, r18	; 0x03
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	91 05       	cpc	r25, r1
    10d0:	d1 f0       	breq	.+52     	; 0x1106 <DIO_VidSetPortDirection+0x58>
    10d2:	2b 81       	ldd	r18, Y+3	; 0x03
    10d4:	3c 81       	ldd	r19, Y+4	; 0x04
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	2c f4       	brge	.+10     	; 0x10e6 <DIO_VidSetPortDirection+0x38>
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	61 f0       	breq	.+24     	; 0x10fc <DIO_VidSetPortDirection+0x4e>
    10e4:	1e c0       	rjmp	.+60     	; 0x1122 <DIO_VidSetPortDirection+0x74>
    10e6:	2b 81       	ldd	r18, Y+3	; 0x03
    10e8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	81 f0       	breq	.+32     	; 0x1110 <DIO_VidSetPortDirection+0x62>
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	91 05       	cpc	r25, r1
    10f8:	81 f0       	breq	.+32     	; 0x111a <DIO_VidSetPortDirection+0x6c>
    10fa:	13 c0       	rjmp	.+38     	; 0x1122 <DIO_VidSetPortDirection+0x74>
		    {
		    	case DIO_PORTA:
		    		DDRA= Copy_U8Direction;
    10fc:	ea e3       	ldi	r30, 0x3A	; 58
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	80 83       	st	Z, r24
    1104:	0e c0       	rjmp	.+28     	; 0x1122 <DIO_VidSetPortDirection+0x74>
		    		break;
		    	case DIO_PORTB:
		    		DDRB= Copy_U8Direction;
    1106:	e7 e3       	ldi	r30, 0x37	; 55
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	80 83       	st	Z, r24
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <DIO_VidSetPortDirection+0x74>
		    		break;
		    	case DIO_PORTC:
		    		DDRC= Copy_U8Direction;
    1110:	e4 e3       	ldi	r30, 0x34	; 52
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	80 83       	st	Z, r24
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <DIO_VidSetPortDirection+0x74>
		    	    break;
		    	case DIO_PORTD:
		    		DDRD= Copy_U8Direction;
    111a:	e1 e3       	ldi	r30, 0x31	; 49
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	80 83       	st	Z, r24
		    	    break;
		    }

}
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <DIO_VidSetPortValue>:
//functio to set the port value
void DIO_VidSetPortValue(u8 Copy_U8Port , u8 Copy_U8Value)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <DIO_VidSetPortValue+0x6>
    1136:	00 d0       	rcall	.+0      	; 0x1138 <DIO_VidSetPortValue+0x8>
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3c 83       	std	Y+4, r19	; 0x04
    1148:	2b 83       	std	Y+3, r18	; 0x03
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	91 05       	cpc	r25, r1
    1152:	d1 f0       	breq	.+52     	; 0x1188 <DIO_VidSetPortValue+0x58>
    1154:	2b 81       	ldd	r18, Y+3	; 0x03
    1156:	3c 81       	ldd	r19, Y+4	; 0x04
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	2c f4       	brge	.+10     	; 0x1168 <DIO_VidSetPortValue+0x38>
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	61 f0       	breq	.+24     	; 0x117e <DIO_VidSetPortValue+0x4e>
    1166:	1e c0       	rjmp	.+60     	; 0x11a4 <DIO_VidSetPortValue+0x74>
    1168:	2b 81       	ldd	r18, Y+3	; 0x03
    116a:	3c 81       	ldd	r19, Y+4	; 0x04
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	81 f0       	breq	.+32     	; 0x1192 <DIO_VidSetPortValue+0x62>
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	81 f0       	breq	.+32     	; 0x119c <DIO_VidSetPortValue+0x6c>
    117c:	13 c0       	rjmp	.+38     	; 0x11a4 <DIO_VidSetPortValue+0x74>
		    {
		    	case DIO_PORTA:
		    		PORTA= Copy_U8Value;
    117e:	eb e3       	ldi	r30, 0x3B	; 59
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	80 83       	st	Z, r24
    1186:	0e c0       	rjmp	.+28     	; 0x11a4 <DIO_VidSetPortValue+0x74>
		    		break;
		    	case DIO_PORTB:
		    		PORTB= Copy_U8Value;
    1188:	e8 e3       	ldi	r30, 0x38	; 56
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	80 83       	st	Z, r24
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <DIO_VidSetPortValue+0x74>
		    		break;
		    	case DIO_PORTC:
		    		PORTC= Copy_U8Value;
    1192:	e5 e3       	ldi	r30, 0x35	; 53
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	80 83       	st	Z, r24
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <DIO_VidSetPortValue+0x74>
		    	    break;
		    	case DIO_PORTD:
		    		PORTD= Copy_U8Value;
    119c:	e2 e3       	ldi	r30, 0x32	; 50
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	80 83       	st	Z, r24
		    	    break;
		    }

}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <DIO_VidTogglePinValue>:
//function to toggle the pin
void DIO_VidTogglePinValue(u8 Copy_U8Port , u8 Copy_U8Pin)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <DIO_VidTogglePinValue+0x6>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <DIO_VidTogglePinValue+0x8>
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	3c 83       	std	Y+4, r19	; 0x04
    11ca:	2b 83       	std	Y+3, r18	; 0x03
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	91 05       	cpc	r25, r1
    11d4:	49 f1       	breq	.+82     	; 0x1228 <DIO_VidTogglePinValue+0x76>
    11d6:	2b 81       	ldd	r18, Y+3	; 0x03
    11d8:	3c 81       	ldd	r19, Y+4	; 0x04
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	2c f4       	brge	.+10     	; 0x11ea <DIO_VidTogglePinValue+0x38>
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	61 f0       	breq	.+24     	; 0x1200 <DIO_VidTogglePinValue+0x4e>
    11e8:	5a c0       	rjmp	.+180    	; 0x129e <DIO_VidTogglePinValue+0xec>
    11ea:	2b 81       	ldd	r18, Y+3	; 0x03
    11ec:	3c 81       	ldd	r19, Y+4	; 0x04
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	71 f1       	breq	.+92     	; 0x1250 <DIO_VidTogglePinValue+0x9e>
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	91 05       	cpc	r25, r1
    11fc:	e9 f1       	breq	.+122    	; 0x1278 <DIO_VidTogglePinValue+0xc6>
    11fe:	4f c0       	rjmp	.+158    	; 0x129e <DIO_VidTogglePinValue+0xec>
		    {
		    	case DIO_PORTA:
		    		TOGGLE_BIT(PORTA , Copy_U8Pin);
    1200:	ab e3       	ldi	r26, 0x3B	; 59
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	eb e3       	ldi	r30, 0x3B	; 59
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_VidTogglePinValue+0x6c>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_VidTogglePinValue+0x68>
    1222:	84 27       	eor	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	3b c0       	rjmp	.+118    	; 0x129e <DIO_VidTogglePinValue+0xec>
		    		break;
		    	case DIO_PORTB:
		    		TOGGLE_BIT(PORTB , Copy_U8Pin);
    1228:	a8 e3       	ldi	r26, 0x38	; 56
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e8 e3       	ldi	r30, 0x38	; 56
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_VidTogglePinValue+0x94>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_VidTogglePinValue+0x90>
    124a:	84 27       	eor	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	27 c0       	rjmp	.+78     	; 0x129e <DIO_VidTogglePinValue+0xec>
		    		break;
		    	case DIO_PORTC:
		    		TOGGLE_BIT(PORTC , Copy_U8Pin);
    1250:	a5 e3       	ldi	r26, 0x35	; 53
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e5 e3       	ldi	r30, 0x35	; 53
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_VidTogglePinValue+0xbc>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_VidTogglePinValue+0xb8>
    1272:	84 27       	eor	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	13 c0       	rjmp	.+38     	; 0x129e <DIO_VidTogglePinValue+0xec>
		    	    break;
		    	case DIO_PORTD:
		    		TOGGLE_BIT(PORTD , Copy_U8Pin);
    1278:	a2 e3       	ldi	r26, 0x32	; 50
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e2 e3       	ldi	r30, 0x32	; 50
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_VidTogglePinValue+0xe4>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_VidTogglePinValue+0xe0>
    129a:	84 27       	eor	r24, r20
    129c:	8c 93       	st	X, r24
		    	    break;
		    }

}
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <DIO_U8Get_PinValue>:

u8 DIO_U8Get_PinValue(u8 Copy_U8Port , u8 Copy_U8Pin)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <DIO_U8Get_PinValue+0x6>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <DIO_U8Get_PinValue+0x8>
    12b4:	0f 92       	push	r0
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	8a 83       	std	Y+2, r24	; 0x02
    12bc:	6b 83       	std	Y+3, r22	; 0x03
	u8 read;
	switch(Copy_U8Port)
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	3d 83       	std	Y+5, r19	; 0x05
    12c6:	2c 83       	std	Y+4, r18	; 0x04
    12c8:	4c 81       	ldd	r20, Y+4	; 0x04
    12ca:	5d 81       	ldd	r21, Y+5	; 0x05
    12cc:	41 30       	cpi	r20, 0x01	; 1
    12ce:	51 05       	cpc	r21, r1
    12d0:	41 f1       	breq	.+80     	; 0x1322 <DIO_U8Get_PinValue+0x76>
    12d2:	8c 81       	ldd	r24, Y+4	; 0x04
    12d4:	9d 81       	ldd	r25, Y+5	; 0x05
    12d6:	82 30       	cpi	r24, 0x02	; 2
    12d8:	91 05       	cpc	r25, r1
    12da:	34 f4       	brge	.+12     	; 0x12e8 <DIO_U8Get_PinValue+0x3c>
    12dc:	2c 81       	ldd	r18, Y+4	; 0x04
    12de:	3d 81       	ldd	r19, Y+5	; 0x05
    12e0:	21 15       	cp	r18, r1
    12e2:	31 05       	cpc	r19, r1
    12e4:	61 f0       	breq	.+24     	; 0x12fe <DIO_U8Get_PinValue+0x52>
    12e6:	52 c0       	rjmp	.+164    	; 0x138c <DIO_U8Get_PinValue+0xe0>
    12e8:	4c 81       	ldd	r20, Y+4	; 0x04
    12ea:	5d 81       	ldd	r21, Y+5	; 0x05
    12ec:	42 30       	cpi	r20, 0x02	; 2
    12ee:	51 05       	cpc	r21, r1
    12f0:	51 f1       	breq	.+84     	; 0x1346 <DIO_U8Get_PinValue+0x9a>
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	9d 81       	ldd	r25, Y+5	; 0x05
    12f6:	83 30       	cpi	r24, 0x03	; 3
    12f8:	91 05       	cpc	r25, r1
    12fa:	b9 f1       	breq	.+110    	; 0x136a <DIO_U8Get_PinValue+0xbe>
    12fc:	47 c0       	rjmp	.+142    	; 0x138c <DIO_U8Get_PinValue+0xe0>
			    {
			    	case DIO_PORTA:
			    		read =GET_BIT(PINA , Copy_U8Pin);
    12fe:	e9 e3       	ldi	r30, 0x39	; 57
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	88 2f       	mov	r24, r24
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a9 01       	movw	r20, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_U8Get_PinValue+0x6a>
    1312:	55 95       	asr	r21
    1314:	47 95       	ror	r20
    1316:	8a 95       	dec	r24
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_U8Get_PinValue+0x66>
    131a:	ca 01       	movw	r24, r20
    131c:	81 70       	andi	r24, 0x01	; 1
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	35 c0       	rjmp	.+106    	; 0x138c <DIO_U8Get_PinValue+0xe0>
			    		break;
			    	case DIO_PORTB:
			    		read=GET_BIT(PINB , Copy_U8Pin);
    1322:	e6 e3       	ldi	r30, 0x36	; 54
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a9 01       	movw	r20, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_U8Get_PinValue+0x8e>
    1336:	55 95       	asr	r21
    1338:	47 95       	ror	r20
    133a:	8a 95       	dec	r24
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_U8Get_PinValue+0x8a>
    133e:	ca 01       	movw	r24, r20
    1340:	81 70       	andi	r24, 0x01	; 1
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	23 c0       	rjmp	.+70     	; 0x138c <DIO_U8Get_PinValue+0xe0>
			    		break;
			    	case DIO_PORTC:
			    		read=GET_BIT(PINC , Copy_U8Pin);
    1346:	e3 e3       	ldi	r30, 0x33	; 51
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	a9 01       	movw	r20, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_U8Get_PinValue+0xb2>
    135a:	55 95       	asr	r21
    135c:	47 95       	ror	r20
    135e:	8a 95       	dec	r24
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_U8Get_PinValue+0xae>
    1362:	ca 01       	movw	r24, r20
    1364:	81 70       	andi	r24, 0x01	; 1
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	11 c0       	rjmp	.+34     	; 0x138c <DIO_U8Get_PinValue+0xe0>
			    	    break;
			    	case DIO_PORTD:
			    		read=GET_BIT(PIND , Copy_U8Pin);
    136a:	e0 e3       	ldi	r30, 0x30	; 48
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a9 01       	movw	r20, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_U8Get_PinValue+0xd6>
    137e:	55 95       	asr	r21
    1380:	47 95       	ror	r20
    1382:	8a 95       	dec	r24
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_U8Get_PinValue+0xd2>
    1386:	ca 01       	movw	r24, r20
    1388:	81 70       	andi	r24, 0x01	; 1
    138a:	89 83       	std	Y+1, r24	; 0x01
			    	    break;
			    }
	return read;
    138c:	89 81       	ldd	r24, Y+1	; 0x01
}
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <KPD_Init>:




void KPD_Init(void)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPortDirection(KPD_PORT, KPD_PORT_DIRECTION);
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	60 ef       	ldi	r22, 0xF0	; 240
    13aa:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_VidSetPortDirection>
	DIO_VidSetPortValue(KPD_PORT,DIO_ALL_HIGH);  //0b 1111   1111
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	6f ef       	ldi	r22, 0xFF	; 255
    13b2:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_VidSetPortValue>
	                                             //   high + pull up res
}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <KPD_u8GetPressedKey>:


u8 KPD_u8GetPressedKey(void){
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	af 97       	sbiw	r28, 0x2f	; 47
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_u8PressedKey= 0xFF	, PinVal;
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Loc_u8KPDArr[KPD_ROW_NUM][KPD_COL_NUM]= KPD_ARR;
    13d4:	ce 01       	movw	r24, r28
    13d6:	43 96       	adiw	r24, 0x13	; 19
    13d8:	9c a7       	std	Y+44, r25	; 0x2c
    13da:	8b a7       	std	Y+43, r24	; 0x2b
    13dc:	e2 ef       	ldi	r30, 0xF2	; 242
    13de:	f1 e0       	ldi	r31, 0x01	; 1
    13e0:	fe a7       	std	Y+46, r31	; 0x2e
    13e2:	ed a7       	std	Y+45, r30	; 0x2d
    13e4:	f0 e1       	ldi	r31, 0x10	; 16
    13e6:	ff a7       	std	Y+47, r31	; 0x2f
    13e8:	ed a5       	ldd	r30, Y+45	; 0x2d
    13ea:	fe a5       	ldd	r31, Y+46	; 0x2e
    13ec:	00 80       	ld	r0, Z
    13ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    13f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    13f2:	01 96       	adiw	r24, 0x01	; 1
    13f4:	9e a7       	std	Y+46, r25	; 0x2e
    13f6:	8d a7       	std	Y+45, r24	; 0x2d
    13f8:	eb a5       	ldd	r30, Y+43	; 0x2b
    13fa:	fc a5       	ldd	r31, Y+44	; 0x2c
    13fc:	00 82       	st	Z, r0
    13fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1400:	9c a5       	ldd	r25, Y+44	; 0x2c
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	9c a7       	std	Y+44, r25	; 0x2c
    1406:	8b a7       	std	Y+43, r24	; 0x2b
    1408:	9f a5       	ldd	r25, Y+47	; 0x2f
    140a:	91 50       	subi	r25, 0x01	; 1
    140c:	9f a7       	std	Y+47, r25	; 0x2f
    140e:	ef a5       	ldd	r30, Y+47	; 0x2f
    1410:	ee 23       	and	r30, r30
    1412:	51 f7       	brne	.-44     	; 0x13e8 <KPD_u8GetPressedKey+0x2c>
    u8 Loc_u8KPDCOLArr[KPD_COL_NUM]={COL1, COL2, COL3, COL4};
    1414:	84 e0       	ldi	r24, 0x04	; 4
    1416:	8b a3       	std	Y+35, r24	; 0x23
    1418:	85 e0       	ldi	r24, 0x05	; 5
    141a:	8c a3       	std	Y+36, r24	; 0x24
    141c:	86 e0       	ldi	r24, 0x06	; 6
    141e:	8d a3       	std	Y+37, r24	; 0x25
    1420:	87 e0       	ldi	r24, 0x07	; 7
    1422:	8e a3       	std	Y+38, r24	; 0x26
	u8 Loc_u8KPDROWArr[KPD_ROW_NUM]={ROW1, ROW2, ROW3, ROW4};
    1424:	1f a2       	std	Y+39, r1	; 0x27
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	88 a7       	std	Y+40, r24	; 0x28
    142a:	82 e0       	ldi	r24, 0x02	; 2
    142c:	89 a7       	std	Y+41, r24	; 0x29
    142e:	83 e0       	ldi	r24, 0x03	; 3
    1430:	8a a7       	std	Y+42, r24	; 0x2a
	for(u8 i=0; i < KPD_COL_NUM; i++)
    1432:	18 8a       	std	Y+16, r1	; 0x10
    1434:	d2 c0       	rjmp	.+420    	; 0x15da <KPD_u8GetPressedKey+0x21e>
	{ //loop for col
			/* ACTIVATE CURRENT COLUMN */
		DIO_VidSetPinValue(KPD_PORT, Loc_u8KPDCOLArr[i], DIO_LOW);
    1436:	88 89       	ldd	r24, Y+16	; 0x10
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	ce 01       	movw	r24, r28
    143e:	83 96       	adiw	r24, 0x23	; 35
    1440:	fc 01       	movw	r30, r24
    1442:	e2 0f       	add	r30, r18
    1444:	f3 1f       	adc	r31, r19
    1446:	90 81       	ld	r25, Z
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	69 2f       	mov	r22, r25
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
			/* SEARCH IF A ROW IS LOW THUS A KEY IS PRESSED */
		for(u8 j=0; j < KPD_ROW_NUM; j++ )
    1452:	1f 86       	std	Y+15, r1	; 0x0f
    1454:	ad c0       	rjmp	.+346    	; 0x15b0 <KPD_u8GetPressedKey+0x1f4>
		{//loop for rows
			PinVal=DIO_U8Get_PinValue(KPD_PORT, Loc_u8KPDROWArr[j]);
    1456:	8f 85       	ldd	r24, Y+15	; 0x0f
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	ce 01       	movw	r24, r28
    145e:	87 96       	adiw	r24, 0x27	; 39
    1460:	fc 01       	movw	r30, r24
    1462:	e2 0f       	add	r30, r18
    1464:	f3 1f       	adc	r31, r19
    1466:	90 81       	ld	r25, Z
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	69 2f       	mov	r22, r25
    146c:	0e 94 56 09 	call	0x12ac	; 0x12ac <DIO_U8Get_PinValue>
    1470:	89 8b       	std	Y+17, r24	; 0x11
				/* CHECK IF SWITCH IS PRESSED */
			if( DIO_LOW == PinVal)
    1472:	89 89       	ldd	r24, Y+17	; 0x11
    1474:	88 23       	and	r24, r24
    1476:	09 f0       	breq	.+2      	; 0x147a <KPD_u8GetPressedKey+0xbe>
    1478:	98 c0       	rjmp	.+304    	; 0x15aa <KPD_u8GetPressedKey+0x1ee>
			{
				Loc_u8PressedKey = Loc_u8KPDArr[j][i];
    147a:	8f 85       	ldd	r24, Y+15	; 0x0f
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	88 89       	ldd	r24, Y+16	; 0x10
    1482:	48 2f       	mov	r20, r24
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	22 0f       	add	r18, r18
    1488:	33 1f       	adc	r19, r19
    148a:	22 0f       	add	r18, r18
    148c:	33 1f       	adc	r19, r19
    148e:	ce 01       	movw	r24, r28
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	82 0f       	add	r24, r18
    1494:	93 1f       	adc	r25, r19
    1496:	84 0f       	add	r24, r20
    1498:	95 1f       	adc	r25, r21
    149a:	fc 01       	movw	r30, r24
    149c:	72 96       	adiw	r30, 0x12	; 18
    149e:	80 81       	ld	r24, Z
    14a0:	8a 8b       	std	Y+18, r24	; 0x12
    14a2:	0e c0       	rjmp	.+28     	; 0x14c0 <KPD_u8GetPressedKey+0x104>
					/* Polling ( wait till button is released ) */
				while( DIO_LOW == PinVal	)
				{
					PinVal=DIO_U8Get_PinValue(KPD_PORT, Loc_u8KPDROWArr[j]);
    14a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	ce 01       	movw	r24, r28
    14ac:	87 96       	adiw	r24, 0x27	; 39
    14ae:	fc 01       	movw	r30, r24
    14b0:	e2 0f       	add	r30, r18
    14b2:	f3 1f       	adc	r31, r19
    14b4:	90 81       	ld	r25, Z
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	69 2f       	mov	r22, r25
    14ba:	0e 94 56 09 	call	0x12ac	; 0x12ac <DIO_U8Get_PinValue>
    14be:	89 8b       	std	Y+17, r24	; 0x11
				/* CHECK IF SWITCH IS PRESSED */
			if( DIO_LOW == PinVal)
			{
				Loc_u8PressedKey = Loc_u8KPDArr[j][i];
					/* Polling ( wait till button is released ) */
				while( DIO_LOW == PinVal	)
    14c0:	89 89       	ldd	r24, Y+17	; 0x11
    14c2:	88 23       	and	r24, r24
    14c4:	79 f3       	breq	.-34     	; 0x14a4 <KPD_u8GetPressedKey+0xe8>
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	a0 e2       	ldi	r26, 0x20	; 32
    14cc:	b1 e4       	ldi	r27, 0x41	; 65
    14ce:	8b 87       	std	Y+11, r24	; 0x0b
    14d0:	9c 87       	std	Y+12, r25	; 0x0c
    14d2:	ad 87       	std	Y+13, r26	; 0x0d
    14d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14da:	8d 85       	ldd	r24, Y+13	; 0x0d
    14dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	4a e7       	ldi	r20, 0x7A	; 122
    14e4:	55 e4       	ldi	r21, 0x45	; 69
    14e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	8f 83       	std	Y+7, r24	; 0x07
    14f0:	98 87       	std	Y+8, r25	; 0x08
    14f2:	a9 87       	std	Y+9, r26	; 0x09
    14f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14f6:	6f 81       	ldd	r22, Y+7	; 0x07
    14f8:	78 85       	ldd	r23, Y+8	; 0x08
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e8       	ldi	r20, 0x80	; 128
    1504:	5f e3       	ldi	r21, 0x3F	; 63
    1506:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    150a:	88 23       	and	r24, r24
    150c:	2c f4       	brge	.+10     	; 0x1518 <KPD_u8GetPressedKey+0x15c>
		__ticks = 1;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	9e 83       	std	Y+6, r25	; 0x06
    1514:	8d 83       	std	Y+5, r24	; 0x05
    1516:	3f c0       	rjmp	.+126    	; 0x1596 <KPD_u8GetPressedKey+0x1da>
	else if (__tmp > 65535)
    1518:	6f 81       	ldd	r22, Y+7	; 0x07
    151a:	78 85       	ldd	r23, Y+8	; 0x08
    151c:	89 85       	ldd	r24, Y+9	; 0x09
    151e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	3f ef       	ldi	r19, 0xFF	; 255
    1524:	4f e7       	ldi	r20, 0x7F	; 127
    1526:	57 e4       	ldi	r21, 0x47	; 71
    1528:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    152c:	18 16       	cp	r1, r24
    152e:	4c f5       	brge	.+82     	; 0x1582 <KPD_u8GetPressedKey+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1530:	6b 85       	ldd	r22, Y+11	; 0x0b
    1532:	7c 85       	ldd	r23, Y+12	; 0x0c
    1534:	8d 85       	ldd	r24, Y+13	; 0x0d
    1536:	9e 85       	ldd	r25, Y+14	; 0x0e
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e2       	ldi	r20, 0x20	; 32
    153e:	51 e4       	ldi	r21, 0x41	; 65
    1540:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	bc 01       	movw	r22, r24
    154a:	cd 01       	movw	r24, r26
    154c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	9e 83       	std	Y+6, r25	; 0x06
    1556:	8d 83       	std	Y+5, r24	; 0x05
    1558:	0f c0       	rjmp	.+30     	; 0x1578 <KPD_u8GetPressedKey+0x1bc>
    155a:	80 e9       	ldi	r24, 0x90	; 144
    155c:	91 e0       	ldi	r25, 0x01	; 1
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	f1 f7       	brne	.-4      	; 0x1566 <KPD_u8GetPressedKey+0x1aa>
    156a:	9c 83       	std	Y+4, r25	; 0x04
    156c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	69 f7       	brne	.-38     	; 0x155a <KPD_u8GetPressedKey+0x19e>
    1580:	14 c0       	rjmp	.+40     	; 0x15aa <KPD_u8GetPressedKey+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1582:	6f 81       	ldd	r22, Y+7	; 0x07
    1584:	78 85       	ldd	r23, Y+8	; 0x08
    1586:	89 85       	ldd	r24, Y+9	; 0x09
    1588:	9a 85       	ldd	r25, Y+10	; 0x0a
    158a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	9e 83       	std	Y+6, r25	; 0x06
    1594:	8d 83       	std	Y+5, r24	; 0x05
    1596:	8d 81       	ldd	r24, Y+5	; 0x05
    1598:	9e 81       	ldd	r25, Y+6	; 0x06
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	9a 81       	ldd	r25, Y+2	; 0x02
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <KPD_u8GetPressedKey+0x1e6>
    15a6:	9a 83       	std	Y+2, r25	; 0x02
    15a8:	89 83       	std	Y+1, r24	; 0x01
	for(u8 i=0; i < KPD_COL_NUM; i++)
	{ //loop for col
			/* ACTIVATE CURRENT COLUMN */
		DIO_VidSetPinValue(KPD_PORT, Loc_u8KPDCOLArr[i], DIO_LOW);
			/* SEARCH IF A ROW IS LOW THUS A KEY IS PRESSED */
		for(u8 j=0; j < KPD_ROW_NUM; j++ )
    15aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ac:	8f 5f       	subi	r24, 0xFF	; 255
    15ae:	8f 87       	std	Y+15, r24	; 0x0f
    15b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b2:	84 30       	cpi	r24, 0x04	; 4
    15b4:	08 f4       	brcc	.+2      	; 0x15b8 <KPD_u8GetPressedKey+0x1fc>
    15b6:	4f cf       	rjmp	.-354    	; 0x1456 <KPD_u8GetPressedKey+0x9a>
				}
				_delay_ms(10);
			}
		}
			/* DEACTIVATE CURRENT COLUMN */
		DIO_VidSetPinValue(KPD_PORT, Loc_u8KPDCOLArr[i], DIO_HIGH);
    15b8:	88 89       	ldd	r24, Y+16	; 0x10
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	ce 01       	movw	r24, r28
    15c0:	83 96       	adiw	r24, 0x23	; 35
    15c2:	fc 01       	movw	r30, r24
    15c4:	e2 0f       	add	r30, r18
    15c6:	f3 1f       	adc	r31, r19
    15c8:	90 81       	ld	r25, Z
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	69 2f       	mov	r22, r25
    15ce:	41 e0       	ldi	r20, 0x01	; 1
    15d0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
u8 KPD_u8GetPressedKey(void){
	u8 Loc_u8PressedKey= 0xFF	, PinVal;
	u8 Loc_u8KPDArr[KPD_ROW_NUM][KPD_COL_NUM]= KPD_ARR;
    u8 Loc_u8KPDCOLArr[KPD_COL_NUM]={COL1, COL2, COL3, COL4};
	u8 Loc_u8KPDROWArr[KPD_ROW_NUM]={ROW1, ROW2, ROW3, ROW4};
	for(u8 i=0; i < KPD_COL_NUM; i++)
    15d4:	88 89       	ldd	r24, Y+16	; 0x10
    15d6:	8f 5f       	subi	r24, 0xFF	; 255
    15d8:	88 8b       	std	Y+16, r24	; 0x10
    15da:	88 89       	ldd	r24, Y+16	; 0x10
    15dc:	84 30       	cpi	r24, 0x04	; 4
    15de:	08 f4       	brcc	.+2      	; 0x15e2 <KPD_u8GetPressedKey+0x226>
    15e0:	2a cf       	rjmp	.-428    	; 0x1436 <KPD_u8GetPressedKey+0x7a>
			}
		}
			/* DEACTIVATE CURRENT COLUMN */
		DIO_VidSetPinValue(KPD_PORT, Loc_u8KPDCOLArr[i], DIO_HIGH);
	}
	return Loc_u8PressedKey;
    15e2:	8a 89       	ldd	r24, Y+18	; 0x12
}
    15e4:	af 96       	adiw	r28, 0x2f	; 47
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <LCD_SEND_COMMAND>:
#include"LCD.h"
void LCD_SEND_COMMAND(u8 Copy_U8LcdCommand)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	69 97       	sbiw	r28, 0x19	; 25
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	89 8f       	std	Y+25, r24	; 0x19
	DIO_VidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_LOW);
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	63 e0       	ldi	r22, 0x03	; 3
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8LcdCommand);
    1620:	82 e0       	ldi	r24, 0x02	; 2
    1622:	69 8d       	ldd	r22, Y+25	; 0x19
    1624:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_HIGH);
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	62 e0       	ldi	r22, 0x02	; 2
    162c:	41 e0       	ldi	r20, 0x01	; 1
    162e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a0 e8       	ldi	r26, 0x80	; 128
    1638:	bf e3       	ldi	r27, 0x3F	; 63
    163a:	8d 8b       	std	Y+21, r24	; 0x15
    163c:	9e 8b       	std	Y+22, r25	; 0x16
    163e:	af 8b       	std	Y+23, r26	; 0x17
    1640:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1642:	6d 89       	ldd	r22, Y+21	; 0x15
    1644:	7e 89       	ldd	r23, Y+22	; 0x16
    1646:	8f 89       	ldd	r24, Y+23	; 0x17
    1648:	98 8d       	ldd	r25, Y+24	; 0x18
    164a:	2b ea       	ldi	r18, 0xAB	; 171
    164c:	3a ea       	ldi	r19, 0xAA	; 170
    164e:	4a ea       	ldi	r20, 0xAA	; 170
    1650:	50 e4       	ldi	r21, 0x40	; 64
    1652:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	89 8b       	std	Y+17, r24	; 0x11
    165c:	9a 8b       	std	Y+18, r25	; 0x12
    165e:	ab 8b       	std	Y+19, r26	; 0x13
    1660:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1662:	69 89       	ldd	r22, Y+17	; 0x11
    1664:	7a 89       	ldd	r23, Y+18	; 0x12
    1666:	8b 89       	ldd	r24, Y+19	; 0x13
    1668:	9c 89       	ldd	r25, Y+20	; 0x14
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e8       	ldi	r20, 0x80	; 128
    1670:	5f e3       	ldi	r21, 0x3F	; 63
    1672:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1676:	88 23       	and	r24, r24
    1678:	1c f4       	brge	.+6      	; 0x1680 <LCD_SEND_COMMAND+0x8a>
		__ticks = 1;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	88 8b       	std	Y+16, r24	; 0x10
    167e:	91 c0       	rjmp	.+290    	; 0x17a2 <LCD_SEND_COMMAND+0x1ac>
	else if (__tmp > 255)
    1680:	69 89       	ldd	r22, Y+17	; 0x11
    1682:	7a 89       	ldd	r23, Y+18	; 0x12
    1684:	8b 89       	ldd	r24, Y+19	; 0x13
    1686:	9c 89       	ldd	r25, Y+20	; 0x14
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	4f e7       	ldi	r20, 0x7F	; 127
    168e:	53 e4       	ldi	r21, 0x43	; 67
    1690:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1694:	18 16       	cp	r1, r24
    1696:	0c f0       	brlt	.+2      	; 0x169a <LCD_SEND_COMMAND+0xa4>
    1698:	7b c0       	rjmp	.+246    	; 0x1790 <LCD_SEND_COMMAND+0x19a>
	{
		_delay_ms(__us / 1000.0);
    169a:	6d 89       	ldd	r22, Y+21	; 0x15
    169c:	7e 89       	ldd	r23, Y+22	; 0x16
    169e:	8f 89       	ldd	r24, Y+23	; 0x17
    16a0:	98 8d       	ldd	r25, Y+24	; 0x18
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	4a e7       	ldi	r20, 0x7A	; 122
    16a8:	54 e4       	ldi	r21, 0x44	; 68
    16aa:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	8c 87       	std	Y+12, r24	; 0x0c
    16b4:	9d 87       	std	Y+13, r25	; 0x0d
    16b6:	ae 87       	std	Y+14, r26	; 0x0e
    16b8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    16bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    16be:	8e 85       	ldd	r24, Y+14	; 0x0e
    16c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	4a e7       	ldi	r20, 0x7A	; 122
    16c8:	55 e4       	ldi	r21, 0x45	; 69
    16ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	88 87       	std	Y+8, r24	; 0x08
    16d4:	99 87       	std	Y+9, r25	; 0x09
    16d6:	aa 87       	std	Y+10, r26	; 0x0a
    16d8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    16da:	68 85       	ldd	r22, Y+8	; 0x08
    16dc:	79 85       	ldd	r23, Y+9	; 0x09
    16de:	8a 85       	ldd	r24, Y+10	; 0x0a
    16e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e8       	ldi	r20, 0x80	; 128
    16e8:	5f e3       	ldi	r21, 0x3F	; 63
    16ea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16ee:	88 23       	and	r24, r24
    16f0:	2c f4       	brge	.+10     	; 0x16fc <LCD_SEND_COMMAND+0x106>
		__ticks = 1;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	9f 83       	std	Y+7, r25	; 0x07
    16f8:	8e 83       	std	Y+6, r24	; 0x06
    16fa:	3f c0       	rjmp	.+126    	; 0x177a <LCD_SEND_COMMAND+0x184>
	else if (__tmp > 65535)
    16fc:	68 85       	ldd	r22, Y+8	; 0x08
    16fe:	79 85       	ldd	r23, Y+9	; 0x09
    1700:	8a 85       	ldd	r24, Y+10	; 0x0a
    1702:	9b 85       	ldd	r25, Y+11	; 0x0b
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	3f ef       	ldi	r19, 0xFF	; 255
    1708:	4f e7       	ldi	r20, 0x7F	; 127
    170a:	57 e4       	ldi	r21, 0x47	; 71
    170c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1710:	18 16       	cp	r1, r24
    1712:	4c f5       	brge	.+82     	; 0x1766 <LCD_SEND_COMMAND+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1714:	6c 85       	ldd	r22, Y+12	; 0x0c
    1716:	7d 85       	ldd	r23, Y+13	; 0x0d
    1718:	8e 85       	ldd	r24, Y+14	; 0x0e
    171a:	9f 85       	ldd	r25, Y+15	; 0x0f
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e2       	ldi	r20, 0x20	; 32
    1722:	51 e4       	ldi	r21, 0x41	; 65
    1724:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9f 83       	std	Y+7, r25	; 0x07
    173a:	8e 83       	std	Y+6, r24	; 0x06
    173c:	0f c0       	rjmp	.+30     	; 0x175c <LCD_SEND_COMMAND+0x166>
    173e:	80 e9       	ldi	r24, 0x90	; 144
    1740:	91 e0       	ldi	r25, 0x01	; 1
    1742:	9d 83       	std	Y+5, r25	; 0x05
    1744:	8c 83       	std	Y+4, r24	; 0x04
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <LCD_SEND_COMMAND+0x154>
    174e:	9d 83       	std	Y+5, r25	; 0x05
    1750:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1752:	8e 81       	ldd	r24, Y+6	; 0x06
    1754:	9f 81       	ldd	r25, Y+7	; 0x07
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	9f 83       	std	Y+7, r25	; 0x07
    175a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175c:	8e 81       	ldd	r24, Y+6	; 0x06
    175e:	9f 81       	ldd	r25, Y+7	; 0x07
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	69 f7       	brne	.-38     	; 0x173e <LCD_SEND_COMMAND+0x148>
    1764:	24 c0       	rjmp	.+72     	; 0x17ae <LCD_SEND_COMMAND+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1766:	68 85       	ldd	r22, Y+8	; 0x08
    1768:	79 85       	ldd	r23, Y+9	; 0x09
    176a:	8a 85       	ldd	r24, Y+10	; 0x0a
    176c:	9b 85       	ldd	r25, Y+11	; 0x0b
    176e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	9f 83       	std	Y+7, r25	; 0x07
    1778:	8e 83       	std	Y+6, r24	; 0x06
    177a:	8e 81       	ldd	r24, Y+6	; 0x06
    177c:	9f 81       	ldd	r25, Y+7	; 0x07
    177e:	9b 83       	std	Y+3, r25	; 0x03
    1780:	8a 83       	std	Y+2, r24	; 0x02
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	9b 81       	ldd	r25, Y+3	; 0x03
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <LCD_SEND_COMMAND+0x190>
    178a:	9b 83       	std	Y+3, r25	; 0x03
    178c:	8a 83       	std	Y+2, r24	; 0x02
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <LCD_SEND_COMMAND+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1790:	69 89       	ldd	r22, Y+17	; 0x11
    1792:	7a 89       	ldd	r23, Y+18	; 0x12
    1794:	8b 89       	ldd	r24, Y+19	; 0x13
    1796:	9c 89       	ldd	r25, Y+20	; 0x14
    1798:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	88 8b       	std	Y+16, r24	; 0x10
    17a2:	88 89       	ldd	r24, Y+16	; 0x10
    17a4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	8a 95       	dec	r24
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <LCD_SEND_COMMAND+0x1b2>
    17ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	62 e0       	ldi	r22, 0x02	; 2
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
	//_delay_us(1);

}
    17b8:	69 96       	adiw	r28, 0x19	; 25
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <LCD_SEND_Char>:
void LCD_SEND_Char(u8 Copy_U8LcdData) //to send character
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	69 97       	sbiw	r28, 0x19	; 25
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	89 8f       	std	Y+25, r24	; 0x19
	DIO_VidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_HIGH);
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	63 e0       	ldi	r22, 0x03	; 3
    17e4:	41 e0       	ldi	r20, 0x01	; 1
    17e6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	61 e0       	ldi	r22, 0x01	; 1
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8LcdData);
    17f4:	82 e0       	ldi	r24, 0x02	; 2
    17f6:	69 8d       	ldd	r22, Y+25	; 0x19
    17f8:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_HIGH);
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	62 e0       	ldi	r22, 0x02	; 2
    1800:	41 e0       	ldi	r20, 0x01	; 1
    1802:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a0 e8       	ldi	r26, 0x80	; 128
    180c:	bf e3       	ldi	r27, 0x3F	; 63
    180e:	8d 8b       	std	Y+21, r24	; 0x15
    1810:	9e 8b       	std	Y+22, r25	; 0x16
    1812:	af 8b       	std	Y+23, r26	; 0x17
    1814:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1816:	6d 89       	ldd	r22, Y+21	; 0x15
    1818:	7e 89       	ldd	r23, Y+22	; 0x16
    181a:	8f 89       	ldd	r24, Y+23	; 0x17
    181c:	98 8d       	ldd	r25, Y+24	; 0x18
    181e:	2b ea       	ldi	r18, 0xAB	; 171
    1820:	3a ea       	ldi	r19, 0xAA	; 170
    1822:	4a ea       	ldi	r20, 0xAA	; 170
    1824:	50 e4       	ldi	r21, 0x40	; 64
    1826:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	89 8b       	std	Y+17, r24	; 0x11
    1830:	9a 8b       	std	Y+18, r25	; 0x12
    1832:	ab 8b       	std	Y+19, r26	; 0x13
    1834:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1836:	69 89       	ldd	r22, Y+17	; 0x11
    1838:	7a 89       	ldd	r23, Y+18	; 0x12
    183a:	8b 89       	ldd	r24, Y+19	; 0x13
    183c:	9c 89       	ldd	r25, Y+20	; 0x14
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e8       	ldi	r20, 0x80	; 128
    1844:	5f e3       	ldi	r21, 0x3F	; 63
    1846:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    184a:	88 23       	and	r24, r24
    184c:	1c f4       	brge	.+6      	; 0x1854 <LCD_SEND_Char+0x8a>
		__ticks = 1;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	88 8b       	std	Y+16, r24	; 0x10
    1852:	91 c0       	rjmp	.+290    	; 0x1976 <LCD_SEND_Char+0x1ac>
	else if (__tmp > 255)
    1854:	69 89       	ldd	r22, Y+17	; 0x11
    1856:	7a 89       	ldd	r23, Y+18	; 0x12
    1858:	8b 89       	ldd	r24, Y+19	; 0x13
    185a:	9c 89       	ldd	r25, Y+20	; 0x14
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	53 e4       	ldi	r21, 0x43	; 67
    1864:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	0c f0       	brlt	.+2      	; 0x186e <LCD_SEND_Char+0xa4>
    186c:	7b c0       	rjmp	.+246    	; 0x1964 <LCD_SEND_Char+0x19a>
	{
		_delay_ms(__us / 1000.0);
    186e:	6d 89       	ldd	r22, Y+21	; 0x15
    1870:	7e 89       	ldd	r23, Y+22	; 0x16
    1872:	8f 89       	ldd	r24, Y+23	; 0x17
    1874:	98 8d       	ldd	r25, Y+24	; 0x18
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	4a e7       	ldi	r20, 0x7A	; 122
    187c:	54 e4       	ldi	r21, 0x44	; 68
    187e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	8c 87       	std	Y+12, r24	; 0x0c
    1888:	9d 87       	std	Y+13, r25	; 0x0d
    188a:	ae 87       	std	Y+14, r26	; 0x0e
    188c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1890:	7d 85       	ldd	r23, Y+13	; 0x0d
    1892:	8e 85       	ldd	r24, Y+14	; 0x0e
    1894:	9f 85       	ldd	r25, Y+15	; 0x0f
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a e7       	ldi	r20, 0x7A	; 122
    189c:	55 e4       	ldi	r21, 0x45	; 69
    189e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	88 87       	std	Y+8, r24	; 0x08
    18a8:	99 87       	std	Y+9, r25	; 0x09
    18aa:	aa 87       	std	Y+10, r26	; 0x0a
    18ac:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    18ae:	68 85       	ldd	r22, Y+8	; 0x08
    18b0:	79 85       	ldd	r23, Y+9	; 0x09
    18b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    18b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e8       	ldi	r20, 0x80	; 128
    18bc:	5f e3       	ldi	r21, 0x3F	; 63
    18be:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18c2:	88 23       	and	r24, r24
    18c4:	2c f4       	brge	.+10     	; 0x18d0 <LCD_SEND_Char+0x106>
		__ticks = 1;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9f 83       	std	Y+7, r25	; 0x07
    18cc:	8e 83       	std	Y+6, r24	; 0x06
    18ce:	3f c0       	rjmp	.+126    	; 0x194e <LCD_SEND_Char+0x184>
	else if (__tmp > 65535)
    18d0:	68 85       	ldd	r22, Y+8	; 0x08
    18d2:	79 85       	ldd	r23, Y+9	; 0x09
    18d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    18d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	3f ef       	ldi	r19, 0xFF	; 255
    18dc:	4f e7       	ldi	r20, 0x7F	; 127
    18de:	57 e4       	ldi	r21, 0x47	; 71
    18e0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18e4:	18 16       	cp	r1, r24
    18e6:	4c f5       	brge	.+82     	; 0x193a <LCD_SEND_Char+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    18ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    18ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    18ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e2       	ldi	r20, 0x20	; 32
    18f6:	51 e4       	ldi	r21, 0x41	; 65
    18f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	bc 01       	movw	r22, r24
    1902:	cd 01       	movw	r24, r26
    1904:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	9f 83       	std	Y+7, r25	; 0x07
    190e:	8e 83       	std	Y+6, r24	; 0x06
    1910:	0f c0       	rjmp	.+30     	; 0x1930 <LCD_SEND_Char+0x166>
    1912:	80 e9       	ldi	r24, 0x90	; 144
    1914:	91 e0       	ldi	r25, 0x01	; 1
    1916:	9d 83       	std	Y+5, r25	; 0x05
    1918:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	9d 81       	ldd	r25, Y+5	; 0x05
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <LCD_SEND_Char+0x154>
    1922:	9d 83       	std	Y+5, r25	; 0x05
    1924:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1926:	8e 81       	ldd	r24, Y+6	; 0x06
    1928:	9f 81       	ldd	r25, Y+7	; 0x07
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	9f 83       	std	Y+7, r25	; 0x07
    192e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1930:	8e 81       	ldd	r24, Y+6	; 0x06
    1932:	9f 81       	ldd	r25, Y+7	; 0x07
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	69 f7       	brne	.-38     	; 0x1912 <LCD_SEND_Char+0x148>
    1938:	24 c0       	rjmp	.+72     	; 0x1982 <LCD_SEND_Char+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193a:	68 85       	ldd	r22, Y+8	; 0x08
    193c:	79 85       	ldd	r23, Y+9	; 0x09
    193e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1940:	9b 85       	ldd	r25, Y+11	; 0x0b
    1942:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9f 83       	std	Y+7, r25	; 0x07
    194c:	8e 83       	std	Y+6, r24	; 0x06
    194e:	8e 81       	ldd	r24, Y+6	; 0x06
    1950:	9f 81       	ldd	r25, Y+7	; 0x07
    1952:	9b 83       	std	Y+3, r25	; 0x03
    1954:	8a 83       	std	Y+2, r24	; 0x02
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	9b 81       	ldd	r25, Y+3	; 0x03
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <LCD_SEND_Char+0x190>
    195e:	9b 83       	std	Y+3, r25	; 0x03
    1960:	8a 83       	std	Y+2, r24	; 0x02
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <LCD_SEND_Char+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1964:	69 89       	ldd	r22, Y+17	; 0x11
    1966:	7a 89       	ldd	r23, Y+18	; 0x12
    1968:	8b 89       	ldd	r24, Y+19	; 0x13
    196a:	9c 89       	ldd	r25, Y+20	; 0x14
    196c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	88 8b       	std	Y+16, r24	; 0x10
    1976:	88 89       	ldd	r24, Y+16	; 0x10
    1978:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	8a 95       	dec	r24
    197e:	f1 f7       	brne	.-4      	; 0x197c <LCD_SEND_Char+0x1b2>
    1980:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	62 e0       	ldi	r22, 0x02	; 2
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
	//_delay_us(1);

}
    198c:	69 96       	adiw	r28, 0x19	; 25
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <LCD_VidInit>:
void LCD_VidInit(void)
{
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	cc 54       	subi	r28, 0x4C	; 76
    19ac:	d0 40       	sbci	r29, 0x00	; 0
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(LCD_DATA_PORT,DIO_ALL_OUTPUT);
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	6f ef       	ldi	r22, 0xFF	; 255
    19bc:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_OUTPUT);
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	62 e0       	ldi	r22, 0x02	; 2
    19c4:	41 e0       	ldi	r20, 0x01	; 1
    19c6:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_OUTPUT);
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	41 e0       	ldi	r20, 0x01	; 1
    19d0:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_OUTPUT);
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	63 e0       	ldi	r22, 0x03	; 3
    19d8:	41 e0       	ldi	r20, 0x01	; 1
    19da:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
    19de:	fe 01       	movw	r30, r28
    19e0:	e7 5b       	subi	r30, 0xB7	; 183
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	ac e0       	ldi	r26, 0x0C	; 12
    19ea:	b2 e4       	ldi	r27, 0x42	; 66
    19ec:	80 83       	st	Z, r24
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	a2 83       	std	Z+2, r26	; 0x02
    19f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f4:	8e 01       	movw	r16, r28
    19f6:	0b 5b       	subi	r16, 0xBB	; 187
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	fe 01       	movw	r30, r28
    19fc:	e7 5b       	subi	r30, 0xB7	; 183
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	4a e7       	ldi	r20, 0x7A	; 122
    1a0e:	55 e4       	ldi	r21, 0x45	; 69
    1a10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	f8 01       	movw	r30, r16
    1a1a:	80 83       	st	Z, r24
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	a2 83       	std	Z+2, r26	; 0x02
    1a20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a22:	fe 01       	movw	r30, r28
    1a24:	eb 5b       	subi	r30, 0xBB	; 187
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	44 f4       	brge	.+16     	; 0x1a50 <LCD_VidInit+0xb2>
		__ticks = 1;
    1a40:	fe 01       	movw	r30, r28
    1a42:	ed 5b       	subi	r30, 0xBD	; 189
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24
    1a4e:	64 c0       	rjmp	.+200    	; 0x1b18 <LCD_VidInit+0x17a>
	else if (__tmp > 65535)
    1a50:	fe 01       	movw	r30, r28
    1a52:	eb 5b       	subi	r30, 0xBB	; 187
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	60 81       	ld	r22, Z
    1a58:	71 81       	ldd	r23, Z+1	; 0x01
    1a5a:	82 81       	ldd	r24, Z+2	; 0x02
    1a5c:	93 81       	ldd	r25, Z+3	; 0x03
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	3f ef       	ldi	r19, 0xFF	; 255
    1a62:	4f e7       	ldi	r20, 0x7F	; 127
    1a64:	57 e4       	ldi	r21, 0x47	; 71
    1a66:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a6a:	18 16       	cp	r1, r24
    1a6c:	0c f0       	brlt	.+2      	; 0x1a70 <LCD_VidInit+0xd2>
    1a6e:	43 c0       	rjmp	.+134    	; 0x1af6 <LCD_VidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a70:	fe 01       	movw	r30, r28
    1a72:	e7 5b       	subi	r30, 0xB7	; 183
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e2       	ldi	r20, 0x20	; 32
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8e 01       	movw	r16, r28
    1a90:	0d 5b       	subi	r16, 0xBD	; 189
    1a92:	1f 4f       	sbci	r17, 0xFF	; 255
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	f8 01       	movw	r30, r16
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
    1aa6:	1f c0       	rjmp	.+62     	; 0x1ae6 <LCD_VidInit+0x148>
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	ef 5b       	subi	r30, 0xBF	; 191
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 e9       	ldi	r24, 0x90	; 144
    1ab0:	91 e0       	ldi	r25, 0x01	; 1
    1ab2:	91 83       	std	Z+1, r25	; 0x01
    1ab4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	ef 5b       	subi	r30, 0xBF	; 191
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <LCD_VidInit+0x122>
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	ef 5b       	subi	r30, 0xBF	; 191
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ace:	de 01       	movw	r26, r28
    1ad0:	ad 5b       	subi	r26, 0xBD	; 189
    1ad2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	ed 5b       	subi	r30, 0xBD	; 189
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	11 96       	adiw	r26, 0x01	; 1
    1ae2:	9c 93       	st	X, r25
    1ae4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	ed 5b       	subi	r30, 0xBD	; 189
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 81       	ld	r24, Z
    1aee:	91 81       	ldd	r25, Z+1	; 0x01
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	d1 f6       	brne	.-76     	; 0x1aa8 <LCD_VidInit+0x10a>
    1af4:	24 c0       	rjmp	.+72     	; 0x1b3e <LCD_VidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	8e 01       	movw	r16, r28
    1af8:	0d 5b       	subi	r16, 0xBD	; 189
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	fe 01       	movw	r30, r28
    1afe:	eb 5b       	subi	r30, 0xBB	; 187
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	60 81       	ld	r22, Z
    1b04:	71 81       	ldd	r23, Z+1	; 0x01
    1b06:	82 81       	ldd	r24, Z+2	; 0x02
    1b08:	93 81       	ldd	r25, Z+3	; 0x03
    1b0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	f8 01       	movw	r30, r16
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	80 83       	st	Z, r24
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ed 5b       	subi	r30, 0xBD	; 189
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	80 81       	ld	r24, Z
    1b20:	91 81       	ldd	r25, Z+1	; 0x01
    1b22:	fe 01       	movw	r30, r28
    1b24:	ff 96       	adiw	r30, 0x3f	; 63
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	80 83       	st	Z, r24
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ff 96       	adiw	r30, 0x3f	; 63
    1b2e:	80 81       	ld	r24, Z
    1b30:	91 81       	ldd	r25, Z+1	; 0x01
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_VidInit+0x194>
    1b36:	fe 01       	movw	r30, r28
    1b38:	ff 96       	adiw	r30, 0x3f	; 63
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	80 83       	st	Z, r24
	//DELAY MORE THAN 30 MS
	_delay_ms(35);

	LCD_SEND_COMMAND(0b00111000); //0011NFXX ,    N=HOW MANY LINES YOU WANT TO USE(1)  ,   F= FONT SIZE(0=5*7)
    1b3e:	88 e3       	ldi	r24, 0x38	; 56
    1b40:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a8 e4       	ldi	r26, 0x48	; 72
    1b4a:	b2 e4       	ldi	r27, 0x42	; 66
    1b4c:	8b af       	std	Y+59, r24	; 0x3b
    1b4e:	9c af       	std	Y+60, r25	; 0x3c
    1b50:	ad af       	std	Y+61, r26	; 0x3d
    1b52:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b54:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b56:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b58:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b5c:	2b ea       	ldi	r18, 0xAB	; 171
    1b5e:	3a ea       	ldi	r19, 0xAA	; 170
    1b60:	4a ea       	ldi	r20, 0xAA	; 170
    1b62:	50 e4       	ldi	r21, 0x40	; 64
    1b64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	8f ab       	std	Y+55, r24	; 0x37
    1b6e:	98 af       	std	Y+56, r25	; 0x38
    1b70:	a9 af       	std	Y+57, r26	; 0x39
    1b72:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1b74:	6f a9       	ldd	r22, Y+55	; 0x37
    1b76:	78 ad       	ldd	r23, Y+56	; 0x38
    1b78:	89 ad       	ldd	r24, Y+57	; 0x39
    1b7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e8       	ldi	r20, 0x80	; 128
    1b82:	5f e3       	ldi	r21, 0x3F	; 63
    1b84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b88:	88 23       	and	r24, r24
    1b8a:	1c f4       	brge	.+6      	; 0x1b92 <LCD_VidInit+0x1f4>
		__ticks = 1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	8e ab       	std	Y+54, r24	; 0x36
    1b90:	91 c0       	rjmp	.+290    	; 0x1cb4 <LCD_VidInit+0x316>
	else if (__tmp > 255)
    1b92:	6f a9       	ldd	r22, Y+55	; 0x37
    1b94:	78 ad       	ldd	r23, Y+56	; 0x38
    1b96:	89 ad       	ldd	r24, Y+57	; 0x39
    1b98:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ba0:	53 e4       	ldi	r21, 0x43	; 67
    1ba2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ba6:	18 16       	cp	r1, r24
    1ba8:	0c f0       	brlt	.+2      	; 0x1bac <LCD_VidInit+0x20e>
    1baa:	7b c0       	rjmp	.+246    	; 0x1ca2 <LCD_VidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1bac:	6b ad       	ldd	r22, Y+59	; 0x3b
    1bae:	7c ad       	ldd	r23, Y+60	; 0x3c
    1bb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a e7       	ldi	r20, 0x7A	; 122
    1bba:	54 e4       	ldi	r21, 0x44	; 68
    1bbc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8a ab       	std	Y+50, r24	; 0x32
    1bc6:	9b ab       	std	Y+51, r25	; 0x33
    1bc8:	ac ab       	std	Y+52, r26	; 0x34
    1bca:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	6a a9       	ldd	r22, Y+50	; 0x32
    1bce:	7b a9       	ldd	r23, Y+51	; 0x33
    1bd0:	8c a9       	ldd	r24, Y+52	; 0x34
    1bd2:	9d a9       	ldd	r25, Y+53	; 0x35
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a e7       	ldi	r20, 0x7A	; 122
    1bda:	55 e4       	ldi	r21, 0x45	; 69
    1bdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	8e a7       	std	Y+46, r24	; 0x2e
    1be6:	9f a7       	std	Y+47, r25	; 0x2f
    1be8:	a8 ab       	std	Y+48, r26	; 0x30
    1bea:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1bec:	6e a5       	ldd	r22, Y+46	; 0x2e
    1bee:	7f a5       	ldd	r23, Y+47	; 0x2f
    1bf0:	88 a9       	ldd	r24, Y+48	; 0x30
    1bf2:	99 a9       	ldd	r25, Y+49	; 0x31
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <LCD_VidInit+0x270>
		__ticks = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9d a7       	std	Y+45, r25	; 0x2d
    1c0a:	8c a7       	std	Y+44, r24	; 0x2c
    1c0c:	3f c0       	rjmp	.+126    	; 0x1c8c <LCD_VidInit+0x2ee>
	else if (__tmp > 65535)
    1c0e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c10:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c12:	88 a9       	ldd	r24, Y+48	; 0x30
    1c14:	99 a9       	ldd	r25, Y+49	; 0x31
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	4c f5       	brge	.+82     	; 0x1c78 <LCD_VidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	6a a9       	ldd	r22, Y+50	; 0x32
    1c28:	7b a9       	ldd	r23, Y+51	; 0x33
    1c2a:	8c a9       	ldd	r24, Y+52	; 0x34
    1c2c:	9d a9       	ldd	r25, Y+53	; 0x35
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9d a7       	std	Y+45, r25	; 0x2d
    1c4c:	8c a7       	std	Y+44, r24	; 0x2c
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <LCD_VidInit+0x2d0>
    1c50:	80 e9       	ldi	r24, 0x90	; 144
    1c52:	91 e0       	ldi	r25, 0x01	; 1
    1c54:	9b a7       	std	Y+43, r25	; 0x2b
    1c56:	8a a7       	std	Y+42, r24	; 0x2a
    1c58:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c5a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LCD_VidInit+0x2be>
    1c60:	9b a7       	std	Y+43, r25	; 0x2b
    1c62:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c66:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	9d a7       	std	Y+45, r25	; 0x2d
    1c6c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c70:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	69 f7       	brne	.-38     	; 0x1c50 <LCD_VidInit+0x2b2>
    1c76:	24 c0       	rjmp	.+72     	; 0x1cc0 <LCD_VidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c78:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c7a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c7c:	88 a9       	ldd	r24, Y+48	; 0x30
    1c7e:	99 a9       	ldd	r25, Y+49	; 0x31
    1c80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9d a7       	std	Y+45, r25	; 0x2d
    1c8a:	8c a7       	std	Y+44, r24	; 0x2c
    1c8c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c8e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c90:	99 a7       	std	Y+41, r25	; 0x29
    1c92:	88 a7       	std	Y+40, r24	; 0x28
    1c94:	88 a5       	ldd	r24, Y+40	; 0x28
    1c96:	99 a5       	ldd	r25, Y+41	; 0x29
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <LCD_VidInit+0x2fa>
    1c9c:	99 a7       	std	Y+41, r25	; 0x29
    1c9e:	88 a7       	std	Y+40, r24	; 0x28
    1ca0:	0f c0       	rjmp	.+30     	; 0x1cc0 <LCD_VidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ca2:	6f a9       	ldd	r22, Y+55	; 0x37
    1ca4:	78 ad       	ldd	r23, Y+56	; 0x38
    1ca6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ca8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1caa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	8e ab       	std	Y+54, r24	; 0x36
    1cb4:	8e a9       	ldd	r24, Y+54	; 0x36
    1cb6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cb8:	8f a1       	ldd	r24, Y+39	; 0x27
    1cba:	8a 95       	dec	r24
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <LCD_VidInit+0x31c>
    1cbe:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50); // DELAY MORE THAN 39 MICRO SEC
	LCD_SEND_COMMAND(0b00001100);  //00001DCB , C = LIKE FLAF WHEN TO STOP(OFF) , B= BLANKING , D= DISPLAY
    1cc0:	8c e0       	ldi	r24, 0x0C	; 12
    1cc2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a8 e4       	ldi	r26, 0x48	; 72
    1ccc:	b2 e4       	ldi	r27, 0x42	; 66
    1cce:	8b a3       	std	Y+35, r24	; 0x23
    1cd0:	9c a3       	std	Y+36, r25	; 0x24
    1cd2:	ad a3       	std	Y+37, r26	; 0x25
    1cd4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cda:	8d a1       	ldd	r24, Y+37	; 0x25
    1cdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cde:	2b ea       	ldi	r18, 0xAB	; 171
    1ce0:	3a ea       	ldi	r19, 0xAA	; 170
    1ce2:	4a ea       	ldi	r20, 0xAA	; 170
    1ce4:	50 e4       	ldi	r21, 0x40	; 64
    1ce6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8f 8f       	std	Y+31, r24	; 0x1f
    1cf0:	98 a3       	std	Y+32, r25	; 0x20
    1cf2:	a9 a3       	std	Y+33, r26	; 0x21
    1cf4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1cf6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cf8:	78 a1       	ldd	r23, Y+32	; 0x20
    1cfa:	89 a1       	ldd	r24, Y+33	; 0x21
    1cfc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	1c f4       	brge	.+6      	; 0x1d14 <LCD_VidInit+0x376>
		__ticks = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	8e 8f       	std	Y+30, r24	; 0x1e
    1d12:	91 c0       	rjmp	.+290    	; 0x1e36 <LCD_VidInit+0x498>
	else if (__tmp > 255)
    1d14:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d16:	78 a1       	ldd	r23, Y+32	; 0x20
    1d18:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	53 e4       	ldi	r21, 0x43	; 67
    1d24:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	0c f0       	brlt	.+2      	; 0x1d2e <LCD_VidInit+0x390>
    1d2c:	7b c0       	rjmp	.+246    	; 0x1e24 <LCD_VidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    1d2e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d30:	7c a1       	ldd	r23, Y+36	; 0x24
    1d32:	8d a1       	ldd	r24, Y+37	; 0x25
    1d34:	9e a1       	ldd	r25, Y+38	; 0x26
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	4a e7       	ldi	r20, 0x7A	; 122
    1d3c:	54 e4       	ldi	r21, 0x44	; 68
    1d3e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	8a 8f       	std	Y+26, r24	; 0x1a
    1d48:	9b 8f       	std	Y+27, r25	; 0x1b
    1d4a:	ac 8f       	std	Y+28, r26	; 0x1c
    1d4c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d50:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d52:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d54:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a e7       	ldi	r20, 0x7A	; 122
    1d5c:	55 e4       	ldi	r21, 0x45	; 69
    1d5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	8e 8b       	std	Y+22, r24	; 0x16
    1d68:	9f 8b       	std	Y+23, r25	; 0x17
    1d6a:	a8 8f       	std	Y+24, r26	; 0x18
    1d6c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1d6e:	6e 89       	ldd	r22, Y+22	; 0x16
    1d70:	7f 89       	ldd	r23, Y+23	; 0x17
    1d72:	88 8d       	ldd	r24, Y+24	; 0x18
    1d74:	99 8d       	ldd	r25, Y+25	; 0x19
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e8       	ldi	r20, 0x80	; 128
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	2c f4       	brge	.+10     	; 0x1d90 <LCD_VidInit+0x3f2>
		__ticks = 1;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9d 8b       	std	Y+21, r25	; 0x15
    1d8c:	8c 8b       	std	Y+20, r24	; 0x14
    1d8e:	3f c0       	rjmp	.+126    	; 0x1e0e <LCD_VidInit+0x470>
	else if (__tmp > 65535)
    1d90:	6e 89       	ldd	r22, Y+22	; 0x16
    1d92:	7f 89       	ldd	r23, Y+23	; 0x17
    1d94:	88 8d       	ldd	r24, Y+24	; 0x18
    1d96:	99 8d       	ldd	r25, Y+25	; 0x19
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	4f e7       	ldi	r20, 0x7F	; 127
    1d9e:	57 e4       	ldi	r21, 0x47	; 71
    1da0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1da4:	18 16       	cp	r1, r24
    1da6:	4c f5       	brge	.+82     	; 0x1dfa <LCD_VidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1daa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1dac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e2       	ldi	r20, 0x20	; 32
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	9d 8b       	std	Y+21, r25	; 0x15
    1dce:	8c 8b       	std	Y+20, r24	; 0x14
    1dd0:	0f c0       	rjmp	.+30     	; 0x1df0 <LCD_VidInit+0x452>
    1dd2:	80 e9       	ldi	r24, 0x90	; 144
    1dd4:	91 e0       	ldi	r25, 0x01	; 1
    1dd6:	9b 8b       	std	Y+19, r25	; 0x13
    1dd8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dda:	8a 89       	ldd	r24, Y+18	; 0x12
    1ddc:	9b 89       	ldd	r25, Y+19	; 0x13
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <LCD_VidInit+0x440>
    1de2:	9b 8b       	std	Y+19, r25	; 0x13
    1de4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de6:	8c 89       	ldd	r24, Y+20	; 0x14
    1de8:	9d 89       	ldd	r25, Y+21	; 0x15
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	9d 8b       	std	Y+21, r25	; 0x15
    1dee:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df0:	8c 89       	ldd	r24, Y+20	; 0x14
    1df2:	9d 89       	ldd	r25, Y+21	; 0x15
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	69 f7       	brne	.-38     	; 0x1dd2 <LCD_VidInit+0x434>
    1df8:	24 c0       	rjmp	.+72     	; 0x1e42 <LCD_VidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfa:	6e 89       	ldd	r22, Y+22	; 0x16
    1dfc:	7f 89       	ldd	r23, Y+23	; 0x17
    1dfe:	88 8d       	ldd	r24, Y+24	; 0x18
    1e00:	99 8d       	ldd	r25, Y+25	; 0x19
    1e02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9d 8b       	std	Y+21, r25	; 0x15
    1e0c:	8c 8b       	std	Y+20, r24	; 0x14
    1e0e:	8c 89       	ldd	r24, Y+20	; 0x14
    1e10:	9d 89       	ldd	r25, Y+21	; 0x15
    1e12:	99 8b       	std	Y+17, r25	; 0x11
    1e14:	88 8b       	std	Y+16, r24	; 0x10
    1e16:	88 89       	ldd	r24, Y+16	; 0x10
    1e18:	99 89       	ldd	r25, Y+17	; 0x11
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_VidInit+0x47c>
    1e1e:	99 8b       	std	Y+17, r25	; 0x11
    1e20:	88 8b       	std	Y+16, r24	; 0x10
    1e22:	0f c0       	rjmp	.+30     	; 0x1e42 <LCD_VidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e24:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e26:	78 a1       	ldd	r23, Y+32	; 0x20
    1e28:	89 a1       	ldd	r24, Y+33	; 0x21
    1e2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	8e 8f       	std	Y+30, r24	; 0x1e
    1e36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e38:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e3c:	8a 95       	dec	r24
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <LCD_VidInit+0x49e>
    1e40:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_SEND_COMMAND(0b00000001);
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	a0 e0       	ldi	r26, 0x00	; 0
    1e4e:	b0 e4       	ldi	r27, 0x40	; 64
    1e50:	8b 87       	std	Y+11, r24	; 0x0b
    1e52:	9c 87       	std	Y+12, r25	; 0x0c
    1e54:	ad 87       	std	Y+13, r26	; 0x0d
    1e56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	4a e7       	ldi	r20, 0x7A	; 122
    1e66:	55 e4       	ldi	r21, 0x45	; 69
    1e68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	8f 83       	std	Y+7, r24	; 0x07
    1e72:	98 87       	std	Y+8, r25	; 0x08
    1e74:	a9 87       	std	Y+9, r26	; 0x09
    1e76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e78:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7a:	78 85       	ldd	r23, Y+8	; 0x08
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e8       	ldi	r20, 0x80	; 128
    1e86:	5f e3       	ldi	r21, 0x3F	; 63
    1e88:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e8c:	88 23       	and	r24, r24
    1e8e:	2c f4       	brge	.+10     	; 0x1e9a <LCD_VidInit+0x4fc>
		__ticks = 1;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	8d 83       	std	Y+5, r24	; 0x05
    1e98:	3f c0       	rjmp	.+126    	; 0x1f18 <LCD_VidInit+0x57a>
	else if (__tmp > 65535)
    1e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9c:	78 85       	ldd	r23, Y+8	; 0x08
    1e9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	3f ef       	ldi	r19, 0xFF	; 255
    1ea6:	4f e7       	ldi	r20, 0x7F	; 127
    1ea8:	57 e4       	ldi	r21, 0x47	; 71
    1eaa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1eae:	18 16       	cp	r1, r24
    1eb0:	4c f5       	brge	.+82     	; 0x1f04 <LCD_VidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e2       	ldi	r20, 0x20	; 32
    1ec0:	51 e4       	ldi	r21, 0x41	; 65
    1ec2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	9e 83       	std	Y+6, r25	; 0x06
    1ed8:	8d 83       	std	Y+5, r24	; 0x05
    1eda:	0f c0       	rjmp	.+30     	; 0x1efa <LCD_VidInit+0x55c>
    1edc:	80 e9       	ldi	r24, 0x90	; 144
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <LCD_VidInit+0x54a>
    1eec:	9c 83       	std	Y+4, r25	; 0x04
    1eee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efa:	8d 81       	ldd	r24, Y+5	; 0x05
    1efc:	9e 81       	ldd	r25, Y+6	; 0x06
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	69 f7       	brne	.-38     	; 0x1edc <LCD_VidInit+0x53e>
    1f02:	14 c0       	rjmp	.+40     	; 0x1f2c <LCD_VidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f04:	6f 81       	ldd	r22, Y+7	; 0x07
    1f06:	78 85       	ldd	r23, Y+8	; 0x08
    1f08:	89 85       	ldd	r24, Y+9	; 0x09
    1f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	9e 83       	std	Y+6, r25	; 0x06
    1f16:	8d 83       	std	Y+5, r24	; 0x05
    1f18:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <LCD_VidInit+0x586>
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // delay more than 1.5 ms
	LCD_SEND_COMMAND(0b00000110); //write from left to right
    1f2c:	86 e0       	ldi	r24, 0x06	; 6
    1f2e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>

}
    1f32:	c4 5b       	subi	r28, 0xB4	; 180
    1f34:	df 4f       	sbci	r29, 0xFF	; 255
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	de bf       	out	0x3e, r29	; 62
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	cd bf       	out	0x3d, r28	; 61
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	08 95       	ret

00001f4a <LCD_VidSendStrig>:

void LCD_VidSendStrig(u8 * Copy_Pu8String)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <LCD_VidSendStrig+0x6>
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	9a 83       	std	Y+2, r25	; 0x02
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	0a c0       	rjmp	.+20     	; 0x1f6e <LCD_VidSendStrig+0x24>

	while(*Copy_Pu8String != '\0' ) // \0 is the last element in the arrray
	{
		LCD_SEND_Char(*Copy_Pu8String);
    1f5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5e:	80 81       	ld	r24, Z
    1f60:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_SEND_Char>
		Copy_Pu8String++;
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	01 96       	adiw	r24, 0x01	; 1
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_VidSendStrig(u8 * Copy_Pu8String)
{

	while(*Copy_Pu8String != '\0' ) // \0 is the last element in the arrray
    1f6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f70:	fa 81       	ldd	r31, Y+2	; 0x02
    1f72:	80 81       	ld	r24, Z
    1f74:	88 23       	and	r24, r24
    1f76:	89 f7       	brne	.-30     	; 0x1f5a <LCD_VidSendStrig+0x10>
	{
		LCD_SEND_Char(*Copy_Pu8String);
		Copy_Pu8String++;

	}
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <LCD_VidGoTOLocation>:

void LCD_VidGoTOLocation(u8 Copy_U8RowNumber  , u8 Copy_U8ColNumber)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	62 97       	sbiw	r28, 0x12	; 18
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	8f 87       	std	Y+15, r24	; 0x0f
    1f98:	68 8b       	std	Y+16, r22	; 0x10
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	a0 e0       	ldi	r26, 0x00	; 0
    1fa0:	b0 e4       	ldi	r27, 0x40	; 64
    1fa2:	8b 87       	std	Y+11, r24	; 0x0b
    1fa4:	9c 87       	std	Y+12, r25	; 0x0c
    1fa6:	ad 87       	std	Y+13, r26	; 0x0d
    1fa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1faa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	4a e7       	ldi	r20, 0x7A	; 122
    1fb8:	55 e4       	ldi	r21, 0x45	; 69
    1fba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	8f 83       	std	Y+7, r24	; 0x07
    1fc4:	98 87       	std	Y+8, r25	; 0x08
    1fc6:	a9 87       	std	Y+9, r26	; 0x09
    1fc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e8       	ldi	r20, 0x80	; 128
    1fd8:	5f e3       	ldi	r21, 0x3F	; 63
    1fda:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fde:	88 23       	and	r24, r24
    1fe0:	2c f4       	brge	.+10     	; 0x1fec <LCD_VidGoTOLocation+0x6a>
		__ticks = 1;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
    1fea:	3f c0       	rjmp	.+126    	; 0x206a <LCD_VidGoTOLocation+0xe8>
	else if (__tmp > 65535)
    1fec:	6f 81       	ldd	r22, Y+7	; 0x07
    1fee:	78 85       	ldd	r23, Y+8	; 0x08
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	3f ef       	ldi	r19, 0xFF	; 255
    1ff8:	4f e7       	ldi	r20, 0x7F	; 127
    1ffa:	57 e4       	ldi	r21, 0x47	; 71
    1ffc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2000:	18 16       	cp	r1, r24
    2002:	4c f5       	brge	.+82     	; 0x2056 <LCD_VidGoTOLocation+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2004:	6b 85       	ldd	r22, Y+11	; 0x0b
    2006:	7c 85       	ldd	r23, Y+12	; 0x0c
    2008:	8d 85       	ldd	r24, Y+13	; 0x0d
    200a:	9e 85       	ldd	r25, Y+14	; 0x0e
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e2       	ldi	r20, 0x20	; 32
    2012:	51 e4       	ldi	r21, 0x41	; 65
    2014:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	bc 01       	movw	r22, r24
    201e:	cd 01       	movw	r24, r26
    2020:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	9e 83       	std	Y+6, r25	; 0x06
    202a:	8d 83       	std	Y+5, r24	; 0x05
    202c:	0f c0       	rjmp	.+30     	; 0x204c <LCD_VidGoTOLocation+0xca>
    202e:	80 e9       	ldi	r24, 0x90	; 144
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	9c 83       	std	Y+4, r25	; 0x04
    2034:	8b 83       	std	Y+3, r24	; 0x03
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <LCD_VidGoTOLocation+0xb8>
    203e:	9c 83       	std	Y+4, r25	; 0x04
    2040:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2042:	8d 81       	ldd	r24, Y+5	; 0x05
    2044:	9e 81       	ldd	r25, Y+6	; 0x06
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	9e 81       	ldd	r25, Y+6	; 0x06
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	69 f7       	brne	.-38     	; 0x202e <LCD_VidGoTOLocation+0xac>
    2054:	14 c0       	rjmp	.+40     	; 0x207e <LCD_VidGoTOLocation+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2056:	6f 81       	ldd	r22, Y+7	; 0x07
    2058:	78 85       	ldd	r23, Y+8	; 0x08
    205a:	89 85       	ldd	r24, Y+9	; 0x09
    205c:	9a 85       	ldd	r25, Y+10	; 0x0a
    205e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	9e 83       	std	Y+6, r25	; 0x06
    2068:	8d 83       	std	Y+5, r24	; 0x05
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	9a 83       	std	Y+2, r25	; 0x02
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	9a 81       	ldd	r25, Y+2	; 0x02
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <LCD_VidGoTOLocation+0xf4>
    207a:	9a 83       	std	Y+2, r25	; 0x02
    207c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	switch(Copy_U8RowNumber)
    207e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	3a 8b       	std	Y+18, r19	; 0x12
    2086:	29 8b       	std	Y+17, r18	; 0x11
    2088:	89 89       	ldd	r24, Y+17	; 0x11
    208a:	9a 89       	ldd	r25, Y+18	; 0x12
    208c:	81 30       	cpi	r24, 0x01	; 1
    208e:	91 05       	cpc	r25, r1
    2090:	31 f0       	breq	.+12     	; 0x209e <LCD_VidGoTOLocation+0x11c>
    2092:	29 89       	ldd	r18, Y+17	; 0x11
    2094:	3a 89       	ldd	r19, Y+18	; 0x12
    2096:	22 30       	cpi	r18, 0x02	; 2
    2098:	31 05       	cpc	r19, r1
    209a:	31 f0       	breq	.+12     	; 0x20a8 <LCD_VidGoTOLocation+0x126>
    209c:	09 c0       	rjmp	.+18     	; 0x20b0 <LCD_VidGoTOLocation+0x12e>
		{

		    case LCD_RowOne: LCD_SEND_COMMAND(LCD_RowOneStart+ Copy_U8ColNumber);
    209e:	88 89       	ldd	r24, Y+16	; 0x10
    20a0:	80 58       	subi	r24, 0x80	; 128
    20a2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
    20a6:	04 c0       	rjmp	.+8      	; 0x20b0 <LCD_VidGoTOLocation+0x12e>
		                     break;
		    case LCD_RowTwo: LCD_SEND_COMMAND(LCD_RowTwoStart + Copy_U8ColNumber);
    20a8:	88 89       	ldd	r24, Y+16	; 0x10
    20aa:	80 54       	subi	r24, 0x40	; 64
    20ac:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
		                     break;
		}

}
    20b0:	62 96       	adiw	r28, 0x12	; 18
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <LCD_VidSendNumber>:

void LCD_VidSendNumber(u32 Copy_U32Number)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	a4 97       	sbiw	r28, 0x24	; 36
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	69 a3       	std	Y+33, r22	; 0x21
    20d8:	7a a3       	std	Y+34, r23	; 0x22
    20da:	8b a3       	std	Y+35, r24	; 0x23
    20dc:	9c a3       	std	Y+36, r25	; 0x24
	u8 nums[32];
	itoa(Copy_U32Number, nums , 10);  //convert integer data type to string datatype ,10 (base-DEC)
    20de:	89 a1       	ldd	r24, Y+33	; 0x21
    20e0:	9a a1       	ldd	r25, Y+34	; 0x22
    20e2:	9e 01       	movw	r18, r28
    20e4:	2f 5f       	subi	r18, 0xFF	; 255
    20e6:	3f 4f       	sbci	r19, 0xFF	; 255
    20e8:	b9 01       	movw	r22, r18
    20ea:	4a e0       	ldi	r20, 0x0A	; 10
    20ec:	50 e0       	ldi	r21, 0x00	; 0
    20ee:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <itoa>
	LCD_VidSendStrig(nums);
    20f2:	ce 01       	movw	r24, r28
    20f4:	01 96       	adiw	r24, 0x01	; 1
    20f6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>

}
    20fa:	a4 96       	adiw	r28, 0x24	; 36
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <Timers_VidTimer1Init>:
#include "avr/io.h"
#include "avr/interrupt.h"


void Timers_VidTimer1Init()
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62

#elif Timer1_Mode_Select == Timer1_RESERVED13

#elif Timer1_Mode_Select == Timer1_FastPWM1_MODE14

	CLR_BIT(TCCR1A,WGM10);
    2114:	af e4       	ldi	r26, 0x4F	; 79
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	ef e4       	ldi	r30, 0x4F	; 79
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	8e 7f       	andi	r24, 0xFE	; 254
    2120:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    2122:	af e4       	ldi	r26, 0x4F	; 79
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	ef e4       	ldi	r30, 0x4F	; 79
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	82 60       	ori	r24, 0x02	; 2
    212e:	8c 93       	st	X, r24

	SET_BIT(TCCR1B,WGM12);
    2130:	ae e4       	ldi	r26, 0x4E	; 78
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	ee e4       	ldi	r30, 0x4E	; 78
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	88 60       	ori	r24, 0x08	; 8
    213c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    213e:	ae e4       	ldi	r26, 0x4E	; 78
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	ee e4       	ldi	r30, 0x4E	; 78
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	80 61       	ori	r24, 0x10	; 16
    214a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
#endif

	//2-SETUP  HARDWARE PIN

	CLR_BIT(TCCR1A,COM1A0);
    214c:	af e4       	ldi	r26, 0x4F	; 79
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	ef e4       	ldi	r30, 0x4F	; 79
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	8f 7b       	andi	r24, 0xBF	; 191
    2158:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    215a:	af e4       	ldi	r26, 0x4F	; 79
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	ef e4       	ldi	r30, 0x4F	; 79
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	80 68       	ori	r24, 0x80	; 128
    2166:	8c 93       	st	X, r24

	CLR_BIT(TCCR1A,COM1B0);
    2168:	af e4       	ldi	r26, 0x4F	; 79
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	ef e4       	ldi	r30, 0x4F	; 79
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	8f 7e       	andi	r24, 0xEF	; 239
    2174:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
    2176:	af e4       	ldi	r26, 0x4F	; 79
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	ef e4       	ldi	r30, 0x4F	; 79
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	80 62       	ori	r24, 0x20	; 32
    2182:	8c 93       	st	X, r24

	//3-SET UP  ICR1

	//ICR1=19999; (IN 8 MHZ)
	  ICR1=39999;  //(IN 16MHZ)
    2184:	e6 e4       	ldi	r30, 0x46	; 70
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	8f e3       	ldi	r24, 0x3F	; 63
    218a:	9c e9       	ldi	r25, 0x9C	; 156
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	80 83       	st	Z, r24
	//4-SET UP COMPARE MATCH VALUE

	OCR1A=3000;  //90 DEGREE ANGLE WE WILL CHANGE HERE (IN 16MHZ IT IS FROM 1999:3999)
    2190:	ea e4       	ldi	r30, 0x4A	; 74
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	88 eb       	ldi	r24, 0xB8	; 184
    2196:	9b e0       	ldi	r25, 0x0B	; 11
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
	OCR1B=3000;
    219c:	e8 e4       	ldi	r30, 0x48	; 72
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	88 eb       	ldi	r24, 0xB8	; 184
    21a2:	9b e0       	ldi	r25, 0x0B	; 11
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
#elif TIMER1_PRESCALE_Select == TIMER1_NO_PRESCALE


#elif TIMER1_PRESCALE_Select == TIMER1_PRESCALE_8

	CLR_BIT(TCCR1B, CS10);
    21a8:	ae e4       	ldi	r26, 0x4E	; 78
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	ee e4       	ldi	r30, 0x4E	; 78
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	8e 7f       	andi	r24, 0xFE	; 254
    21b4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    21b6:	ae e4       	ldi	r26, 0x4E	; 78
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	ee e4       	ldi	r30, 0x4E	; 78
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	82 60       	ori	r24, 0x02	; 2
    21c2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    21c4:	ae e4       	ldi	r26, 0x4E	; 78
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	ee e4       	ldi	r30, 0x4E	; 78
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	8b 7f       	andi	r24, 0xFB	; 251
    21d0:	8c 93       	st	X, r24
#elif TIMER0_PRESCALE_Select == TIMER1_PRESCALE_256

#elif TIMER0_PRESCALE_Select == TIMER1_PRESCALE_1024

#endif
}
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <Timer1_VidTimer1SetOCR1>:


void Timer1_VidTimer1SetOCR1(u16 Copy_u16Ocr1Value)
{
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	00 d0       	rcall	.+0      	; 0x21de <Timer1_VidTimer1SetOCR1+0x6>
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	9a 83       	std	Y+2, r25	; 0x02
    21e4:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16Ocr1Value;
    21e6:	ea e4       	ldi	r30, 0x4A	; 74
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	9a 81       	ldd	r25, Y+2	; 0x02
    21ee:	91 83       	std	Z+1, r25	; 0x01
    21f0:	80 83       	st	Z, r24
}
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <Timer1_VidTimer1SetOCR1B>:


void Timer1_VidTimer1SetOCR1B(u16 Copy_u16Ocr1Value)
{
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	00 d0       	rcall	.+0      	; 0x2202 <Timer1_VidTimer1SetOCR1B+0x6>
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	9a 83       	std	Y+2, r25	; 0x02
    2208:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=Copy_u16Ocr1Value;
    220a:	e8 e4       	ldi	r30, 0x48	; 72
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	9a 81       	ldd	r25, Y+2	; 0x02
    2212:	91 83       	std	Z+1, r25	; 0x01
    2214:	80 83       	st	Z, r24
}
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <USART_VIDInit>:

#include"UART.h"


void USART_VIDInit()
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	00 d0       	rcall	.+0      	; 0x2226 <USART_VIDInit+0x6>
    2226:	0f 92       	push	r0
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_U8UCSRC_VALUE=0b10000000;
    222c:	80 e8       	ldi	r24, 0x80	; 128
    222e:	8b 83       	std	Y+3, r24	; 0x03

	u16 Loc_U16BaudRate=BAUD_RATE;
    2230:	87 e6       	ldi	r24, 0x67	; 103
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9a 83       	std	Y+2, r25	; 0x02
    2236:	89 83       	std	Y+1, r24	; 0x01
	//TO SET UP THE BAUD RATE TO 9600 at frequency 16MHz
	UBRRL=(u8)Loc_U16BaudRate;
    2238:	e9 e2       	ldi	r30, 0x29	; 41
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	80 83       	st	Z, r24
	UBRRH=(u8)(Loc_U16BaudRate>>8);
    2240:	e0 e4       	ldi	r30, 0x40	; 64
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	89 2f       	mov	r24, r25
    224a:	99 27       	eor	r25, r25
    224c:	80 83       	st	Z, r24

	//1-UCSRA REGISTER
	//normal speed NOT DOUBLE
	CLR_BIT(UCSRA,U2X);
    224e:	ab e2       	ldi	r26, 0x2B	; 43
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	eb e2       	ldi	r30, 0x2B	; 43
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	8d 7f       	andi	r24, 0xFD	; 253
    225a:	8c 93       	st	X, r24
	//DISABLE MULTI PROCESSOR MODE
	CLR_BIT(UCSRA,MPCM);
    225c:	ab e2       	ldi	r26, 0x2B	; 43
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	eb e2       	ldi	r30, 0x2B	; 43
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8e 7f       	andi	r24, 0xFE	; 254
    2268:	8c 93       	st	X, r24
	                    //----------------------------
	//2-UCSRB  register
	//WE USE POLLING SYSTEM NOT INTERRUT (IN case of useage interrupt we need to use the GIA)
	//Rx and TX ENABLE
	SET_BIT(UCSRB,RXEN);
    226a:	aa e2       	ldi	r26, 0x2A	; 42
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	ea e2       	ldi	r30, 0x2A	; 42
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	80 61       	ori	r24, 0x10	; 16
    2276:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    2278:	aa e2       	ldi	r26, 0x2A	; 42
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	ea e2       	ldi	r30, 0x2A	; 42
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	88 60       	ori	r24, 0x08	; 8
    2284:	8c 93       	st	X, r24

	//TO SELECT CHAR SIZE (8 BIT)
	CLR_BIT(UCSRB,UCSZ2);
    2286:	aa e2       	ldi	r26, 0x2A	; 42
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	ea e2       	ldi	r30, 0x2A	; 42
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	8b 7f       	andi	r24, 0xFB	; 251
    2292:	8c 93       	st	X, r24
	SET_BIT(Loc_U8UCSRC_VALUE,UCSZ0);
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	82 60       	ori	r24, 0x02	; 2
    2298:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Loc_U8UCSRC_VALUE,UCSZ1);
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	84 60       	ori	r24, 0x04	; 4
    229e:	8b 83       	std	Y+3, r24	; 0x03
	           //------------------------------
	//3-UCSAC REGISTER VALUE
	//SELECT ASYNCH
	CLR_BIT(Loc_U8UCSRC_VALUE,UMSEL);
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	8f 7b       	andi	r24, 0xBF	; 191
    22a4:	8b 83       	std	Y+3, r24	; 0x03
	//DISABLE PARITY
	CLR_BIT(Loc_U8UCSRC_VALUE,UPM0);
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	8f 7e       	andi	r24, 0xEF	; 239
    22aa:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Loc_U8UCSRC_VALUE,UPM1);
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	8f 7d       	andi	r24, 0xDF	; 223
    22b0:	8b 83       	std	Y+3, r24	; 0x03
	//TWO STOP BITS
	SET_BIT(Loc_U8UCSRC_VALUE,USBS);
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	88 60       	ori	r24, 0x08	; 8
    22b6:	8b 83       	std	Y+3, r24	; 0x03

	//UPDATE UCSRC REGISTER
	UCSRC=Loc_U8UCSRC_VALUE;
    22b8:	e0 e4       	ldi	r30, 0x40	; 64
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	80 83       	st	Z, r24

}
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <USART_VIDSendChar>:

void USART_VIDSendChar(u8 copy_u8char)
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	0f 92       	push	r0
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	89 83       	std	Y+1, r24	; 0x01
	//check if the UDR register is ready to send
	while(GET_BIT(UCSRA,UDRE)==0);  //POLLINR waiting for the flag the register is ready
    22d8:	eb e2       	ldi	r30, 0x2B	; 43
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	82 95       	swap	r24
    22e0:	86 95       	lsr	r24
    22e2:	87 70       	andi	r24, 0x07	; 7
    22e4:	88 2f       	mov	r24, r24
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	81 70       	andi	r24, 0x01	; 1
    22ea:	90 70       	andi	r25, 0x00	; 0
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	a1 f3       	breq	.-24     	; 0x22d8 <USART_VIDSendChar+0xc>
	UDR=copy_u8char; //PUT THE 8BITS in the UDR register
    22f0:	ec e2       	ldi	r30, 0x2C	; 44
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	80 83       	st	Z, r24

}
    22f8:	0f 90       	pop	r0
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <USART_U8RECIEVEChar>:

u8 USART_U8RECIEVEChar()
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	0f 92       	push	r0
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_U8character;
	//check if the receive operation is complete (once the end bit reaches )
	while(GET_BIT(UCSRA,RXC)==0);  //POLLINR waiting for tHE receive OPERATION IS COMPLETE
    230a:	eb e2       	ldi	r30, 0x2B	; 43
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	88 23       	and	r24, r24
    2312:	dc f7       	brge	.-10     	; 0x230a <USART_U8RECIEVEChar+0xa>
	Loc_U8character=UDR;
    2314:	ec e2       	ldi	r30, 0x2C	; 44
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	89 83       	std	Y+1, r24	; 0x01
	return Loc_U8character;
    231c:	89 81       	ldd	r24, Y+1	; 0x01

}
    231e:	0f 90       	pop	r0
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <main>:
#include"BIT_MATH.h"
#include"UART.h"
#include"Smart_Home_Config.h"

void main(void)
{
    2326:	0f 93       	push	r16
    2328:	1f 93       	push	r17
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	ce 52       	subi	r28, 0x2E	; 46
    2334:	d1 40       	sbci	r29, 0x01	; 1
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
	u16 pass=0;
    2340:	fe 01       	movw	r30, r28
    2342:	e3 5d       	subi	r30, 0xD3	; 211
    2344:	fe 4f       	sbci	r31, 0xFE	; 254
    2346:	11 82       	std	Z+1, r1	; 0x01
    2348:	10 82       	st	Z, r1
	u8 read=0xFF , Try , counter=0 , flag=1 ,flag2=1, Temp;
    234a:	fe 01       	movw	r30, r28
    234c:	e4 5d       	subi	r30, 0xD4	; 212
    234e:	fe 4f       	sbci	r31, 0xFE	; 254
    2350:	8f ef       	ldi	r24, 0xFF	; 255
    2352:	80 83       	st	Z, r24
    2354:	fe 01       	movw	r30, r28
    2356:	e6 5d       	subi	r30, 0xD6	; 214
    2358:	fe 4f       	sbci	r31, 0xFE	; 254
    235a:	10 82       	st	Z, r1
    235c:	fe 01       	movw	r30, r28
    235e:	e7 5d       	subi	r30, 0xD7	; 215
    2360:	fe 4f       	sbci	r31, 0xFE	; 254
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	80 83       	st	Z, r24
    2366:	fe 01       	movw	r30, r28
    2368:	e8 5d       	subi	r30, 0xD8	; 216
    236a:	fe 4f       	sbci	r31, 0xFE	; 254
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	80 83       	st	Z, r24
	KPD_Init();
    2370:	0e 94 cf 09 	call	0x139e	; 0x139e <KPD_Init>
	LCD_VidInit();
    2374:	0e 94 cf 0c 	call	0x199e	; 0x199e <LCD_VidInit>
	Timers_VidTimer1Init();
    2378:	0e 94 86 10 	call	0x210c	; 0x210c <Timers_VidTimer1Init>
	USART_VIDInit();
    237c:	0e 94 10 11 	call	0x2220	; 0x2220 <USART_VIDInit>
	DIO_VidSetPinDirection(DIO_PORTA,DIO_PIN5 ,DIO_OUTPUT); //block led
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	65 e0       	ldi	r22, 0x05	; 5
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTA,DIO_PIN6 ,DIO_OUTPUT);//Guest led
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	66 e0       	ldi	r22, 0x06	; 6
    238e:	41 e0       	ldi	r20, 0x01	; 1
    2390:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTA,DIO_PIN7 ,DIO_OUTPUT);//admin led
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	67 e0       	ldi	r22, 0x07	; 7
    2398:	41 e0       	ldi	r20, 0x01	; 1
    239a:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_OUTPUT);//door
    239e:	83 e0       	ldi	r24, 0x03	; 3
    23a0:	65 e0       	ldi	r22, 0x05	; 5
    23a2:	41 e0       	ldi	r20, 0x01	; 1
    23a4:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD, DIO_PIN4, DIO_OUTPUT);//GARAG
    23a8:	83 e0       	ldi	r24, 0x03	; 3
    23aa:	64 e0       	ldi	r22, 0x04	; 4
    23ac:	41 e0       	ldi	r20, 0x01	; 1
    23ae:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);//BUZZER
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	64 e0       	ldi	r22, 0x04	; 4
    23b6:	41 e0       	ldi	r20, 0x01	; 1
    23b8:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD, DIO_PIN3, DIO_OUTPUT);//out led1
    23bc:	83 e0       	ldi	r24, 0x03	; 3
    23be:	63 e0       	ldi	r22, 0x03	; 3
    23c0:	41 e0       	ldi	r20, 0x01	; 1
    23c2:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTA, DIO_PIN2, DIO_OUTPUT);//out led2
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	62 e0       	ldi	r22, 0x02	; 2
    23ca:	41 e0       	ldi	r20, 0x01	; 1
    23cc:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_INPUT); //RX
    23d0:	83 e0       	ldi	r24, 0x03	; 3
    23d2:	60 e0       	ldi	r22, 0x00	; 0
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_OUTPUT); //TX
    23da:	83 e0       	ldi	r24, 0x03	; 3
    23dc:	61 e0       	ldi	r22, 0x01	; 1
    23de:	41 e0       	ldi	r20, 0x01	; 1
    23e0:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>

	//configure ADC IN interrupt
	ADCSRA = 0x8F;
    23e4:	e6 e2       	ldi	r30, 0x26	; 38
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	8f e8       	ldi	r24, 0x8F	; 143
    23ea:	80 83       	st	Z, r24
	ADMUX=0x40;
    23ec:	e7 e2       	ldi	r30, 0x27	; 39
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 e4       	ldi	r24, 0x40	; 64
    23f2:	80 83       	st	Z, r24
	SET_BIT(SREG,7);
    23f4:	af e5       	ldi	r26, 0x5F	; 95
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	ef e5       	ldi	r30, 0x5F	; 95
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	80 68       	ori	r24, 0x80	; 128
    2400:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
    2402:	a6 e2       	ldi	r26, 0x26	; 38
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e6 e2       	ldi	r30, 0x26	; 38
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	80 64       	ori	r24, 0x40	; 64
    240e:	8c 93       	st	X, r24

    //start the smart home system
	LCD_VidSendStrig("Welcome To Smart");
    2410:	80 e6       	ldi	r24, 0x60	; 96
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
	LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2418:	82 e0       	ldi	r24, 0x02	; 2
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
	LCD_VidSendStrig("Home System");
    2420:	81 e7       	ldi	r24, 0x71	; 113
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    2428:	fe 01       	movw	r30, r28
    242a:	ed 5d       	subi	r30, 0xDD	; 221
    242c:	fe 4f       	sbci	r31, 0xFE	; 254
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a8 ec       	ldi	r26, 0xC8	; 200
    2434:	b2 e4       	ldi	r27, 0x42	; 66
    2436:	80 83       	st	Z, r24
    2438:	91 83       	std	Z+1, r25	; 0x01
    243a:	a2 83       	std	Z+2, r26	; 0x02
    243c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243e:	8e 01       	movw	r16, r28
    2440:	01 5e       	subi	r16, 0xE1	; 225
    2442:	1e 4f       	sbci	r17, 0xFE	; 254
    2444:	fe 01       	movw	r30, r28
    2446:	ed 5d       	subi	r30, 0xDD	; 221
    2448:	fe 4f       	sbci	r31, 0xFE	; 254
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	4a e7       	ldi	r20, 0x7A	; 122
    2458:	55 e4       	ldi	r21, 0x45	; 69
    245a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	f8 01       	movw	r30, r16
    2464:	80 83       	st	Z, r24
    2466:	91 83       	std	Z+1, r25	; 0x01
    2468:	a2 83       	std	Z+2, r26	; 0x02
    246a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    246c:	fe 01       	movw	r30, r28
    246e:	e1 5e       	subi	r30, 0xE1	; 225
    2470:	fe 4f       	sbci	r31, 0xFE	; 254
    2472:	60 81       	ld	r22, Z
    2474:	71 81       	ldd	r23, Z+1	; 0x01
    2476:	82 81       	ldd	r24, Z+2	; 0x02
    2478:	93 81       	ldd	r25, Z+3	; 0x03
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f e3       	ldi	r21, 0x3F	; 63
    2482:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2486:	88 23       	and	r24, r24
    2488:	44 f4       	brge	.+16     	; 0x249a <main+0x174>
		__ticks = 1;
    248a:	fe 01       	movw	r30, r28
    248c:	e3 5e       	subi	r30, 0xE3	; 227
    248e:	fe 4f       	sbci	r31, 0xFE	; 254
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	80 83       	st	Z, r24
    2498:	64 c0       	rjmp	.+200    	; 0x2562 <main+0x23c>
	else if (__tmp > 65535)
    249a:	fe 01       	movw	r30, r28
    249c:	e1 5e       	subi	r30, 0xE1	; 225
    249e:	fe 4f       	sbci	r31, 0xFE	; 254
    24a0:	60 81       	ld	r22, Z
    24a2:	71 81       	ldd	r23, Z+1	; 0x01
    24a4:	82 81       	ldd	r24, Z+2	; 0x02
    24a6:	93 81       	ldd	r25, Z+3	; 0x03
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	3f ef       	ldi	r19, 0xFF	; 255
    24ac:	4f e7       	ldi	r20, 0x7F	; 127
    24ae:	57 e4       	ldi	r21, 0x47	; 71
    24b0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24b4:	18 16       	cp	r1, r24
    24b6:	0c f0       	brlt	.+2      	; 0x24ba <main+0x194>
    24b8:	43 c0       	rjmp	.+134    	; 0x2540 <main+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ba:	fe 01       	movw	r30, r28
    24bc:	ed 5d       	subi	r30, 0xDD	; 221
    24be:	fe 4f       	sbci	r31, 0xFE	; 254
    24c0:	60 81       	ld	r22, Z
    24c2:	71 81       	ldd	r23, Z+1	; 0x01
    24c4:	82 81       	ldd	r24, Z+2	; 0x02
    24c6:	93 81       	ldd	r25, Z+3	; 0x03
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e2       	ldi	r20, 0x20	; 32
    24ce:	51 e4       	ldi	r21, 0x41	; 65
    24d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	8e 01       	movw	r16, r28
    24da:	03 5e       	subi	r16, 0xE3	; 227
    24dc:	1e 4f       	sbci	r17, 0xFE	; 254
    24de:	bc 01       	movw	r22, r24
    24e0:	cd 01       	movw	r24, r26
    24e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	f8 01       	movw	r30, r16
    24ec:	91 83       	std	Z+1, r25	; 0x01
    24ee:	80 83       	st	Z, r24
    24f0:	1f c0       	rjmp	.+62     	; 0x2530 <main+0x20a>
    24f2:	fe 01       	movw	r30, r28
    24f4:	e5 5e       	subi	r30, 0xE5	; 229
    24f6:	fe 4f       	sbci	r31, 0xFE	; 254
    24f8:	80 e9       	ldi	r24, 0x90	; 144
    24fa:	91 e0       	ldi	r25, 0x01	; 1
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	fe 01       	movw	r30, r28
    2502:	e5 5e       	subi	r30, 0xE5	; 229
    2504:	fe 4f       	sbci	r31, 0xFE	; 254
    2506:	80 81       	ld	r24, Z
    2508:	91 81       	ldd	r25, Z+1	; 0x01
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <main+0x1e4>
    250e:	fe 01       	movw	r30, r28
    2510:	e5 5e       	subi	r30, 0xE5	; 229
    2512:	fe 4f       	sbci	r31, 0xFE	; 254
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2518:	de 01       	movw	r26, r28
    251a:	a3 5e       	subi	r26, 0xE3	; 227
    251c:	be 4f       	sbci	r27, 0xFE	; 254
    251e:	fe 01       	movw	r30, r28
    2520:	e3 5e       	subi	r30, 0xE3	; 227
    2522:	fe 4f       	sbci	r31, 0xFE	; 254
    2524:	80 81       	ld	r24, Z
    2526:	91 81       	ldd	r25, Z+1	; 0x01
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	11 96       	adiw	r26, 0x01	; 1
    252c:	9c 93       	st	X, r25
    252e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2530:	fe 01       	movw	r30, r28
    2532:	e3 5e       	subi	r30, 0xE3	; 227
    2534:	fe 4f       	sbci	r31, 0xFE	; 254
    2536:	80 81       	ld	r24, Z
    2538:	91 81       	ldd	r25, Z+1	; 0x01
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	d1 f6       	brne	.-76     	; 0x24f2 <main+0x1cc>
    253e:	27 c0       	rjmp	.+78     	; 0x258e <main+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2540:	8e 01       	movw	r16, r28
    2542:	03 5e       	subi	r16, 0xE3	; 227
    2544:	1e 4f       	sbci	r17, 0xFE	; 254
    2546:	fe 01       	movw	r30, r28
    2548:	e1 5e       	subi	r30, 0xE1	; 225
    254a:	fe 4f       	sbci	r31, 0xFE	; 254
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	f8 01       	movw	r30, r16
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
    2562:	de 01       	movw	r26, r28
    2564:	a7 5e       	subi	r26, 0xE7	; 231
    2566:	be 4f       	sbci	r27, 0xFE	; 254
    2568:	fe 01       	movw	r30, r28
    256a:	e3 5e       	subi	r30, 0xE3	; 227
    256c:	fe 4f       	sbci	r31, 0xFE	; 254
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	8d 93       	st	X+, r24
    2574:	9c 93       	st	X, r25
    2576:	fe 01       	movw	r30, r28
    2578:	e7 5e       	subi	r30, 0xE7	; 231
    257a:	fe 4f       	sbci	r31, 0xFE	; 254
    257c:	80 81       	ld	r24, Z
    257e:	91 81       	ldd	r25, Z+1	; 0x01
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <main+0x25a>
    2584:	fe 01       	movw	r30, r28
    2586:	e7 5e       	subi	r30, 0xE7	; 231
    2588:	fe 4f       	sbci	r31, 0xFE	; 254
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_SEND_COMMAND(0x01);
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
	//select mode page
	LCD_VidSendStrig(" Select Mode:");
    2594:	8d e7       	ldi	r24, 0x7D	; 125
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
	LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    259c:	82 e0       	ldi	r24, 0x02	; 2
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
	LCD_VidSendStrig("0:Admin 1:Guest");
    25a4:	8b e8       	ldi	r24, 0x8B	; 139
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
	while(1)
	{
		read= KPD_u8GetPressedKey();
    25ac:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    25b0:	fe 01       	movw	r30, r28
    25b2:	e4 5d       	subi	r30, 0xD4	; 212
    25b4:	fe 4f       	sbci	r31, 0xFE	; 254
    25b6:	80 83       	st	Z, r24
		if(read!=0xFF)
    25b8:	fe 01       	movw	r30, r28
    25ba:	e4 5d       	subi	r30, 0xD4	; 212
    25bc:	fe 4f       	sbci	r31, 0xFE	; 254
    25be:	80 81       	ld	r24, Z
    25c0:	8f 3f       	cpi	r24, 0xFF	; 255
    25c2:	a1 f3       	breq	.-24     	; 0x25ac <main+0x286>
		{
			if(read=='0')
    25c4:	fe 01       	movw	r30, r28
    25c6:	e4 5d       	subi	r30, 0xD4	; 212
    25c8:	fe 4f       	sbci	r31, 0xFE	; 254
    25ca:	80 81       	ld	r24, Z
    25cc:	80 33       	cpi	r24, 0x30	; 48
    25ce:	11 f0       	breq	.+4      	; 0x25d4 <main+0x2ae>
    25d0:	0c 94 a8 1f 	jmp	0x3f50	; 0x3f50 <main+0x1c2a>
			{
				//he select admin mode , so he should log in first
				LCD_SEND_COMMAND(0x01);
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
				LCD_VidSendStrig(" Admin Mode:");
    25da:	8b e9       	ldi	r24, 0x9B	; 155
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
			    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    25e2:	82 e0       	ldi	r24, 0x02	; 2
    25e4:	60 e0       	ldi	r22, 0x00	; 0
    25e6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
				LCD_VidSendStrig("Enter Pass:");
    25ea:	88 ea       	ldi	r24, 0xA8	; 168
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
				while(1)
				{

					while(1)
					{
						read= KPD_u8GetPressedKey();
    25f2:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    25f6:	fe 01       	movw	r30, r28
    25f8:	e4 5d       	subi	r30, 0xD4	; 212
    25fa:	fe 4f       	sbci	r31, 0xFE	; 254
    25fc:	80 83       	st	Z, r24
						 if(read!=0xFF)
    25fe:	fe 01       	movw	r30, r28
    2600:	e4 5d       	subi	r30, 0xD4	; 212
    2602:	fe 4f       	sbci	r31, 0xFE	; 254
    2604:	80 81       	ld	r24, Z
    2606:	8f 3f       	cpi	r24, 0xFF	; 255
    2608:	11 f4       	brne	.+4      	; 0x260e <main+0x2e8>
    260a:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <main+0x1bf2>
						 {
							 if(read!='=')
    260e:	fe 01       	movw	r30, r28
    2610:	e4 5d       	subi	r30, 0xD4	; 212
    2612:	fe 4f       	sbci	r31, 0xFE	; 254
    2614:	80 81       	ld	r24, Z
    2616:	8d 33       	cpi	r24, 0x3D	; 61
    2618:	09 f1       	breq	.+66     	; 0x265c <main+0x336>
							 {
								 LCD_SEND_Char('*');
    261a:	8a e2       	ldi	r24, 0x2A	; 42
    261c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_SEND_Char>
								 //he still writing the password
								 pass = (pass * 10) + read;
    2620:	fe 01       	movw	r30, r28
    2622:	e3 5d       	subi	r30, 0xD3	; 211
    2624:	fe 4f       	sbci	r31, 0xFE	; 254
    2626:	80 81       	ld	r24, Z
    2628:	91 81       	ldd	r25, Z+1	; 0x01
    262a:	9c 01       	movw	r18, r24
    262c:	22 0f       	add	r18, r18
    262e:	33 1f       	adc	r19, r19
    2630:	c9 01       	movw	r24, r18
    2632:	88 0f       	add	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	88 0f       	add	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	28 0f       	add	r18, r24
    263c:	39 1f       	adc	r19, r25
    263e:	fe 01       	movw	r30, r28
    2640:	e4 5d       	subi	r30, 0xD4	; 212
    2642:	fe 4f       	sbci	r31, 0xFE	; 254
    2644:	80 81       	ld	r24, Z
    2646:	88 2f       	mov	r24, r24
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	fe 01       	movw	r30, r28
    264c:	e3 5d       	subi	r30, 0xD3	; 211
    264e:	fe 4f       	sbci	r31, 0xFE	; 254
    2650:	82 0f       	add	r24, r18
    2652:	93 1f       	adc	r25, r19
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24
    2658:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <main+0x1c0c>
								 break;
							 }
							 else if(read=='=')
    265c:	fe 01       	movw	r30, r28
    265e:	e4 5d       	subi	r30, 0xD4	; 212
    2660:	fe 4f       	sbci	r31, 0xFE	; 254
    2662:	80 81       	ld	r24, Z
    2664:	8d 33       	cpi	r24, 0x3D	; 61
    2666:	11 f0       	breq	.+4      	; 0x266c <main+0x346>
    2668:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <main+0x1bf2>
							 {
								 //he finishing writing the password
								 if(pass==Yasmeen_Pass)
    266c:	fe 01       	movw	r30, r28
    266e:	e3 5d       	subi	r30, 0xD3	; 211
    2670:	fe 4f       	sbci	r31, 0xFE	; 254
    2672:	80 81       	ld	r24, Z
    2674:	91 81       	ldd	r25, Z+1	; 0x01
    2676:	f6 e1       	ldi	r31, 0x16	; 22
    2678:	88 31       	cpi	r24, 0x18	; 24
    267a:	9f 07       	cpc	r25, r31
    267c:	09 f0       	breq	.+2      	; 0x2680 <main+0x35a>
    267e:	2b c5       	rjmp	.+2646   	; 0x30d6 <main+0xdb0>
								 {
									 DIO_VidSetPinValue(DIO_PORTA,DIO_PIN7,DIO_HIGH);//admin led will on
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	67 e0       	ldi	r22, 0x07	; 7
    2684:	41 e0       	ldi	r20, 0x01	; 1
    2686:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
									 LCD_SEND_COMMAND(0x01);
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									 //admin yasmeen here
									 LCD_VidSendStrig(" Right Password");
    2690:	84 eb       	ldi	r24, 0xB4	; 180
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									 LCD_VidSendStrig("welcome yasmeen");
    26a0:	84 ec       	ldi	r24, 0xC4	; 196
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    26a8:	fe 01       	movw	r30, r28
    26aa:	eb 5e       	subi	r30, 0xEB	; 235
    26ac:	fe 4f       	sbci	r31, 0xFE	; 254
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	a8 ec       	ldi	r26, 0xC8	; 200
    26b4:	b3 e4       	ldi	r27, 0x43	; 67
    26b6:	80 83       	st	Z, r24
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	a2 83       	std	Z+2, r26	; 0x02
    26bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26be:	8e 01       	movw	r16, r28
    26c0:	0f 5e       	subi	r16, 0xEF	; 239
    26c2:	1e 4f       	sbci	r17, 0xFE	; 254
    26c4:	fe 01       	movw	r30, r28
    26c6:	eb 5e       	subi	r30, 0xEB	; 235
    26c8:	fe 4f       	sbci	r31, 0xFE	; 254
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	4a e7       	ldi	r20, 0x7A	; 122
    26d8:	55 e4       	ldi	r21, 0x45	; 69
    26da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	f8 01       	movw	r30, r16
    26e4:	80 83       	st	Z, r24
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	a2 83       	std	Z+2, r26	; 0x02
    26ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ec:	fe 01       	movw	r30, r28
    26ee:	ef 5e       	subi	r30, 0xEF	; 239
    26f0:	fe 4f       	sbci	r31, 0xFE	; 254
    26f2:	60 81       	ld	r22, Z
    26f4:	71 81       	ldd	r23, Z+1	; 0x01
    26f6:	82 81       	ldd	r24, Z+2	; 0x02
    26f8:	93 81       	ldd	r25, Z+3	; 0x03
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e8       	ldi	r20, 0x80	; 128
    2700:	5f e3       	ldi	r21, 0x3F	; 63
    2702:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2706:	88 23       	and	r24, r24
    2708:	44 f4       	brge	.+16     	; 0x271a <main+0x3f4>
		__ticks = 1;
    270a:	fe 01       	movw	r30, r28
    270c:	e1 5f       	subi	r30, 0xF1	; 241
    270e:	fe 4f       	sbci	r31, 0xFE	; 254
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	91 83       	std	Z+1, r25	; 0x01
    2716:	80 83       	st	Z, r24
    2718:	64 c0       	rjmp	.+200    	; 0x27e2 <main+0x4bc>
	else if (__tmp > 65535)
    271a:	fe 01       	movw	r30, r28
    271c:	ef 5e       	subi	r30, 0xEF	; 239
    271e:	fe 4f       	sbci	r31, 0xFE	; 254
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	3f ef       	ldi	r19, 0xFF	; 255
    272c:	4f e7       	ldi	r20, 0x7F	; 127
    272e:	57 e4       	ldi	r21, 0x47	; 71
    2730:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2734:	18 16       	cp	r1, r24
    2736:	0c f0       	brlt	.+2      	; 0x273a <main+0x414>
    2738:	43 c0       	rjmp	.+134    	; 0x27c0 <main+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273a:	fe 01       	movw	r30, r28
    273c:	eb 5e       	subi	r30, 0xEB	; 235
    273e:	fe 4f       	sbci	r31, 0xFE	; 254
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e2       	ldi	r20, 0x20	; 32
    274e:	51 e4       	ldi	r21, 0x41	; 65
    2750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	8e 01       	movw	r16, r28
    275a:	01 5f       	subi	r16, 0xF1	; 241
    275c:	1e 4f       	sbci	r17, 0xFE	; 254
    275e:	bc 01       	movw	r22, r24
    2760:	cd 01       	movw	r24, r26
    2762:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	f8 01       	movw	r30, r16
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	80 83       	st	Z, r24
    2770:	1f c0       	rjmp	.+62     	; 0x27b0 <main+0x48a>
    2772:	fe 01       	movw	r30, r28
    2774:	e3 5f       	subi	r30, 0xF3	; 243
    2776:	fe 4f       	sbci	r31, 0xFE	; 254
    2778:	80 e9       	ldi	r24, 0x90	; 144
    277a:	91 e0       	ldi	r25, 0x01	; 1
    277c:	91 83       	std	Z+1, r25	; 0x01
    277e:	80 83       	st	Z, r24
    2780:	fe 01       	movw	r30, r28
    2782:	e3 5f       	subi	r30, 0xF3	; 243
    2784:	fe 4f       	sbci	r31, 0xFE	; 254
    2786:	80 81       	ld	r24, Z
    2788:	91 81       	ldd	r25, Z+1	; 0x01
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <main+0x464>
    278e:	fe 01       	movw	r30, r28
    2790:	e3 5f       	subi	r30, 0xF3	; 243
    2792:	fe 4f       	sbci	r31, 0xFE	; 254
    2794:	91 83       	std	Z+1, r25	; 0x01
    2796:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2798:	de 01       	movw	r26, r28
    279a:	a1 5f       	subi	r26, 0xF1	; 241
    279c:	be 4f       	sbci	r27, 0xFE	; 254
    279e:	fe 01       	movw	r30, r28
    27a0:	e1 5f       	subi	r30, 0xF1	; 241
    27a2:	fe 4f       	sbci	r31, 0xFE	; 254
    27a4:	80 81       	ld	r24, Z
    27a6:	91 81       	ldd	r25, Z+1	; 0x01
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	11 96       	adiw	r26, 0x01	; 1
    27ac:	9c 93       	st	X, r25
    27ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b0:	fe 01       	movw	r30, r28
    27b2:	e1 5f       	subi	r30, 0xF1	; 241
    27b4:	fe 4f       	sbci	r31, 0xFE	; 254
    27b6:	80 81       	ld	r24, Z
    27b8:	91 81       	ldd	r25, Z+1	; 0x01
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	d1 f6       	brne	.-76     	; 0x2772 <main+0x44c>
    27be:	27 c0       	rjmp	.+78     	; 0x280e <main+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c0:	8e 01       	movw	r16, r28
    27c2:	01 5f       	subi	r16, 0xF1	; 241
    27c4:	1e 4f       	sbci	r17, 0xFE	; 254
    27c6:	fe 01       	movw	r30, r28
    27c8:	ef 5e       	subi	r30, 0xEF	; 239
    27ca:	fe 4f       	sbci	r31, 0xFE	; 254
    27cc:	60 81       	ld	r22, Z
    27ce:	71 81       	ldd	r23, Z+1	; 0x01
    27d0:	82 81       	ldd	r24, Z+2	; 0x02
    27d2:	93 81       	ldd	r25, Z+3	; 0x03
    27d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	f8 01       	movw	r30, r16
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	80 83       	st	Z, r24
    27e2:	de 01       	movw	r26, r28
    27e4:	a5 5f       	subi	r26, 0xF5	; 245
    27e6:	be 4f       	sbci	r27, 0xFE	; 254
    27e8:	fe 01       	movw	r30, r28
    27ea:	e1 5f       	subi	r30, 0xF1	; 241
    27ec:	fe 4f       	sbci	r31, 0xFE	; 254
    27ee:	80 81       	ld	r24, Z
    27f0:	91 81       	ldd	r25, Z+1	; 0x01
    27f2:	8d 93       	st	X+, r24
    27f4:	9c 93       	st	X, r25
    27f6:	fe 01       	movw	r30, r28
    27f8:	e5 5f       	subi	r30, 0xF5	; 245
    27fa:	fe 4f       	sbci	r31, 0xFE	; 254
    27fc:	80 81       	ld	r24, Z
    27fe:	91 81       	ldd	r25, Z+1	; 0x01
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <main+0x4da>
    2804:	fe 01       	movw	r30, r28
    2806:	e5 5f       	subi	r30, 0xF5	; 245
    2808:	fe 4f       	sbci	r31, 0xFE	; 254
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
									 _delay_ms(400);
									 LCD_SEND_COMMAND(0x01);
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									 LCD_VidSendStrig(" 0:Home");
    2814:	84 ed       	ldi	r24, 0xD4	; 212
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColTwo);
    281c:	82 e0       	ldi	r24, 0x02	; 2
    281e:	61 e0       	ldi	r22, 0x01	; 1
    2820:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									 LCD_VidSendStrig("1:Garag");
    2824:	8c ed       	ldi	r24, 0xDC	; 220
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									 while(1)
									 {
									     read= KPD_u8GetPressedKey();
    282c:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    2830:	fe 01       	movw	r30, r28
    2832:	e4 5d       	subi	r30, 0xD4	; 212
    2834:	fe 4f       	sbci	r31, 0xFE	; 254
    2836:	80 83       	st	Z, r24
										 if(read!=0xFF)
    2838:	fe 01       	movw	r30, r28
    283a:	e4 5d       	subi	r30, 0xD4	; 212
    283c:	fe 4f       	sbci	r31, 0xFE	; 254
    283e:	80 81       	ld	r24, Z
    2840:	8f 3f       	cpi	r24, 0xFF	; 255
    2842:	a1 f3       	breq	.-24     	; 0x282c <main+0x506>
										 {
											 if(read=='0')
    2844:	fe 01       	movw	r30, r28
    2846:	e4 5d       	subi	r30, 0xD4	; 212
    2848:	fe 4f       	sbci	r31, 0xFE	; 254
    284a:	80 81       	ld	r24, Z
    284c:	80 33       	cpi	r24, 0x30	; 48
    284e:	09 f0       	breq	.+2      	; 0x2852 <main+0x52c>
    2850:	b6 c1       	rjmp	.+876    	; 0x2bbe <main+0x898>
											 {
												 //home door will open for 1m
												 LCD_SEND_COMMAND(0x01);
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												 LCD_VidSendStrig("  Home Door ");
    2858:	84 ee       	ldi	r24, 0xE4	; 228
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2860:	82 e0       	ldi	r24, 0x02	; 2
    2862:	60 e0       	ldi	r22, 0x00	; 0
    2864:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												 LCD_VidSendStrig("  Will OPEN");
    2868:	81 ef       	ldi	r24, 0xF1	; 241
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 Timer1_VidTimer1SetOCR1(3999); //open the door
    2870:	8f e9       	ldi	r24, 0x9F	; 159
    2872:	9f e0       	ldi	r25, 0x0F	; 15
    2874:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Timer1_VidTimer1SetOCR1>
    2878:	fe 01       	movw	r30, r28
    287a:	e9 5f       	subi	r30, 0xF9	; 249
    287c:	fe 4f       	sbci	r31, 0xFE	; 254
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	aa e7       	ldi	r26, 0x7A	; 122
    2884:	b4 e4       	ldi	r27, 0x44	; 68
    2886:	80 83       	st	Z, r24
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	a2 83       	std	Z+2, r26	; 0x02
    288c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288e:	8e 01       	movw	r16, r28
    2890:	0d 5f       	subi	r16, 0xFD	; 253
    2892:	1e 4f       	sbci	r17, 0xFE	; 254
    2894:	fe 01       	movw	r30, r28
    2896:	e9 5f       	subi	r30, 0xF9	; 249
    2898:	fe 4f       	sbci	r31, 0xFE	; 254
    289a:	60 81       	ld	r22, Z
    289c:	71 81       	ldd	r23, Z+1	; 0x01
    289e:	82 81       	ldd	r24, Z+2	; 0x02
    28a0:	93 81       	ldd	r25, Z+3	; 0x03
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	4a e7       	ldi	r20, 0x7A	; 122
    28a8:	55 e4       	ldi	r21, 0x45	; 69
    28aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	f8 01       	movw	r30, r16
    28b4:	80 83       	st	Z, r24
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	a2 83       	std	Z+2, r26	; 0x02
    28ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28bc:	fe 01       	movw	r30, r28
    28be:	ed 5f       	subi	r30, 0xFD	; 253
    28c0:	fe 4f       	sbci	r31, 0xFE	; 254
    28c2:	60 81       	ld	r22, Z
    28c4:	71 81       	ldd	r23, Z+1	; 0x01
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	93 81       	ldd	r25, Z+3	; 0x03
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e8       	ldi	r20, 0x80	; 128
    28d0:	5f e3       	ldi	r21, 0x3F	; 63
    28d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28d6:	88 23       	and	r24, r24
    28d8:	44 f4       	brge	.+16     	; 0x28ea <main+0x5c4>
		__ticks = 1;
    28da:	fe 01       	movw	r30, r28
    28dc:	ef 5f       	subi	r30, 0xFF	; 255
    28de:	fe 4f       	sbci	r31, 0xFE	; 254
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	80 83       	st	Z, r24
    28e8:	64 c0       	rjmp	.+200    	; 0x29b2 <main+0x68c>
	else if (__tmp > 65535)
    28ea:	fe 01       	movw	r30, r28
    28ec:	ed 5f       	subi	r30, 0xFD	; 253
    28ee:	fe 4f       	sbci	r31, 0xFE	; 254
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	3f ef       	ldi	r19, 0xFF	; 255
    28fc:	4f e7       	ldi	r20, 0x7F	; 127
    28fe:	57 e4       	ldi	r21, 0x47	; 71
    2900:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2904:	18 16       	cp	r1, r24
    2906:	0c f0       	brlt	.+2      	; 0x290a <main+0x5e4>
    2908:	43 c0       	rjmp	.+134    	; 0x2990 <main+0x66a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290a:	fe 01       	movw	r30, r28
    290c:	e9 5f       	subi	r30, 0xF9	; 249
    290e:	fe 4f       	sbci	r31, 0xFE	; 254
    2910:	60 81       	ld	r22, Z
    2912:	71 81       	ldd	r23, Z+1	; 0x01
    2914:	82 81       	ldd	r24, Z+2	; 0x02
    2916:	93 81       	ldd	r25, Z+3	; 0x03
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e2       	ldi	r20, 0x20	; 32
    291e:	51 e4       	ldi	r21, 0x41	; 65
    2920:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	8e 01       	movw	r16, r28
    292a:	0f 5f       	subi	r16, 0xFF	; 255
    292c:	1e 4f       	sbci	r17, 0xFE	; 254
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	f8 01       	movw	r30, r16
    293c:	91 83       	std	Z+1, r25	; 0x01
    293e:	80 83       	st	Z, r24
    2940:	1f c0       	rjmp	.+62     	; 0x2980 <main+0x65a>
    2942:	fe 01       	movw	r30, r28
    2944:	e1 50       	subi	r30, 0x01	; 1
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	80 e9       	ldi	r24, 0x90	; 144
    294a:	91 e0       	ldi	r25, 0x01	; 1
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24
    2950:	fe 01       	movw	r30, r28
    2952:	e1 50       	subi	r30, 0x01	; 1
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	91 81       	ldd	r25, Z+1	; 0x01
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	f1 f7       	brne	.-4      	; 0x295a <main+0x634>
    295e:	fe 01       	movw	r30, r28
    2960:	e1 50       	subi	r30, 0x01	; 1
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	91 83       	std	Z+1, r25	; 0x01
    2966:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2968:	de 01       	movw	r26, r28
    296a:	af 5f       	subi	r26, 0xFF	; 255
    296c:	be 4f       	sbci	r27, 0xFE	; 254
    296e:	fe 01       	movw	r30, r28
    2970:	ef 5f       	subi	r30, 0xFF	; 255
    2972:	fe 4f       	sbci	r31, 0xFE	; 254
    2974:	80 81       	ld	r24, Z
    2976:	91 81       	ldd	r25, Z+1	; 0x01
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	11 96       	adiw	r26, 0x01	; 1
    297c:	9c 93       	st	X, r25
    297e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2980:	fe 01       	movw	r30, r28
    2982:	ef 5f       	subi	r30, 0xFF	; 255
    2984:	fe 4f       	sbci	r31, 0xFE	; 254
    2986:	80 81       	ld	r24, Z
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	d1 f6       	brne	.-76     	; 0x2942 <main+0x61c>
    298e:	27 c0       	rjmp	.+78     	; 0x29de <main+0x6b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2990:	8e 01       	movw	r16, r28
    2992:	0f 5f       	subi	r16, 0xFF	; 255
    2994:	1e 4f       	sbci	r17, 0xFE	; 254
    2996:	fe 01       	movw	r30, r28
    2998:	ed 5f       	subi	r30, 0xFD	; 253
    299a:	fe 4f       	sbci	r31, 0xFE	; 254
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	93 81       	ldd	r25, Z+3	; 0x03
    29a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	f8 01       	movw	r30, r16
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	80 83       	st	Z, r24
    29b2:	de 01       	movw	r26, r28
    29b4:	a3 50       	subi	r26, 0x03	; 3
    29b6:	bf 4f       	sbci	r27, 0xFF	; 255
    29b8:	fe 01       	movw	r30, r28
    29ba:	ef 5f       	subi	r30, 0xFF	; 255
    29bc:	fe 4f       	sbci	r31, 0xFE	; 254
    29be:	80 81       	ld	r24, Z
    29c0:	91 81       	ldd	r25, Z+1	; 0x01
    29c2:	8d 93       	st	X+, r24
    29c4:	9c 93       	st	X, r25
    29c6:	fe 01       	movw	r30, r28
    29c8:	e3 50       	subi	r30, 0x03	; 3
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	80 81       	ld	r24, Z
    29ce:	91 81       	ldd	r25, Z+1	; 0x01
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	f1 f7       	brne	.-4      	; 0x29d0 <main+0x6aa>
    29d4:	fe 01       	movw	r30, r28
    29d6:	e3 50       	subi	r30, 0x03	; 3
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	91 83       	std	Z+1, r25	; 0x01
    29dc:	80 83       	st	Z, r24
												 _delay_ms(1000);
												 LCD_SEND_COMMAND(0x01);
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												 LCD_VidSendStrig("  Home Door ");
    29e4:	84 ee       	ldi	r24, 0xE4	; 228
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    29ec:	82 e0       	ldi	r24, 0x02	; 2
    29ee:	60 e0       	ldi	r22, 0x00	; 0
    29f0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												 LCD_VidSendStrig("Will close again");
    29f4:	8d ef       	ldi	r24, 0xFD	; 253
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 Timer1_VidTimer1SetOCR1(3000);//close the door again
    29fc:	88 eb       	ldi	r24, 0xB8	; 184
    29fe:	9b e0       	ldi	r25, 0x0B	; 11
    2a00:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Timer1_VidTimer1SetOCR1>
    2a04:	fe 01       	movw	r30, r28
    2a06:	e7 50       	subi	r30, 0x07	; 7
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	a8 ec       	ldi	r26, 0xC8	; 200
    2a10:	b2 e4       	ldi	r27, 0x42	; 66
    2a12:	80 83       	st	Z, r24
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	a2 83       	std	Z+2, r26	; 0x02
    2a18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1a:	8e 01       	movw	r16, r28
    2a1c:	0b 50       	subi	r16, 0x0B	; 11
    2a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a20:	fe 01       	movw	r30, r28
    2a22:	e7 50       	subi	r30, 0x07	; 7
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	60 81       	ld	r22, Z
    2a28:	71 81       	ldd	r23, Z+1	; 0x01
    2a2a:	82 81       	ldd	r24, Z+2	; 0x02
    2a2c:	93 81       	ldd	r25, Z+3	; 0x03
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	4a e7       	ldi	r20, 0x7A	; 122
    2a34:	55 e4       	ldi	r21, 0x45	; 69
    2a36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	f8 01       	movw	r30, r16
    2a40:	80 83       	st	Z, r24
    2a42:	91 83       	std	Z+1, r25	; 0x01
    2a44:	a2 83       	std	Z+2, r26	; 0x02
    2a46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a48:	fe 01       	movw	r30, r28
    2a4a:	eb 50       	subi	r30, 0x0B	; 11
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	60 81       	ld	r22, Z
    2a50:	71 81       	ldd	r23, Z+1	; 0x01
    2a52:	82 81       	ldd	r24, Z+2	; 0x02
    2a54:	93 81       	ldd	r25, Z+3	; 0x03
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	40 e8       	ldi	r20, 0x80	; 128
    2a5c:	5f e3       	ldi	r21, 0x3F	; 63
    2a5e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a62:	88 23       	and	r24, r24
    2a64:	44 f4       	brge	.+16     	; 0x2a76 <main+0x750>
		__ticks = 1;
    2a66:	fe 01       	movw	r30, r28
    2a68:	ed 50       	subi	r30, 0x0D	; 13
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	80 83       	st	Z, r24
    2a74:	64 c0       	rjmp	.+200    	; 0x2b3e <main+0x818>
	else if (__tmp > 65535)
    2a76:	fe 01       	movw	r30, r28
    2a78:	eb 50       	subi	r30, 0x0B	; 11
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	60 81       	ld	r22, Z
    2a7e:	71 81       	ldd	r23, Z+1	; 0x01
    2a80:	82 81       	ldd	r24, Z+2	; 0x02
    2a82:	93 81       	ldd	r25, Z+3	; 0x03
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	3f ef       	ldi	r19, 0xFF	; 255
    2a88:	4f e7       	ldi	r20, 0x7F	; 127
    2a8a:	57 e4       	ldi	r21, 0x47	; 71
    2a8c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a90:	18 16       	cp	r1, r24
    2a92:	0c f0       	brlt	.+2      	; 0x2a96 <main+0x770>
    2a94:	43 c0       	rjmp	.+134    	; 0x2b1c <main+0x7f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a96:	fe 01       	movw	r30, r28
    2a98:	e7 50       	subi	r30, 0x07	; 7
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	60 81       	ld	r22, Z
    2a9e:	71 81       	ldd	r23, Z+1	; 0x01
    2aa0:	82 81       	ldd	r24, Z+2	; 0x02
    2aa2:	93 81       	ldd	r25, Z+3	; 0x03
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e2       	ldi	r20, 0x20	; 32
    2aaa:	51 e4       	ldi	r21, 0x41	; 65
    2aac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8e 01       	movw	r16, r28
    2ab6:	0d 50       	subi	r16, 0x0D	; 13
    2ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aba:	bc 01       	movw	r22, r24
    2abc:	cd 01       	movw	r24, r26
    2abe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	f8 01       	movw	r30, r16
    2ac8:	91 83       	std	Z+1, r25	; 0x01
    2aca:	80 83       	st	Z, r24
    2acc:	1f c0       	rjmp	.+62     	; 0x2b0c <main+0x7e6>
    2ace:	fe 01       	movw	r30, r28
    2ad0:	ef 50       	subi	r30, 0x0F	; 15
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 e9       	ldi	r24, 0x90	; 144
    2ad6:	91 e0       	ldi	r25, 0x01	; 1
    2ad8:	91 83       	std	Z+1, r25	; 0x01
    2ada:	80 83       	st	Z, r24
    2adc:	fe 01       	movw	r30, r28
    2ade:	ef 50       	subi	r30, 0x0F	; 15
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	80 81       	ld	r24, Z
    2ae4:	91 81       	ldd	r25, Z+1	; 0x01
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	f1 f7       	brne	.-4      	; 0x2ae6 <main+0x7c0>
    2aea:	fe 01       	movw	r30, r28
    2aec:	ef 50       	subi	r30, 0x0F	; 15
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af4:	de 01       	movw	r26, r28
    2af6:	ad 50       	subi	r26, 0x0D	; 13
    2af8:	bf 4f       	sbci	r27, 0xFF	; 255
    2afa:	fe 01       	movw	r30, r28
    2afc:	ed 50       	subi	r30, 0x0D	; 13
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	80 81       	ld	r24, Z
    2b02:	91 81       	ldd	r25, Z+1	; 0x01
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	11 96       	adiw	r26, 0x01	; 1
    2b08:	9c 93       	st	X, r25
    2b0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	ed 50       	subi	r30, 0x0D	; 13
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	80 81       	ld	r24, Z
    2b14:	91 81       	ldd	r25, Z+1	; 0x01
    2b16:	00 97       	sbiw	r24, 0x00	; 0
    2b18:	d1 f6       	brne	.-76     	; 0x2ace <main+0x7a8>
    2b1a:	27 c0       	rjmp	.+78     	; 0x2b6a <main+0x844>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1c:	8e 01       	movw	r16, r28
    2b1e:	0d 50       	subi	r16, 0x0D	; 13
    2b20:	1f 4f       	sbci	r17, 0xFF	; 255
    2b22:	fe 01       	movw	r30, r28
    2b24:	eb 50       	subi	r30, 0x0B	; 11
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	60 81       	ld	r22, Z
    2b2a:	71 81       	ldd	r23, Z+1	; 0x01
    2b2c:	82 81       	ldd	r24, Z+2	; 0x02
    2b2e:	93 81       	ldd	r25, Z+3	; 0x03
    2b30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	f8 01       	movw	r30, r16
    2b3a:	91 83       	std	Z+1, r25	; 0x01
    2b3c:	80 83       	st	Z, r24
    2b3e:	de 01       	movw	r26, r28
    2b40:	a1 51       	subi	r26, 0x11	; 17
    2b42:	bf 4f       	sbci	r27, 0xFF	; 255
    2b44:	fe 01       	movw	r30, r28
    2b46:	ed 50       	subi	r30, 0x0D	; 13
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	80 81       	ld	r24, Z
    2b4c:	91 81       	ldd	r25, Z+1	; 0x01
    2b4e:	8d 93       	st	X+, r24
    2b50:	9c 93       	st	X, r25
    2b52:	fe 01       	movw	r30, r28
    2b54:	e1 51       	subi	r30, 0x11	; 17
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 81       	ld	r24, Z
    2b5a:	91 81       	ldd	r25, Z+1	; 0x01
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <main+0x836>
    2b60:	fe 01       	movw	r30, r28
    2b62:	e1 51       	subi	r30, 0x11	; 17
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	91 83       	std	Z+1, r25	; 0x01
    2b68:	80 83       	st	Z, r24
												 _delay_ms(100);
												 USART_VIDSendChar(1); //TO TELL HOME that yasmeen is at home
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	0e 94 66 11 	call	0x22cc	; 0x22cc <USART_VIDSendChar>
												 DIO_VidSetPinValue(DIO_PORTA,DIO_PIN7 ,DIO_LOW); //admin led off
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	67 e0       	ldi	r22, 0x07	; 7
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
												 LCD_SEND_COMMAND(0x01);
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												 LCD_VidSendStrig(" Select Mode:");
    2b80:	8d e7       	ldi	r24, 0x7D	; 125
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2b88:	82 e0       	ldi	r24, 0x02	; 2
    2b8a:	60 e0       	ldi	r22, 0x00	; 0
    2b8c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												 LCD_VidSendStrig("0:Admin 1:Guest");
    2b90:	8b e8       	ldi	r24, 0x8B	; 139
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 flag=0;
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e7 5d       	subi	r30, 0xD7	; 215
    2b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b9e:	10 82       	st	Z, r1
												 flag2=0;
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e8 5d       	subi	r30, 0xD8	; 216
    2ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba6:	10 82       	st	Z, r1
												 counter=0;
    2ba8:	fe 01       	movw	r30, r28
    2baa:	e6 5d       	subi	r30, 0xD6	; 214
    2bac:	fe 4f       	sbci	r31, 0xFE	; 254
    2bae:	10 82       	st	Z, r1
												 pass=0;
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	e3 5d       	subi	r30, 0xD3	; 211
    2bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb6:	11 82       	std	Z+1, r1	; 0x01
    2bb8:	10 82       	st	Z, r1
    2bba:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <main+0x1bf2>
												 break;
											 }
											 else if(read==1)
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e4 5d       	subi	r30, 0xD4	; 212
    2bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc4:	80 81       	ld	r24, Z
    2bc6:	81 30       	cpi	r24, 0x01	; 1
    2bc8:	09 f0       	breq	.+2      	; 0x2bcc <main+0x8a6>
    2bca:	b3 c1       	rjmp	.+870    	; 0x2f32 <main+0xc0c>
											 {
												 //garag door will open for 1min
												 LCD_SEND_COMMAND(0x01);
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												 LCD_VidSendStrig(" Garag Door ");
    2bd2:	8e e0       	ldi	r24, 0x0E	; 14
    2bd4:	91 e0       	ldi	r25, 0x01	; 1
    2bd6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2bda:	82 e0       	ldi	r24, 0x02	; 2
    2bdc:	60 e0       	ldi	r22, 0x00	; 0
    2bde:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												 LCD_VidSendStrig(" Will OPEN");
    2be2:	8b e1       	ldi	r24, 0x1B	; 27
    2be4:	91 e0       	ldi	r25, 0x01	; 1
    2be6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 Timer1_VidTimer1SetOCR1B(3999); //open the door
    2bea:	8f e9       	ldi	r24, 0x9F	; 159
    2bec:	9f e0       	ldi	r25, 0x0F	; 15
    2bee:	0e 94 fe 10 	call	0x21fc	; 0x21fc <Timer1_VidTimer1SetOCR1B>
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e5 51       	subi	r30, 0x15	; 21
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	aa e7       	ldi	r26, 0x7A	; 122
    2bfe:	b4 e4       	ldi	r27, 0x44	; 68
    2c00:	80 83       	st	Z, r24
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	a2 83       	std	Z+2, r26	; 0x02
    2c06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c08:	8e 01       	movw	r16, r28
    2c0a:	09 51       	subi	r16, 0x19	; 25
    2c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e5 51       	subi	r30, 0x15	; 21
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	60 81       	ld	r22, Z
    2c16:	71 81       	ldd	r23, Z+1	; 0x01
    2c18:	82 81       	ldd	r24, Z+2	; 0x02
    2c1a:	93 81       	ldd	r25, Z+3	; 0x03
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	4a e7       	ldi	r20, 0x7A	; 122
    2c22:	55 e4       	ldi	r21, 0x45	; 69
    2c24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	f8 01       	movw	r30, r16
    2c2e:	80 83       	st	Z, r24
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	a2 83       	std	Z+2, r26	; 0x02
    2c34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c36:	fe 01       	movw	r30, r28
    2c38:	e9 51       	subi	r30, 0x19	; 25
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	60 81       	ld	r22, Z
    2c3e:	71 81       	ldd	r23, Z+1	; 0x01
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e8       	ldi	r20, 0x80	; 128
    2c4a:	5f e3       	ldi	r21, 0x3F	; 63
    2c4c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c50:	88 23       	and	r24, r24
    2c52:	44 f4       	brge	.+16     	; 0x2c64 <main+0x93e>
		__ticks = 1;
    2c54:	fe 01       	movw	r30, r28
    2c56:	eb 51       	subi	r30, 0x1B	; 27
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	91 83       	std	Z+1, r25	; 0x01
    2c60:	80 83       	st	Z, r24
    2c62:	64 c0       	rjmp	.+200    	; 0x2d2c <main+0xa06>
	else if (__tmp > 65535)
    2c64:	fe 01       	movw	r30, r28
    2c66:	e9 51       	subi	r30, 0x19	; 25
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	60 81       	ld	r22, Z
    2c6c:	71 81       	ldd	r23, Z+1	; 0x01
    2c6e:	82 81       	ldd	r24, Z+2	; 0x02
    2c70:	93 81       	ldd	r25, Z+3	; 0x03
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	3f ef       	ldi	r19, 0xFF	; 255
    2c76:	4f e7       	ldi	r20, 0x7F	; 127
    2c78:	57 e4       	ldi	r21, 0x47	; 71
    2c7a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c7e:	18 16       	cp	r1, r24
    2c80:	0c f0       	brlt	.+2      	; 0x2c84 <main+0x95e>
    2c82:	43 c0       	rjmp	.+134    	; 0x2d0a <main+0x9e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c84:	fe 01       	movw	r30, r28
    2c86:	e5 51       	subi	r30, 0x15	; 21
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	60 81       	ld	r22, Z
    2c8c:	71 81       	ldd	r23, Z+1	; 0x01
    2c8e:	82 81       	ldd	r24, Z+2	; 0x02
    2c90:	93 81       	ldd	r25, Z+3	; 0x03
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	40 e2       	ldi	r20, 0x20	; 32
    2c98:	51 e4       	ldi	r21, 0x41	; 65
    2c9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	8e 01       	movw	r16, r28
    2ca4:	0b 51       	subi	r16, 0x1B	; 27
    2ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	91 83       	std	Z+1, r25	; 0x01
    2cb8:	80 83       	st	Z, r24
    2cba:	1f c0       	rjmp	.+62     	; 0x2cfa <main+0x9d4>
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	ed 51       	subi	r30, 0x1D	; 29
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 e9       	ldi	r24, 0x90	; 144
    2cc4:	91 e0       	ldi	r25, 0x01	; 1
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	80 83       	st	Z, r24
    2cca:	fe 01       	movw	r30, r28
    2ccc:	ed 51       	subi	r30, 0x1D	; 29
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	80 81       	ld	r24, Z
    2cd2:	91 81       	ldd	r25, Z+1	; 0x01
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <main+0x9ae>
    2cd8:	fe 01       	movw	r30, r28
    2cda:	ed 51       	subi	r30, 0x1D	; 29
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce2:	de 01       	movw	r26, r28
    2ce4:	ab 51       	subi	r26, 0x1B	; 27
    2ce6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ce8:	fe 01       	movw	r30, r28
    2cea:	eb 51       	subi	r30, 0x1B	; 27
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	80 81       	ld	r24, Z
    2cf0:	91 81       	ldd	r25, Z+1	; 0x01
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
    2cf4:	11 96       	adiw	r26, 0x01	; 1
    2cf6:	9c 93       	st	X, r25
    2cf8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	eb 51       	subi	r30, 0x1B	; 27
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 81       	ld	r24, Z
    2d02:	91 81       	ldd	r25, Z+1	; 0x01
    2d04:	00 97       	sbiw	r24, 0x00	; 0
    2d06:	d1 f6       	brne	.-76     	; 0x2cbc <main+0x996>
    2d08:	27 c0       	rjmp	.+78     	; 0x2d58 <main+0xa32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d0a:	8e 01       	movw	r16, r28
    2d0c:	0b 51       	subi	r16, 0x1B	; 27
    2d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d10:	fe 01       	movw	r30, r28
    2d12:	e9 51       	subi	r30, 0x19	; 25
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	60 81       	ld	r22, Z
    2d18:	71 81       	ldd	r23, Z+1	; 0x01
    2d1a:	82 81       	ldd	r24, Z+2	; 0x02
    2d1c:	93 81       	ldd	r25, Z+3	; 0x03
    2d1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	f8 01       	movw	r30, r16
    2d28:	91 83       	std	Z+1, r25	; 0x01
    2d2a:	80 83       	st	Z, r24
    2d2c:	de 01       	movw	r26, r28
    2d2e:	af 51       	subi	r26, 0x1F	; 31
    2d30:	bf 4f       	sbci	r27, 0xFF	; 255
    2d32:	fe 01       	movw	r30, r28
    2d34:	eb 51       	subi	r30, 0x1B	; 27
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	80 81       	ld	r24, Z
    2d3a:	91 81       	ldd	r25, Z+1	; 0x01
    2d3c:	8d 93       	st	X+, r24
    2d3e:	9c 93       	st	X, r25
    2d40:	fe 01       	movw	r30, r28
    2d42:	ef 51       	subi	r30, 0x1F	; 31
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	80 81       	ld	r24, Z
    2d48:	91 81       	ldd	r25, Z+1	; 0x01
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <main+0xa24>
    2d4e:	fe 01       	movw	r30, r28
    2d50:	ef 51       	subi	r30, 0x1F	; 31
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	91 83       	std	Z+1, r25	; 0x01
    2d56:	80 83       	st	Z, r24
												 _delay_ms(1000);
												 LCD_SEND_COMMAND(0x01);
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												 LCD_VidSendStrig("  Garag Door ");
    2d5e:	86 e2       	ldi	r24, 0x26	; 38
    2d60:	91 e0       	ldi	r25, 0x01	; 1
    2d62:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2d66:	82 e0       	ldi	r24, 0x02	; 2
    2d68:	60 e0       	ldi	r22, 0x00	; 0
    2d6a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												 LCD_VidSendStrig("Will close again");
    2d6e:	8d ef       	ldi	r24, 0xFD	; 253
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 Timer1_VidTimer1SetOCR1B(3000);//close the GARAG again
    2d76:	88 eb       	ldi	r24, 0xB8	; 184
    2d78:	9b e0       	ldi	r25, 0x0B	; 11
    2d7a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <Timer1_VidTimer1SetOCR1B>
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e3 52       	subi	r30, 0x23	; 35
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	a8 ec       	ldi	r26, 0xC8	; 200
    2d8a:	b2 e4       	ldi	r27, 0x42	; 66
    2d8c:	80 83       	st	Z, r24
    2d8e:	91 83       	std	Z+1, r25	; 0x01
    2d90:	a2 83       	std	Z+2, r26	; 0x02
    2d92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d94:	8e 01       	movw	r16, r28
    2d96:	07 52       	subi	r16, 0x27	; 39
    2d98:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	e3 52       	subi	r30, 0x23	; 35
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	60 81       	ld	r22, Z
    2da2:	71 81       	ldd	r23, Z+1	; 0x01
    2da4:	82 81       	ldd	r24, Z+2	; 0x02
    2da6:	93 81       	ldd	r25, Z+3	; 0x03
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	4a e7       	ldi	r20, 0x7A	; 122
    2dae:	55 e4       	ldi	r21, 0x45	; 69
    2db0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	f8 01       	movw	r30, r16
    2dba:	80 83       	st	Z, r24
    2dbc:	91 83       	std	Z+1, r25	; 0x01
    2dbe:	a2 83       	std	Z+2, r26	; 0x02
    2dc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	e7 52       	subi	r30, 0x27	; 39
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	60 81       	ld	r22, Z
    2dca:	71 81       	ldd	r23, Z+1	; 0x01
    2dcc:	82 81       	ldd	r24, Z+2	; 0x02
    2dce:	93 81       	ldd	r25, Z+3	; 0x03
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e8       	ldi	r20, 0x80	; 128
    2dd6:	5f e3       	ldi	r21, 0x3F	; 63
    2dd8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ddc:	88 23       	and	r24, r24
    2dde:	44 f4       	brge	.+16     	; 0x2df0 <main+0xaca>
		__ticks = 1;
    2de0:	fe 01       	movw	r30, r28
    2de2:	e9 52       	subi	r30, 0x29	; 41
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	91 83       	std	Z+1, r25	; 0x01
    2dec:	80 83       	st	Z, r24
    2dee:	64 c0       	rjmp	.+200    	; 0x2eb8 <main+0xb92>
	else if (__tmp > 65535)
    2df0:	fe 01       	movw	r30, r28
    2df2:	e7 52       	subi	r30, 0x27	; 39
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	60 81       	ld	r22, Z
    2df8:	71 81       	ldd	r23, Z+1	; 0x01
    2dfa:	82 81       	ldd	r24, Z+2	; 0x02
    2dfc:	93 81       	ldd	r25, Z+3	; 0x03
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	3f ef       	ldi	r19, 0xFF	; 255
    2e02:	4f e7       	ldi	r20, 0x7F	; 127
    2e04:	57 e4       	ldi	r21, 0x47	; 71
    2e06:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e0a:	18 16       	cp	r1, r24
    2e0c:	0c f0       	brlt	.+2      	; 0x2e10 <main+0xaea>
    2e0e:	43 c0       	rjmp	.+134    	; 0x2e96 <main+0xb70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e10:	fe 01       	movw	r30, r28
    2e12:	e3 52       	subi	r30, 0x23	; 35
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	60 81       	ld	r22, Z
    2e18:	71 81       	ldd	r23, Z+1	; 0x01
    2e1a:	82 81       	ldd	r24, Z+2	; 0x02
    2e1c:	93 81       	ldd	r25, Z+3	; 0x03
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e2       	ldi	r20, 0x20	; 32
    2e24:	51 e4       	ldi	r21, 0x41	; 65
    2e26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	8e 01       	movw	r16, r28
    2e30:	09 52       	subi	r16, 0x29	; 41
    2e32:	1f 4f       	sbci	r17, 0xFF	; 255
    2e34:	bc 01       	movw	r22, r24
    2e36:	cd 01       	movw	r24, r26
    2e38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	f8 01       	movw	r30, r16
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	80 83       	st	Z, r24
    2e46:	1f c0       	rjmp	.+62     	; 0x2e86 <main+0xb60>
    2e48:	fe 01       	movw	r30, r28
    2e4a:	eb 52       	subi	r30, 0x2B	; 43
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	80 e9       	ldi	r24, 0x90	; 144
    2e50:	91 e0       	ldi	r25, 0x01	; 1
    2e52:	91 83       	std	Z+1, r25	; 0x01
    2e54:	80 83       	st	Z, r24
    2e56:	fe 01       	movw	r30, r28
    2e58:	eb 52       	subi	r30, 0x2B	; 43
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	80 81       	ld	r24, Z
    2e5e:	91 81       	ldd	r25, Z+1	; 0x01
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	f1 f7       	brne	.-4      	; 0x2e60 <main+0xb3a>
    2e64:	fe 01       	movw	r30, r28
    2e66:	eb 52       	subi	r30, 0x2B	; 43
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	91 83       	std	Z+1, r25	; 0x01
    2e6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6e:	de 01       	movw	r26, r28
    2e70:	a9 52       	subi	r26, 0x29	; 41
    2e72:	bf 4f       	sbci	r27, 0xFF	; 255
    2e74:	fe 01       	movw	r30, r28
    2e76:	e9 52       	subi	r30, 0x29	; 41
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	80 81       	ld	r24, Z
    2e7c:	91 81       	ldd	r25, Z+1	; 0x01
    2e7e:	01 97       	sbiw	r24, 0x01	; 1
    2e80:	11 96       	adiw	r26, 0x01	; 1
    2e82:	9c 93       	st	X, r25
    2e84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e86:	fe 01       	movw	r30, r28
    2e88:	e9 52       	subi	r30, 0x29	; 41
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	80 81       	ld	r24, Z
    2e8e:	91 81       	ldd	r25, Z+1	; 0x01
    2e90:	00 97       	sbiw	r24, 0x00	; 0
    2e92:	d1 f6       	brne	.-76     	; 0x2e48 <main+0xb22>
    2e94:	27 c0       	rjmp	.+78     	; 0x2ee4 <main+0xbbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e96:	8e 01       	movw	r16, r28
    2e98:	09 52       	subi	r16, 0x29	; 41
    2e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e7 52       	subi	r30, 0x27	; 39
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	60 81       	ld	r22, Z
    2ea4:	71 81       	ldd	r23, Z+1	; 0x01
    2ea6:	82 81       	ldd	r24, Z+2	; 0x02
    2ea8:	93 81       	ldd	r25, Z+3	; 0x03
    2eaa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	f8 01       	movw	r30, r16
    2eb4:	91 83       	std	Z+1, r25	; 0x01
    2eb6:	80 83       	st	Z, r24
    2eb8:	de 01       	movw	r26, r28
    2eba:	ad 52       	subi	r26, 0x2D	; 45
    2ebc:	bf 4f       	sbci	r27, 0xFF	; 255
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e9 52       	subi	r30, 0x29	; 41
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	80 81       	ld	r24, Z
    2ec6:	91 81       	ldd	r25, Z+1	; 0x01
    2ec8:	8d 93       	st	X+, r24
    2eca:	9c 93       	st	X, r25
    2ecc:	fe 01       	movw	r30, r28
    2ece:	ed 52       	subi	r30, 0x2D	; 45
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 81       	ld	r24, Z
    2ed4:	91 81       	ldd	r25, Z+1	; 0x01
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <main+0xbb0>
    2eda:	fe 01       	movw	r30, r28
    2edc:	ed 52       	subi	r30, 0x2D	; 45
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	91 83       	std	Z+1, r25	; 0x01
    2ee2:	80 83       	st	Z, r24
												 _delay_ms(100);
												 DIO_VidSetPinValue(DIO_PORTA,DIO_PIN7 ,DIO_LOW); //admin led off
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	67 e0       	ldi	r22, 0x07	; 7
    2ee8:	40 e0       	ldi	r20, 0x00	; 0
    2eea:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
												 LCD_SEND_COMMAND(0x01);
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												 LCD_VidSendStrig(" Select Mode:");
    2ef4:	8d e7       	ldi	r24, 0x7D	; 125
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2efc:	82 e0       	ldi	r24, 0x02	; 2
    2efe:	60 e0       	ldi	r22, 0x00	; 0
    2f00:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												 LCD_VidSendStrig("0:Admin 1:Guest");
    2f04:	8b e8       	ldi	r24, 0x8B	; 139
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 flag=0;
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	e7 5d       	subi	r30, 0xD7	; 215
    2f10:	fe 4f       	sbci	r31, 0xFE	; 254
    2f12:	10 82       	st	Z, r1
												 flag2=0;
    2f14:	fe 01       	movw	r30, r28
    2f16:	e8 5d       	subi	r30, 0xD8	; 216
    2f18:	fe 4f       	sbci	r31, 0xFE	; 254
    2f1a:	10 82       	st	Z, r1
												 counter=0;
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	e6 5d       	subi	r30, 0xD6	; 214
    2f20:	fe 4f       	sbci	r31, 0xFE	; 254
    2f22:	10 82       	st	Z, r1
												 pass=0;
    2f24:	fe 01       	movw	r30, r28
    2f26:	e3 5d       	subi	r30, 0xD3	; 211
    2f28:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2a:	11 82       	std	Z+1, r1	; 0x01
    2f2c:	10 82       	st	Z, r1
    2f2e:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <main+0x1bf2>
												 break;
											 }
											 else
											 {
													LCD_SEND_COMMAND(0x01);
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
													LCD_VidSendStrig(" wrong choice");
    2f38:	84 e3       	ldi	r24, 0x34	; 52
    2f3a:	91 e0       	ldi	r25, 0x01	; 1
    2f3c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2f40:	82 e0       	ldi	r24, 0x02	; 2
    2f42:	60 e0       	ldi	r22, 0x00	; 0
    2f44:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
													LCD_VidSendStrig("choose again");
    2f48:	82 e4       	ldi	r24, 0x42	; 66
    2f4a:	91 e0       	ldi	r25, 0x01	; 1
    2f4c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    2f50:	fe 01       	movw	r30, r28
    2f52:	e1 53       	subi	r30, 0x31	; 49
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	aa ef       	ldi	r26, 0xFA	; 250
    2f5c:	b3 e4       	ldi	r27, 0x43	; 67
    2f5e:	80 83       	st	Z, r24
    2f60:	91 83       	std	Z+1, r25	; 0x01
    2f62:	a2 83       	std	Z+2, r26	; 0x02
    2f64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f66:	8e 01       	movw	r16, r28
    2f68:	05 53       	subi	r16, 0x35	; 53
    2f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	e1 53       	subi	r30, 0x31	; 49
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	60 81       	ld	r22, Z
    2f74:	71 81       	ldd	r23, Z+1	; 0x01
    2f76:	82 81       	ldd	r24, Z+2	; 0x02
    2f78:	93 81       	ldd	r25, Z+3	; 0x03
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	4a e7       	ldi	r20, 0x7A	; 122
    2f80:	55 e4       	ldi	r21, 0x45	; 69
    2f82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	f8 01       	movw	r30, r16
    2f8c:	80 83       	st	Z, r24
    2f8e:	91 83       	std	Z+1, r25	; 0x01
    2f90:	a2 83       	std	Z+2, r26	; 0x02
    2f92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f94:	fe 01       	movw	r30, r28
    2f96:	e5 53       	subi	r30, 0x35	; 53
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	60 81       	ld	r22, Z
    2f9c:	71 81       	ldd	r23, Z+1	; 0x01
    2f9e:	82 81       	ldd	r24, Z+2	; 0x02
    2fa0:	93 81       	ldd	r25, Z+3	; 0x03
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	40 e8       	ldi	r20, 0x80	; 128
    2fa8:	5f e3       	ldi	r21, 0x3F	; 63
    2faa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2fae:	88 23       	and	r24, r24
    2fb0:	44 f4       	brge	.+16     	; 0x2fc2 <main+0xc9c>
		__ticks = 1;
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	e7 53       	subi	r30, 0x37	; 55
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	91 83       	std	Z+1, r25	; 0x01
    2fbe:	80 83       	st	Z, r24
    2fc0:	64 c0       	rjmp	.+200    	; 0x308a <main+0xd64>
	else if (__tmp > 65535)
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e5 53       	subi	r30, 0x35	; 53
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	60 81       	ld	r22, Z
    2fca:	71 81       	ldd	r23, Z+1	; 0x01
    2fcc:	82 81       	ldd	r24, Z+2	; 0x02
    2fce:	93 81       	ldd	r25, Z+3	; 0x03
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	3f ef       	ldi	r19, 0xFF	; 255
    2fd4:	4f e7       	ldi	r20, 0x7F	; 127
    2fd6:	57 e4       	ldi	r21, 0x47	; 71
    2fd8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2fdc:	18 16       	cp	r1, r24
    2fde:	0c f0       	brlt	.+2      	; 0x2fe2 <main+0xcbc>
    2fe0:	43 c0       	rjmp	.+134    	; 0x3068 <main+0xd42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	e1 53       	subi	r30, 0x31	; 49
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	60 81       	ld	r22, Z
    2fea:	71 81       	ldd	r23, Z+1	; 0x01
    2fec:	82 81       	ldd	r24, Z+2	; 0x02
    2fee:	93 81       	ldd	r25, Z+3	; 0x03
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e2       	ldi	r20, 0x20	; 32
    2ff6:	51 e4       	ldi	r21, 0x41	; 65
    2ff8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	8e 01       	movw	r16, r28
    3002:	07 53       	subi	r16, 0x37	; 55
    3004:	1f 4f       	sbci	r17, 0xFF	; 255
    3006:	bc 01       	movw	r22, r24
    3008:	cd 01       	movw	r24, r26
    300a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	f8 01       	movw	r30, r16
    3014:	91 83       	std	Z+1, r25	; 0x01
    3016:	80 83       	st	Z, r24
    3018:	1f c0       	rjmp	.+62     	; 0x3058 <main+0xd32>
    301a:	fe 01       	movw	r30, r28
    301c:	e9 53       	subi	r30, 0x39	; 57
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	80 e9       	ldi	r24, 0x90	; 144
    3022:	91 e0       	ldi	r25, 0x01	; 1
    3024:	91 83       	std	Z+1, r25	; 0x01
    3026:	80 83       	st	Z, r24
    3028:	fe 01       	movw	r30, r28
    302a:	e9 53       	subi	r30, 0x39	; 57
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	80 81       	ld	r24, Z
    3030:	91 81       	ldd	r25, Z+1	; 0x01
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	f1 f7       	brne	.-4      	; 0x3032 <main+0xd0c>
    3036:	fe 01       	movw	r30, r28
    3038:	e9 53       	subi	r30, 0x39	; 57
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	91 83       	std	Z+1, r25	; 0x01
    303e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3040:	de 01       	movw	r26, r28
    3042:	a7 53       	subi	r26, 0x37	; 55
    3044:	bf 4f       	sbci	r27, 0xFF	; 255
    3046:	fe 01       	movw	r30, r28
    3048:	e7 53       	subi	r30, 0x37	; 55
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	80 81       	ld	r24, Z
    304e:	91 81       	ldd	r25, Z+1	; 0x01
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	11 96       	adiw	r26, 0x01	; 1
    3054:	9c 93       	st	X, r25
    3056:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3058:	fe 01       	movw	r30, r28
    305a:	e7 53       	subi	r30, 0x37	; 55
    305c:	ff 4f       	sbci	r31, 0xFF	; 255
    305e:	80 81       	ld	r24, Z
    3060:	91 81       	ldd	r25, Z+1	; 0x01
    3062:	00 97       	sbiw	r24, 0x00	; 0
    3064:	d1 f6       	brne	.-76     	; 0x301a <main+0xcf4>
    3066:	27 c0       	rjmp	.+78     	; 0x30b6 <main+0xd90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3068:	8e 01       	movw	r16, r28
    306a:	07 53       	subi	r16, 0x37	; 55
    306c:	1f 4f       	sbci	r17, 0xFF	; 255
    306e:	fe 01       	movw	r30, r28
    3070:	e5 53       	subi	r30, 0x35	; 53
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	60 81       	ld	r22, Z
    3076:	71 81       	ldd	r23, Z+1	; 0x01
    3078:	82 81       	ldd	r24, Z+2	; 0x02
    307a:	93 81       	ldd	r25, Z+3	; 0x03
    307c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	f8 01       	movw	r30, r16
    3086:	91 83       	std	Z+1, r25	; 0x01
    3088:	80 83       	st	Z, r24
    308a:	de 01       	movw	r26, r28
    308c:	ab 53       	subi	r26, 0x3B	; 59
    308e:	bf 4f       	sbci	r27, 0xFF	; 255
    3090:	fe 01       	movw	r30, r28
    3092:	e7 53       	subi	r30, 0x37	; 55
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	80 81       	ld	r24, Z
    3098:	91 81       	ldd	r25, Z+1	; 0x01
    309a:	8d 93       	st	X+, r24
    309c:	9c 93       	st	X, r25
    309e:	fe 01       	movw	r30, r28
    30a0:	eb 53       	subi	r30, 0x3B	; 59
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	80 81       	ld	r24, Z
    30a6:	91 81       	ldd	r25, Z+1	; 0x01
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	f1 f7       	brne	.-4      	; 0x30a8 <main+0xd82>
    30ac:	fe 01       	movw	r30, r28
    30ae:	eb 53       	subi	r30, 0x3B	; 59
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	91 83       	std	Z+1, r25	; 0x01
    30b4:	80 83       	st	Z, r24
													_delay_ms(500);
													LCD_SEND_COMMAND(0x01);
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
													LCD_VidSendStrig(" 0:Home");
    30bc:	84 ed       	ldi	r24, 0xD4	; 212
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColTwo);
    30c4:	82 e0       	ldi	r24, 0x02	; 2
    30c6:	61 e0       	ldi	r22, 0x01	; 1
    30c8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												    LCD_VidSendStrig("1:Garag");
    30cc:	8c ed       	ldi	r24, 0xDC	; 220
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    30d4:	ab cb       	rjmp	.-2218   	; 0x282c <main+0x506>


									 }

								 }
								 else if (pass==Yousef_Pass)
    30d6:	fe 01       	movw	r30, r28
    30d8:	e3 5d       	subi	r30, 0xD3	; 211
    30da:	fe 4f       	sbci	r31, 0xFE	; 254
    30dc:	80 81       	ld	r24, Z
    30de:	91 81       	ldd	r25, Z+1	; 0x01
    30e0:	f7 e1       	ldi	r31, 0x17	; 23
    30e2:	84 3e       	cpi	r24, 0xE4	; 228
    30e4:	9f 07       	cpc	r25, r31
    30e6:	09 f0       	breq	.+2      	; 0x30ea <main+0xdc4>
    30e8:	29 c5       	rjmp	.+2642   	; 0x3b3c <main+0x1816>
								 {
									 //admin yousef here
									 DIO_VidSetPinValue(DIO_PORTA,DIO_PIN7,DIO_HIGH);//admin led will on
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	67 e0       	ldi	r22, 0x07	; 7
    30ee:	41 e0       	ldi	r20, 0x01	; 1
    30f0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
									 LCD_SEND_COMMAND(0x01);
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									 //admin yousef here
									 LCD_VidSendStrig(" Right Password");
    30fa:	84 eb       	ldi	r24, 0xB4	; 180
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3102:	82 e0       	ldi	r24, 0x02	; 2
    3104:	60 e0       	ldi	r22, 0x00	; 0
    3106:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									 LCD_VidSendStrig("Welcome Yousef");
    310a:	8f e4       	ldi	r24, 0x4F	; 79
    310c:	91 e0       	ldi	r25, 0x01	; 1
    310e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    3112:	fe 01       	movw	r30, r28
    3114:	ef 53       	subi	r30, 0x3F	; 63
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	aa ef       	ldi	r26, 0xFA	; 250
    311e:	b3 e4       	ldi	r27, 0x43	; 67
    3120:	80 83       	st	Z, r24
    3122:	91 83       	std	Z+1, r25	; 0x01
    3124:	a2 83       	std	Z+2, r26	; 0x02
    3126:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3128:	8e 01       	movw	r16, r28
    312a:	03 54       	subi	r16, 0x43	; 67
    312c:	1f 4f       	sbci	r17, 0xFF	; 255
    312e:	fe 01       	movw	r30, r28
    3130:	ef 53       	subi	r30, 0x3F	; 63
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	60 81       	ld	r22, Z
    3136:	71 81       	ldd	r23, Z+1	; 0x01
    3138:	82 81       	ldd	r24, Z+2	; 0x02
    313a:	93 81       	ldd	r25, Z+3	; 0x03
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	4a e7       	ldi	r20, 0x7A	; 122
    3142:	55 e4       	ldi	r21, 0x45	; 69
    3144:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	f8 01       	movw	r30, r16
    314e:	80 83       	st	Z, r24
    3150:	91 83       	std	Z+1, r25	; 0x01
    3152:	a2 83       	std	Z+2, r26	; 0x02
    3154:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3156:	fe 01       	movw	r30, r28
    3158:	e3 54       	subi	r30, 0x43	; 67
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	60 81       	ld	r22, Z
    315e:	71 81       	ldd	r23, Z+1	; 0x01
    3160:	82 81       	ldd	r24, Z+2	; 0x02
    3162:	93 81       	ldd	r25, Z+3	; 0x03
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e8       	ldi	r20, 0x80	; 128
    316a:	5f e3       	ldi	r21, 0x3F	; 63
    316c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3170:	88 23       	and	r24, r24
    3172:	44 f4       	brge	.+16     	; 0x3184 <main+0xe5e>
		__ticks = 1;
    3174:	fe 01       	movw	r30, r28
    3176:	e5 54       	subi	r30, 0x45	; 69
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	80 83       	st	Z, r24
    3182:	64 c0       	rjmp	.+200    	; 0x324c <main+0xf26>
	else if (__tmp > 65535)
    3184:	fe 01       	movw	r30, r28
    3186:	e3 54       	subi	r30, 0x43	; 67
    3188:	ff 4f       	sbci	r31, 0xFF	; 255
    318a:	60 81       	ld	r22, Z
    318c:	71 81       	ldd	r23, Z+1	; 0x01
    318e:	82 81       	ldd	r24, Z+2	; 0x02
    3190:	93 81       	ldd	r25, Z+3	; 0x03
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	3f ef       	ldi	r19, 0xFF	; 255
    3196:	4f e7       	ldi	r20, 0x7F	; 127
    3198:	57 e4       	ldi	r21, 0x47	; 71
    319a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    319e:	18 16       	cp	r1, r24
    31a0:	0c f0       	brlt	.+2      	; 0x31a4 <main+0xe7e>
    31a2:	43 c0       	rjmp	.+134    	; 0x322a <main+0xf04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a4:	fe 01       	movw	r30, r28
    31a6:	ef 53       	subi	r30, 0x3F	; 63
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	60 81       	ld	r22, Z
    31ac:	71 81       	ldd	r23, Z+1	; 0x01
    31ae:	82 81       	ldd	r24, Z+2	; 0x02
    31b0:	93 81       	ldd	r25, Z+3	; 0x03
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	40 e2       	ldi	r20, 0x20	; 32
    31b8:	51 e4       	ldi	r21, 0x41	; 65
    31ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	8e 01       	movw	r16, r28
    31c4:	05 54       	subi	r16, 0x45	; 69
    31c6:	1f 4f       	sbci	r17, 0xFF	; 255
    31c8:	bc 01       	movw	r22, r24
    31ca:	cd 01       	movw	r24, r26
    31cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	f8 01       	movw	r30, r16
    31d6:	91 83       	std	Z+1, r25	; 0x01
    31d8:	80 83       	st	Z, r24
    31da:	1f c0       	rjmp	.+62     	; 0x321a <main+0xef4>
    31dc:	fe 01       	movw	r30, r28
    31de:	e7 54       	subi	r30, 0x47	; 71
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	80 e9       	ldi	r24, 0x90	; 144
    31e4:	91 e0       	ldi	r25, 0x01	; 1
    31e6:	91 83       	std	Z+1, r25	; 0x01
    31e8:	80 83       	st	Z, r24
    31ea:	fe 01       	movw	r30, r28
    31ec:	e7 54       	subi	r30, 0x47	; 71
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	80 81       	ld	r24, Z
    31f2:	91 81       	ldd	r25, Z+1	; 0x01
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	f1 f7       	brne	.-4      	; 0x31f4 <main+0xece>
    31f8:	fe 01       	movw	r30, r28
    31fa:	e7 54       	subi	r30, 0x47	; 71
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	91 83       	std	Z+1, r25	; 0x01
    3200:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3202:	de 01       	movw	r26, r28
    3204:	a5 54       	subi	r26, 0x45	; 69
    3206:	bf 4f       	sbci	r27, 0xFF	; 255
    3208:	fe 01       	movw	r30, r28
    320a:	e5 54       	subi	r30, 0x45	; 69
    320c:	ff 4f       	sbci	r31, 0xFF	; 255
    320e:	80 81       	ld	r24, Z
    3210:	91 81       	ldd	r25, Z+1	; 0x01
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	11 96       	adiw	r26, 0x01	; 1
    3216:	9c 93       	st	X, r25
    3218:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321a:	fe 01       	movw	r30, r28
    321c:	e5 54       	subi	r30, 0x45	; 69
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	80 81       	ld	r24, Z
    3222:	91 81       	ldd	r25, Z+1	; 0x01
    3224:	00 97       	sbiw	r24, 0x00	; 0
    3226:	d1 f6       	brne	.-76     	; 0x31dc <main+0xeb6>
    3228:	27 c0       	rjmp	.+78     	; 0x3278 <main+0xf52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    322a:	8e 01       	movw	r16, r28
    322c:	05 54       	subi	r16, 0x45	; 69
    322e:	1f 4f       	sbci	r17, 0xFF	; 255
    3230:	fe 01       	movw	r30, r28
    3232:	e3 54       	subi	r30, 0x43	; 67
    3234:	ff 4f       	sbci	r31, 0xFF	; 255
    3236:	60 81       	ld	r22, Z
    3238:	71 81       	ldd	r23, Z+1	; 0x01
    323a:	82 81       	ldd	r24, Z+2	; 0x02
    323c:	93 81       	ldd	r25, Z+3	; 0x03
    323e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	f8 01       	movw	r30, r16
    3248:	91 83       	std	Z+1, r25	; 0x01
    324a:	80 83       	st	Z, r24
    324c:	de 01       	movw	r26, r28
    324e:	a9 54       	subi	r26, 0x49	; 73
    3250:	bf 4f       	sbci	r27, 0xFF	; 255
    3252:	fe 01       	movw	r30, r28
    3254:	e5 54       	subi	r30, 0x45	; 69
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	80 81       	ld	r24, Z
    325a:	91 81       	ldd	r25, Z+1	; 0x01
    325c:	8d 93       	st	X+, r24
    325e:	9c 93       	st	X, r25
    3260:	fe 01       	movw	r30, r28
    3262:	e9 54       	subi	r30, 0x49	; 73
    3264:	ff 4f       	sbci	r31, 0xFF	; 255
    3266:	80 81       	ld	r24, Z
    3268:	91 81       	ldd	r25, Z+1	; 0x01
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	f1 f7       	brne	.-4      	; 0x326a <main+0xf44>
    326e:	fe 01       	movw	r30, r28
    3270:	e9 54       	subi	r30, 0x49	; 73
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	91 83       	std	Z+1, r25	; 0x01
    3276:	80 83       	st	Z, r24
									 _delay_ms(500);
									 LCD_SEND_COMMAND(0x01);
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									 LCD_VidSendStrig(" 0:Home");
    327e:	84 ed       	ldi	r24, 0xD4	; 212
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColTwo);
    3286:	82 e0       	ldi	r24, 0x02	; 2
    3288:	61 e0       	ldi	r22, 0x01	; 1
    328a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									 LCD_VidSendStrig("1:Garag");
    328e:	8c ed       	ldi	r24, 0xDC	; 220
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									 while(1)
									 {
									     read= KPD_u8GetPressedKey();
    3296:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    329a:	fe 01       	movw	r30, r28
    329c:	e4 5d       	subi	r30, 0xD4	; 212
    329e:	fe 4f       	sbci	r31, 0xFE	; 254
    32a0:	80 83       	st	Z, r24
										 if(read!=0xFF)
    32a2:	fe 01       	movw	r30, r28
    32a4:	e4 5d       	subi	r30, 0xD4	; 212
    32a6:	fe 4f       	sbci	r31, 0xFE	; 254
    32a8:	80 81       	ld	r24, Z
    32aa:	8f 3f       	cpi	r24, 0xFF	; 255
    32ac:	a1 f3       	breq	.-24     	; 0x3296 <main+0xf70>
										 {
											 if(read=='0')
    32ae:	fe 01       	movw	r30, r28
    32b0:	e4 5d       	subi	r30, 0xD4	; 212
    32b2:	fe 4f       	sbci	r31, 0xFE	; 254
    32b4:	80 81       	ld	r24, Z
    32b6:	80 33       	cpi	r24, 0x30	; 48
    32b8:	09 f0       	breq	.+2      	; 0x32bc <main+0xf96>
    32ba:	b5 c1       	rjmp	.+874    	; 0x3626 <main+0x1300>
											 {
												 //open the door
												 LCD_SEND_COMMAND(0x01);
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												 LCD_VidSendStrig("  Home Door ");
    32c2:	84 ee       	ldi	r24, 0xE4	; 228
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    32ca:	82 e0       	ldi	r24, 0x02	; 2
    32cc:	60 e0       	ldi	r22, 0x00	; 0
    32ce:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												 LCD_VidSendStrig("  Will OPEN");
    32d2:	81 ef       	ldi	r24, 0xF1	; 241
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 Timer1_VidTimer1SetOCR1(3999); //open the door
    32da:	8f e9       	ldi	r24, 0x9F	; 159
    32dc:	9f e0       	ldi	r25, 0x0F	; 15
    32de:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Timer1_VidTimer1SetOCR1>
    32e2:	fe 01       	movw	r30, r28
    32e4:	ed 54       	subi	r30, 0x4D	; 77
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	aa e7       	ldi	r26, 0x7A	; 122
    32ee:	b4 e4       	ldi	r27, 0x44	; 68
    32f0:	80 83       	st	Z, r24
    32f2:	91 83       	std	Z+1, r25	; 0x01
    32f4:	a2 83       	std	Z+2, r26	; 0x02
    32f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f8:	8e 01       	movw	r16, r28
    32fa:	01 55       	subi	r16, 0x51	; 81
    32fc:	1f 4f       	sbci	r17, 0xFF	; 255
    32fe:	fe 01       	movw	r30, r28
    3300:	ed 54       	subi	r30, 0x4D	; 77
    3302:	ff 4f       	sbci	r31, 0xFF	; 255
    3304:	60 81       	ld	r22, Z
    3306:	71 81       	ldd	r23, Z+1	; 0x01
    3308:	82 81       	ldd	r24, Z+2	; 0x02
    330a:	93 81       	ldd	r25, Z+3	; 0x03
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	4a e7       	ldi	r20, 0x7A	; 122
    3312:	55 e4       	ldi	r21, 0x45	; 69
    3314:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	f8 01       	movw	r30, r16
    331e:	80 83       	st	Z, r24
    3320:	91 83       	std	Z+1, r25	; 0x01
    3322:	a2 83       	std	Z+2, r26	; 0x02
    3324:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3326:	fe 01       	movw	r30, r28
    3328:	e1 55       	subi	r30, 0x51	; 81
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	60 81       	ld	r22, Z
    332e:	71 81       	ldd	r23, Z+1	; 0x01
    3330:	82 81       	ldd	r24, Z+2	; 0x02
    3332:	93 81       	ldd	r25, Z+3	; 0x03
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	40 e8       	ldi	r20, 0x80	; 128
    333a:	5f e3       	ldi	r21, 0x3F	; 63
    333c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3340:	88 23       	and	r24, r24
    3342:	44 f4       	brge	.+16     	; 0x3354 <main+0x102e>
		__ticks = 1;
    3344:	fe 01       	movw	r30, r28
    3346:	e3 55       	subi	r30, 0x53	; 83
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	91 83       	std	Z+1, r25	; 0x01
    3350:	80 83       	st	Z, r24
    3352:	64 c0       	rjmp	.+200    	; 0x341c <main+0x10f6>
	else if (__tmp > 65535)
    3354:	fe 01       	movw	r30, r28
    3356:	e1 55       	subi	r30, 0x51	; 81
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	60 81       	ld	r22, Z
    335c:	71 81       	ldd	r23, Z+1	; 0x01
    335e:	82 81       	ldd	r24, Z+2	; 0x02
    3360:	93 81       	ldd	r25, Z+3	; 0x03
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	3f ef       	ldi	r19, 0xFF	; 255
    3366:	4f e7       	ldi	r20, 0x7F	; 127
    3368:	57 e4       	ldi	r21, 0x47	; 71
    336a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    336e:	18 16       	cp	r1, r24
    3370:	0c f0       	brlt	.+2      	; 0x3374 <main+0x104e>
    3372:	43 c0       	rjmp	.+134    	; 0x33fa <main+0x10d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3374:	fe 01       	movw	r30, r28
    3376:	ed 54       	subi	r30, 0x4D	; 77
    3378:	ff 4f       	sbci	r31, 0xFF	; 255
    337a:	60 81       	ld	r22, Z
    337c:	71 81       	ldd	r23, Z+1	; 0x01
    337e:	82 81       	ldd	r24, Z+2	; 0x02
    3380:	93 81       	ldd	r25, Z+3	; 0x03
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	40 e2       	ldi	r20, 0x20	; 32
    3388:	51 e4       	ldi	r21, 0x41	; 65
    338a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	8e 01       	movw	r16, r28
    3394:	03 55       	subi	r16, 0x53	; 83
    3396:	1f 4f       	sbci	r17, 0xFF	; 255
    3398:	bc 01       	movw	r22, r24
    339a:	cd 01       	movw	r24, r26
    339c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	f8 01       	movw	r30, r16
    33a6:	91 83       	std	Z+1, r25	; 0x01
    33a8:	80 83       	st	Z, r24
    33aa:	1f c0       	rjmp	.+62     	; 0x33ea <main+0x10c4>
    33ac:	fe 01       	movw	r30, r28
    33ae:	e5 55       	subi	r30, 0x55	; 85
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	80 e9       	ldi	r24, 0x90	; 144
    33b4:	91 e0       	ldi	r25, 0x01	; 1
    33b6:	91 83       	std	Z+1, r25	; 0x01
    33b8:	80 83       	st	Z, r24
    33ba:	fe 01       	movw	r30, r28
    33bc:	e5 55       	subi	r30, 0x55	; 85
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	80 81       	ld	r24, Z
    33c2:	91 81       	ldd	r25, Z+1	; 0x01
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	f1 f7       	brne	.-4      	; 0x33c4 <main+0x109e>
    33c8:	fe 01       	movw	r30, r28
    33ca:	e5 55       	subi	r30, 0x55	; 85
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	91 83       	std	Z+1, r25	; 0x01
    33d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d2:	de 01       	movw	r26, r28
    33d4:	a3 55       	subi	r26, 0x53	; 83
    33d6:	bf 4f       	sbci	r27, 0xFF	; 255
    33d8:	fe 01       	movw	r30, r28
    33da:	e3 55       	subi	r30, 0x53	; 83
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	80 81       	ld	r24, Z
    33e0:	91 81       	ldd	r25, Z+1	; 0x01
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	11 96       	adiw	r26, 0x01	; 1
    33e6:	9c 93       	st	X, r25
    33e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ea:	fe 01       	movw	r30, r28
    33ec:	e3 55       	subi	r30, 0x53	; 83
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	80 81       	ld	r24, Z
    33f2:	91 81       	ldd	r25, Z+1	; 0x01
    33f4:	00 97       	sbiw	r24, 0x00	; 0
    33f6:	d1 f6       	brne	.-76     	; 0x33ac <main+0x1086>
    33f8:	27 c0       	rjmp	.+78     	; 0x3448 <main+0x1122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33fa:	8e 01       	movw	r16, r28
    33fc:	03 55       	subi	r16, 0x53	; 83
    33fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3400:	fe 01       	movw	r30, r28
    3402:	e1 55       	subi	r30, 0x51	; 81
    3404:	ff 4f       	sbci	r31, 0xFF	; 255
    3406:	60 81       	ld	r22, Z
    3408:	71 81       	ldd	r23, Z+1	; 0x01
    340a:	82 81       	ldd	r24, Z+2	; 0x02
    340c:	93 81       	ldd	r25, Z+3	; 0x03
    340e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	f8 01       	movw	r30, r16
    3418:	91 83       	std	Z+1, r25	; 0x01
    341a:	80 83       	st	Z, r24
    341c:	de 01       	movw	r26, r28
    341e:	a7 55       	subi	r26, 0x57	; 87
    3420:	bf 4f       	sbci	r27, 0xFF	; 255
    3422:	fe 01       	movw	r30, r28
    3424:	e3 55       	subi	r30, 0x53	; 83
    3426:	ff 4f       	sbci	r31, 0xFF	; 255
    3428:	80 81       	ld	r24, Z
    342a:	91 81       	ldd	r25, Z+1	; 0x01
    342c:	8d 93       	st	X+, r24
    342e:	9c 93       	st	X, r25
    3430:	fe 01       	movw	r30, r28
    3432:	e7 55       	subi	r30, 0x57	; 87
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	80 81       	ld	r24, Z
    3438:	91 81       	ldd	r25, Z+1	; 0x01
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	f1 f7       	brne	.-4      	; 0x343a <main+0x1114>
    343e:	fe 01       	movw	r30, r28
    3440:	e7 55       	subi	r30, 0x57	; 87
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	91 83       	std	Z+1, r25	; 0x01
    3446:	80 83       	st	Z, r24
												 _delay_ms(1000);
												 LCD_SEND_COMMAND(0x01);
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												 LCD_VidSendStrig("  Home Door ");
    344e:	84 ee       	ldi	r24, 0xE4	; 228
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3456:	82 e0       	ldi	r24, 0x02	; 2
    3458:	60 e0       	ldi	r22, 0x00	; 0
    345a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												 LCD_VidSendStrig("Will close again");
    345e:	8d ef       	ldi	r24, 0xFD	; 253
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 Timer1_VidTimer1SetOCR1(3000);//close the door again
    3466:	88 eb       	ldi	r24, 0xB8	; 184
    3468:	9b e0       	ldi	r25, 0x0B	; 11
    346a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Timer1_VidTimer1SetOCR1>
    346e:	fe 01       	movw	r30, r28
    3470:	eb 55       	subi	r30, 0x5B	; 91
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	aa ef       	ldi	r26, 0xFA	; 250
    347a:	b3 e4       	ldi	r27, 0x43	; 67
    347c:	80 83       	st	Z, r24
    347e:	91 83       	std	Z+1, r25	; 0x01
    3480:	a2 83       	std	Z+2, r26	; 0x02
    3482:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3484:	8e 01       	movw	r16, r28
    3486:	0f 55       	subi	r16, 0x5F	; 95
    3488:	1f 4f       	sbci	r17, 0xFF	; 255
    348a:	fe 01       	movw	r30, r28
    348c:	eb 55       	subi	r30, 0x5B	; 91
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	60 81       	ld	r22, Z
    3492:	71 81       	ldd	r23, Z+1	; 0x01
    3494:	82 81       	ldd	r24, Z+2	; 0x02
    3496:	93 81       	ldd	r25, Z+3	; 0x03
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	4a e7       	ldi	r20, 0x7A	; 122
    349e:	55 e4       	ldi	r21, 0x45	; 69
    34a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	f8 01       	movw	r30, r16
    34aa:	80 83       	st	Z, r24
    34ac:	91 83       	std	Z+1, r25	; 0x01
    34ae:	a2 83       	std	Z+2, r26	; 0x02
    34b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34b2:	fe 01       	movw	r30, r28
    34b4:	ef 55       	subi	r30, 0x5F	; 95
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	60 81       	ld	r22, Z
    34ba:	71 81       	ldd	r23, Z+1	; 0x01
    34bc:	82 81       	ldd	r24, Z+2	; 0x02
    34be:	93 81       	ldd	r25, Z+3	; 0x03
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	40 e8       	ldi	r20, 0x80	; 128
    34c6:	5f e3       	ldi	r21, 0x3F	; 63
    34c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    34cc:	88 23       	and	r24, r24
    34ce:	44 f4       	brge	.+16     	; 0x34e0 <main+0x11ba>
		__ticks = 1;
    34d0:	fe 01       	movw	r30, r28
    34d2:	e1 56       	subi	r30, 0x61	; 97
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	91 83       	std	Z+1, r25	; 0x01
    34dc:	80 83       	st	Z, r24
    34de:	64 c0       	rjmp	.+200    	; 0x35a8 <main+0x1282>
	else if (__tmp > 65535)
    34e0:	fe 01       	movw	r30, r28
    34e2:	ef 55       	subi	r30, 0x5F	; 95
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	60 81       	ld	r22, Z
    34e8:	71 81       	ldd	r23, Z+1	; 0x01
    34ea:	82 81       	ldd	r24, Z+2	; 0x02
    34ec:	93 81       	ldd	r25, Z+3	; 0x03
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	3f ef       	ldi	r19, 0xFF	; 255
    34f2:	4f e7       	ldi	r20, 0x7F	; 127
    34f4:	57 e4       	ldi	r21, 0x47	; 71
    34f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    34fa:	18 16       	cp	r1, r24
    34fc:	0c f0       	brlt	.+2      	; 0x3500 <main+0x11da>
    34fe:	43 c0       	rjmp	.+134    	; 0x3586 <main+0x1260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3500:	fe 01       	movw	r30, r28
    3502:	eb 55       	subi	r30, 0x5B	; 91
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	60 81       	ld	r22, Z
    3508:	71 81       	ldd	r23, Z+1	; 0x01
    350a:	82 81       	ldd	r24, Z+2	; 0x02
    350c:	93 81       	ldd	r25, Z+3	; 0x03
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	40 e2       	ldi	r20, 0x20	; 32
    3514:	51 e4       	ldi	r21, 0x41	; 65
    3516:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    351a:	dc 01       	movw	r26, r24
    351c:	cb 01       	movw	r24, r22
    351e:	8e 01       	movw	r16, r28
    3520:	01 56       	subi	r16, 0x61	; 97
    3522:	1f 4f       	sbci	r17, 0xFF	; 255
    3524:	bc 01       	movw	r22, r24
    3526:	cd 01       	movw	r24, r26
    3528:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	f8 01       	movw	r30, r16
    3532:	91 83       	std	Z+1, r25	; 0x01
    3534:	80 83       	st	Z, r24
    3536:	1f c0       	rjmp	.+62     	; 0x3576 <main+0x1250>
    3538:	fe 01       	movw	r30, r28
    353a:	e3 56       	subi	r30, 0x63	; 99
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	80 e9       	ldi	r24, 0x90	; 144
    3540:	91 e0       	ldi	r25, 0x01	; 1
    3542:	91 83       	std	Z+1, r25	; 0x01
    3544:	80 83       	st	Z, r24
    3546:	fe 01       	movw	r30, r28
    3548:	e3 56       	subi	r30, 0x63	; 99
    354a:	ff 4f       	sbci	r31, 0xFF	; 255
    354c:	80 81       	ld	r24, Z
    354e:	91 81       	ldd	r25, Z+1	; 0x01
    3550:	01 97       	sbiw	r24, 0x01	; 1
    3552:	f1 f7       	brne	.-4      	; 0x3550 <main+0x122a>
    3554:	fe 01       	movw	r30, r28
    3556:	e3 56       	subi	r30, 0x63	; 99
    3558:	ff 4f       	sbci	r31, 0xFF	; 255
    355a:	91 83       	std	Z+1, r25	; 0x01
    355c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    355e:	de 01       	movw	r26, r28
    3560:	a1 56       	subi	r26, 0x61	; 97
    3562:	bf 4f       	sbci	r27, 0xFF	; 255
    3564:	fe 01       	movw	r30, r28
    3566:	e1 56       	subi	r30, 0x61	; 97
    3568:	ff 4f       	sbci	r31, 0xFF	; 255
    356a:	80 81       	ld	r24, Z
    356c:	91 81       	ldd	r25, Z+1	; 0x01
    356e:	01 97       	sbiw	r24, 0x01	; 1
    3570:	11 96       	adiw	r26, 0x01	; 1
    3572:	9c 93       	st	X, r25
    3574:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3576:	fe 01       	movw	r30, r28
    3578:	e1 56       	subi	r30, 0x61	; 97
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	80 81       	ld	r24, Z
    357e:	91 81       	ldd	r25, Z+1	; 0x01
    3580:	00 97       	sbiw	r24, 0x00	; 0
    3582:	d1 f6       	brne	.-76     	; 0x3538 <main+0x1212>
    3584:	27 c0       	rjmp	.+78     	; 0x35d4 <main+0x12ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3586:	8e 01       	movw	r16, r28
    3588:	01 56       	subi	r16, 0x61	; 97
    358a:	1f 4f       	sbci	r17, 0xFF	; 255
    358c:	fe 01       	movw	r30, r28
    358e:	ef 55       	subi	r30, 0x5F	; 95
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	60 81       	ld	r22, Z
    3594:	71 81       	ldd	r23, Z+1	; 0x01
    3596:	82 81       	ldd	r24, Z+2	; 0x02
    3598:	93 81       	ldd	r25, Z+3	; 0x03
    359a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	f8 01       	movw	r30, r16
    35a4:	91 83       	std	Z+1, r25	; 0x01
    35a6:	80 83       	st	Z, r24
    35a8:	de 01       	movw	r26, r28
    35aa:	a5 56       	subi	r26, 0x65	; 101
    35ac:	bf 4f       	sbci	r27, 0xFF	; 255
    35ae:	fe 01       	movw	r30, r28
    35b0:	e1 56       	subi	r30, 0x61	; 97
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	80 81       	ld	r24, Z
    35b6:	91 81       	ldd	r25, Z+1	; 0x01
    35b8:	8d 93       	st	X+, r24
    35ba:	9c 93       	st	X, r25
    35bc:	fe 01       	movw	r30, r28
    35be:	e5 56       	subi	r30, 0x65	; 101
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	80 81       	ld	r24, Z
    35c4:	91 81       	ldd	r25, Z+1	; 0x01
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	f1 f7       	brne	.-4      	; 0x35c6 <main+0x12a0>
    35ca:	fe 01       	movw	r30, r28
    35cc:	e5 56       	subi	r30, 0x65	; 101
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	91 83       	std	Z+1, r25	; 0x01
    35d2:	80 83       	st	Z, r24
												 _delay_ms(500);
												 USART_VIDSendChar(2);
    35d4:	82 e0       	ldi	r24, 0x02	; 2
    35d6:	0e 94 66 11 	call	0x22cc	; 0x22cc <USART_VIDSendChar>
												 DIO_VidSetPinValue(DIO_PORTA,DIO_PIN7 ,DIO_LOW); //admin led off
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	67 e0       	ldi	r22, 0x07	; 7
    35de:	40 e0       	ldi	r20, 0x00	; 0
    35e0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
												 LCD_SEND_COMMAND(0x01);
    35e4:	81 e0       	ldi	r24, 0x01	; 1
    35e6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												 LCD_VidSendStrig(" Select Mode:");
    35ea:	8d e7       	ldi	r24, 0x7D	; 125
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    35f2:	82 e0       	ldi	r24, 0x02	; 2
    35f4:	60 e0       	ldi	r22, 0x00	; 0
    35f6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												 LCD_VidSendStrig("0:Admin 1:Guest");
    35fa:	8b e8       	ldi	r24, 0x8B	; 139
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 flag=0;
    3602:	fe 01       	movw	r30, r28
    3604:	e7 5d       	subi	r30, 0xD7	; 215
    3606:	fe 4f       	sbci	r31, 0xFE	; 254
    3608:	10 82       	st	Z, r1
												 flag2=0;
    360a:	fe 01       	movw	r30, r28
    360c:	e8 5d       	subi	r30, 0xD8	; 216
    360e:	fe 4f       	sbci	r31, 0xFE	; 254
    3610:	10 82       	st	Z, r1
												 counter=0;
    3612:	fe 01       	movw	r30, r28
    3614:	e6 5d       	subi	r30, 0xD6	; 214
    3616:	fe 4f       	sbci	r31, 0xFE	; 254
    3618:	10 82       	st	Z, r1
												 pass=0;
    361a:	fe 01       	movw	r30, r28
    361c:	e3 5d       	subi	r30, 0xD3	; 211
    361e:	fe 4f       	sbci	r31, 0xFE	; 254
    3620:	11 82       	std	Z+1, r1	; 0x01
    3622:	10 82       	st	Z, r1
    3624:	79 c4       	rjmp	.+2290   	; 0x3f18 <main+0x1bf2>
												 break;
											 }
											 else if(read==1)
    3626:	fe 01       	movw	r30, r28
    3628:	e4 5d       	subi	r30, 0xD4	; 212
    362a:	fe 4f       	sbci	r31, 0xFE	; 254
    362c:	80 81       	ld	r24, Z
    362e:	81 30       	cpi	r24, 0x01	; 1
    3630:	09 f0       	breq	.+2      	; 0x3634 <main+0x130e>
    3632:	b2 c1       	rjmp	.+868    	; 0x3998 <main+0x1672>
											 {
												 //open the garag
												 LCD_SEND_COMMAND(0x01);
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												 LCD_VidSendStrig(" Garag Door ");
    363a:	8e e0       	ldi	r24, 0x0E	; 14
    363c:	91 e0       	ldi	r25, 0x01	; 1
    363e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3642:	82 e0       	ldi	r24, 0x02	; 2
    3644:	60 e0       	ldi	r22, 0x00	; 0
    3646:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												 LCD_VidSendStrig(" Will OPEN");
    364a:	8b e1       	ldi	r24, 0x1B	; 27
    364c:	91 e0       	ldi	r25, 0x01	; 1
    364e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 Timer1_VidTimer1SetOCR1B(3999); //open the door
    3652:	8f e9       	ldi	r24, 0x9F	; 159
    3654:	9f e0       	ldi	r25, 0x0F	; 15
    3656:	0e 94 fe 10 	call	0x21fc	; 0x21fc <Timer1_VidTimer1SetOCR1B>
    365a:	fe 01       	movw	r30, r28
    365c:	e9 56       	subi	r30, 0x69	; 105
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	aa e7       	ldi	r26, 0x7A	; 122
    3666:	b4 e4       	ldi	r27, 0x44	; 68
    3668:	80 83       	st	Z, r24
    366a:	91 83       	std	Z+1, r25	; 0x01
    366c:	a2 83       	std	Z+2, r26	; 0x02
    366e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3670:	8e 01       	movw	r16, r28
    3672:	0d 56       	subi	r16, 0x6D	; 109
    3674:	1f 4f       	sbci	r17, 0xFF	; 255
    3676:	fe 01       	movw	r30, r28
    3678:	e9 56       	subi	r30, 0x69	; 105
    367a:	ff 4f       	sbci	r31, 0xFF	; 255
    367c:	60 81       	ld	r22, Z
    367e:	71 81       	ldd	r23, Z+1	; 0x01
    3680:	82 81       	ldd	r24, Z+2	; 0x02
    3682:	93 81       	ldd	r25, Z+3	; 0x03
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	4a e7       	ldi	r20, 0x7A	; 122
    368a:	55 e4       	ldi	r21, 0x45	; 69
    368c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	f8 01       	movw	r30, r16
    3696:	80 83       	st	Z, r24
    3698:	91 83       	std	Z+1, r25	; 0x01
    369a:	a2 83       	std	Z+2, r26	; 0x02
    369c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    369e:	fe 01       	movw	r30, r28
    36a0:	ed 56       	subi	r30, 0x6D	; 109
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	60 81       	ld	r22, Z
    36a6:	71 81       	ldd	r23, Z+1	; 0x01
    36a8:	82 81       	ldd	r24, Z+2	; 0x02
    36aa:	93 81       	ldd	r25, Z+3	; 0x03
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	40 e8       	ldi	r20, 0x80	; 128
    36b2:	5f e3       	ldi	r21, 0x3F	; 63
    36b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    36b8:	88 23       	and	r24, r24
    36ba:	44 f4       	brge	.+16     	; 0x36cc <main+0x13a6>
		__ticks = 1;
    36bc:	fe 01       	movw	r30, r28
    36be:	ef 56       	subi	r30, 0x6F	; 111
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	91 83       	std	Z+1, r25	; 0x01
    36c8:	80 83       	st	Z, r24
    36ca:	64 c0       	rjmp	.+200    	; 0x3794 <main+0x146e>
	else if (__tmp > 65535)
    36cc:	fe 01       	movw	r30, r28
    36ce:	ed 56       	subi	r30, 0x6D	; 109
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	60 81       	ld	r22, Z
    36d4:	71 81       	ldd	r23, Z+1	; 0x01
    36d6:	82 81       	ldd	r24, Z+2	; 0x02
    36d8:	93 81       	ldd	r25, Z+3	; 0x03
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	3f ef       	ldi	r19, 0xFF	; 255
    36de:	4f e7       	ldi	r20, 0x7F	; 127
    36e0:	57 e4       	ldi	r21, 0x47	; 71
    36e2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    36e6:	18 16       	cp	r1, r24
    36e8:	0c f0       	brlt	.+2      	; 0x36ec <main+0x13c6>
    36ea:	43 c0       	rjmp	.+134    	; 0x3772 <main+0x144c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ec:	fe 01       	movw	r30, r28
    36ee:	e9 56       	subi	r30, 0x69	; 105
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	60 81       	ld	r22, Z
    36f4:	71 81       	ldd	r23, Z+1	; 0x01
    36f6:	82 81       	ldd	r24, Z+2	; 0x02
    36f8:	93 81       	ldd	r25, Z+3	; 0x03
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	40 e2       	ldi	r20, 0x20	; 32
    3700:	51 e4       	ldi	r21, 0x41	; 65
    3702:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3706:	dc 01       	movw	r26, r24
    3708:	cb 01       	movw	r24, r22
    370a:	8e 01       	movw	r16, r28
    370c:	0f 56       	subi	r16, 0x6F	; 111
    370e:	1f 4f       	sbci	r17, 0xFF	; 255
    3710:	bc 01       	movw	r22, r24
    3712:	cd 01       	movw	r24, r26
    3714:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	f8 01       	movw	r30, r16
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24
    3722:	1f c0       	rjmp	.+62     	; 0x3762 <main+0x143c>
    3724:	fe 01       	movw	r30, r28
    3726:	e1 57       	subi	r30, 0x71	; 113
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	80 e9       	ldi	r24, 0x90	; 144
    372c:	91 e0       	ldi	r25, 0x01	; 1
    372e:	91 83       	std	Z+1, r25	; 0x01
    3730:	80 83       	st	Z, r24
    3732:	fe 01       	movw	r30, r28
    3734:	e1 57       	subi	r30, 0x71	; 113
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	80 81       	ld	r24, Z
    373a:	91 81       	ldd	r25, Z+1	; 0x01
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	f1 f7       	brne	.-4      	; 0x373c <main+0x1416>
    3740:	fe 01       	movw	r30, r28
    3742:	e1 57       	subi	r30, 0x71	; 113
    3744:	ff 4f       	sbci	r31, 0xFF	; 255
    3746:	91 83       	std	Z+1, r25	; 0x01
    3748:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    374a:	de 01       	movw	r26, r28
    374c:	af 56       	subi	r26, 0x6F	; 111
    374e:	bf 4f       	sbci	r27, 0xFF	; 255
    3750:	fe 01       	movw	r30, r28
    3752:	ef 56       	subi	r30, 0x6F	; 111
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	80 81       	ld	r24, Z
    3758:	91 81       	ldd	r25, Z+1	; 0x01
    375a:	01 97       	sbiw	r24, 0x01	; 1
    375c:	11 96       	adiw	r26, 0x01	; 1
    375e:	9c 93       	st	X, r25
    3760:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3762:	fe 01       	movw	r30, r28
    3764:	ef 56       	subi	r30, 0x6F	; 111
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	80 81       	ld	r24, Z
    376a:	91 81       	ldd	r25, Z+1	; 0x01
    376c:	00 97       	sbiw	r24, 0x00	; 0
    376e:	d1 f6       	brne	.-76     	; 0x3724 <main+0x13fe>
    3770:	27 c0       	rjmp	.+78     	; 0x37c0 <main+0x149a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3772:	8e 01       	movw	r16, r28
    3774:	0f 56       	subi	r16, 0x6F	; 111
    3776:	1f 4f       	sbci	r17, 0xFF	; 255
    3778:	fe 01       	movw	r30, r28
    377a:	ed 56       	subi	r30, 0x6D	; 109
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	60 81       	ld	r22, Z
    3780:	71 81       	ldd	r23, Z+1	; 0x01
    3782:	82 81       	ldd	r24, Z+2	; 0x02
    3784:	93 81       	ldd	r25, Z+3	; 0x03
    3786:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	f8 01       	movw	r30, r16
    3790:	91 83       	std	Z+1, r25	; 0x01
    3792:	80 83       	st	Z, r24
    3794:	de 01       	movw	r26, r28
    3796:	a3 57       	subi	r26, 0x73	; 115
    3798:	bf 4f       	sbci	r27, 0xFF	; 255
    379a:	fe 01       	movw	r30, r28
    379c:	ef 56       	subi	r30, 0x6F	; 111
    379e:	ff 4f       	sbci	r31, 0xFF	; 255
    37a0:	80 81       	ld	r24, Z
    37a2:	91 81       	ldd	r25, Z+1	; 0x01
    37a4:	8d 93       	st	X+, r24
    37a6:	9c 93       	st	X, r25
    37a8:	fe 01       	movw	r30, r28
    37aa:	e3 57       	subi	r30, 0x73	; 115
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	80 81       	ld	r24, Z
    37b0:	91 81       	ldd	r25, Z+1	; 0x01
    37b2:	01 97       	sbiw	r24, 0x01	; 1
    37b4:	f1 f7       	brne	.-4      	; 0x37b2 <main+0x148c>
    37b6:	fe 01       	movw	r30, r28
    37b8:	e3 57       	subi	r30, 0x73	; 115
    37ba:	ff 4f       	sbci	r31, 0xFF	; 255
    37bc:	91 83       	std	Z+1, r25	; 0x01
    37be:	80 83       	st	Z, r24
												 _delay_ms(1000);
												 LCD_SEND_COMMAND(0x01);
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												 LCD_VidSendStrig("  Garag Door ");
    37c6:	86 e2       	ldi	r24, 0x26	; 38
    37c8:	91 e0       	ldi	r25, 0x01	; 1
    37ca:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    37ce:	82 e0       	ldi	r24, 0x02	; 2
    37d0:	60 e0       	ldi	r22, 0x00	; 0
    37d2:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												 LCD_VidSendStrig("Will close again");
    37d6:	8d ef       	ldi	r24, 0xFD	; 253
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 Timer1_VidTimer1SetOCR1B(3000);//close the GARAG again
    37de:	88 eb       	ldi	r24, 0xB8	; 184
    37e0:	9b e0       	ldi	r25, 0x0B	; 11
    37e2:	0e 94 fe 10 	call	0x21fc	; 0x21fc <Timer1_VidTimer1SetOCR1B>
    37e6:	fe 01       	movw	r30, r28
    37e8:	e7 57       	subi	r30, 0x77	; 119
    37ea:	ff 4f       	sbci	r31, 0xFF	; 255
    37ec:	80 e0       	ldi	r24, 0x00	; 0
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	aa ef       	ldi	r26, 0xFA	; 250
    37f2:	b3 e4       	ldi	r27, 0x43	; 67
    37f4:	80 83       	st	Z, r24
    37f6:	91 83       	std	Z+1, r25	; 0x01
    37f8:	a2 83       	std	Z+2, r26	; 0x02
    37fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37fc:	8e 01       	movw	r16, r28
    37fe:	0b 57       	subi	r16, 0x7B	; 123
    3800:	1f 4f       	sbci	r17, 0xFF	; 255
    3802:	fe 01       	movw	r30, r28
    3804:	e7 57       	subi	r30, 0x77	; 119
    3806:	ff 4f       	sbci	r31, 0xFF	; 255
    3808:	60 81       	ld	r22, Z
    380a:	71 81       	ldd	r23, Z+1	; 0x01
    380c:	82 81       	ldd	r24, Z+2	; 0x02
    380e:	93 81       	ldd	r25, Z+3	; 0x03
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	4a e7       	ldi	r20, 0x7A	; 122
    3816:	55 e4       	ldi	r21, 0x45	; 69
    3818:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	f8 01       	movw	r30, r16
    3822:	80 83       	st	Z, r24
    3824:	91 83       	std	Z+1, r25	; 0x01
    3826:	a2 83       	std	Z+2, r26	; 0x02
    3828:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    382a:	fe 01       	movw	r30, r28
    382c:	eb 57       	subi	r30, 0x7B	; 123
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	60 81       	ld	r22, Z
    3832:	71 81       	ldd	r23, Z+1	; 0x01
    3834:	82 81       	ldd	r24, Z+2	; 0x02
    3836:	93 81       	ldd	r25, Z+3	; 0x03
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	40 e8       	ldi	r20, 0x80	; 128
    383e:	5f e3       	ldi	r21, 0x3F	; 63
    3840:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3844:	88 23       	and	r24, r24
    3846:	44 f4       	brge	.+16     	; 0x3858 <main+0x1532>
		__ticks = 1;
    3848:	fe 01       	movw	r30, r28
    384a:	ed 57       	subi	r30, 0x7D	; 125
    384c:	ff 4f       	sbci	r31, 0xFF	; 255
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	91 83       	std	Z+1, r25	; 0x01
    3854:	80 83       	st	Z, r24
    3856:	64 c0       	rjmp	.+200    	; 0x3920 <main+0x15fa>
	else if (__tmp > 65535)
    3858:	fe 01       	movw	r30, r28
    385a:	eb 57       	subi	r30, 0x7B	; 123
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	60 81       	ld	r22, Z
    3860:	71 81       	ldd	r23, Z+1	; 0x01
    3862:	82 81       	ldd	r24, Z+2	; 0x02
    3864:	93 81       	ldd	r25, Z+3	; 0x03
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	3f ef       	ldi	r19, 0xFF	; 255
    386a:	4f e7       	ldi	r20, 0x7F	; 127
    386c:	57 e4       	ldi	r21, 0x47	; 71
    386e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3872:	18 16       	cp	r1, r24
    3874:	0c f0       	brlt	.+2      	; 0x3878 <main+0x1552>
    3876:	43 c0       	rjmp	.+134    	; 0x38fe <main+0x15d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3878:	fe 01       	movw	r30, r28
    387a:	e7 57       	subi	r30, 0x77	; 119
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	60 81       	ld	r22, Z
    3880:	71 81       	ldd	r23, Z+1	; 0x01
    3882:	82 81       	ldd	r24, Z+2	; 0x02
    3884:	93 81       	ldd	r25, Z+3	; 0x03
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	40 e2       	ldi	r20, 0x20	; 32
    388c:	51 e4       	ldi	r21, 0x41	; 65
    388e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3892:	dc 01       	movw	r26, r24
    3894:	cb 01       	movw	r24, r22
    3896:	8e 01       	movw	r16, r28
    3898:	0d 57       	subi	r16, 0x7D	; 125
    389a:	1f 4f       	sbci	r17, 0xFF	; 255
    389c:	bc 01       	movw	r22, r24
    389e:	cd 01       	movw	r24, r26
    38a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38a4:	dc 01       	movw	r26, r24
    38a6:	cb 01       	movw	r24, r22
    38a8:	f8 01       	movw	r30, r16
    38aa:	91 83       	std	Z+1, r25	; 0x01
    38ac:	80 83       	st	Z, r24
    38ae:	1f c0       	rjmp	.+62     	; 0x38ee <main+0x15c8>
    38b0:	fe 01       	movw	r30, r28
    38b2:	ef 57       	subi	r30, 0x7F	; 127
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	80 e9       	ldi	r24, 0x90	; 144
    38b8:	91 e0       	ldi	r25, 0x01	; 1
    38ba:	91 83       	std	Z+1, r25	; 0x01
    38bc:	80 83       	st	Z, r24
    38be:	fe 01       	movw	r30, r28
    38c0:	ef 57       	subi	r30, 0x7F	; 127
    38c2:	ff 4f       	sbci	r31, 0xFF	; 255
    38c4:	80 81       	ld	r24, Z
    38c6:	91 81       	ldd	r25, Z+1	; 0x01
    38c8:	01 97       	sbiw	r24, 0x01	; 1
    38ca:	f1 f7       	brne	.-4      	; 0x38c8 <main+0x15a2>
    38cc:	fe 01       	movw	r30, r28
    38ce:	ef 57       	subi	r30, 0x7F	; 127
    38d0:	ff 4f       	sbci	r31, 0xFF	; 255
    38d2:	91 83       	std	Z+1, r25	; 0x01
    38d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38d6:	de 01       	movw	r26, r28
    38d8:	ad 57       	subi	r26, 0x7D	; 125
    38da:	bf 4f       	sbci	r27, 0xFF	; 255
    38dc:	fe 01       	movw	r30, r28
    38de:	ed 57       	subi	r30, 0x7D	; 125
    38e0:	ff 4f       	sbci	r31, 0xFF	; 255
    38e2:	80 81       	ld	r24, Z
    38e4:	91 81       	ldd	r25, Z+1	; 0x01
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	11 96       	adiw	r26, 0x01	; 1
    38ea:	9c 93       	st	X, r25
    38ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ee:	fe 01       	movw	r30, r28
    38f0:	ed 57       	subi	r30, 0x7D	; 125
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	80 81       	ld	r24, Z
    38f6:	91 81       	ldd	r25, Z+1	; 0x01
    38f8:	00 97       	sbiw	r24, 0x00	; 0
    38fa:	d1 f6       	brne	.-76     	; 0x38b0 <main+0x158a>
    38fc:	27 c0       	rjmp	.+78     	; 0x394c <main+0x1626>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38fe:	8e 01       	movw	r16, r28
    3900:	0d 57       	subi	r16, 0x7D	; 125
    3902:	1f 4f       	sbci	r17, 0xFF	; 255
    3904:	fe 01       	movw	r30, r28
    3906:	eb 57       	subi	r30, 0x7B	; 123
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	60 81       	ld	r22, Z
    390c:	71 81       	ldd	r23, Z+1	; 0x01
    390e:	82 81       	ldd	r24, Z+2	; 0x02
    3910:	93 81       	ldd	r25, Z+3	; 0x03
    3912:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	f8 01       	movw	r30, r16
    391c:	91 83       	std	Z+1, r25	; 0x01
    391e:	80 83       	st	Z, r24
    3920:	de 01       	movw	r26, r28
    3922:	a1 58       	subi	r26, 0x81	; 129
    3924:	bf 4f       	sbci	r27, 0xFF	; 255
    3926:	fe 01       	movw	r30, r28
    3928:	ed 57       	subi	r30, 0x7D	; 125
    392a:	ff 4f       	sbci	r31, 0xFF	; 255
    392c:	80 81       	ld	r24, Z
    392e:	91 81       	ldd	r25, Z+1	; 0x01
    3930:	8d 93       	st	X+, r24
    3932:	9c 93       	st	X, r25
    3934:	fe 01       	movw	r30, r28
    3936:	e1 58       	subi	r30, 0x81	; 129
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	80 81       	ld	r24, Z
    393c:	91 81       	ldd	r25, Z+1	; 0x01
    393e:	01 97       	sbiw	r24, 0x01	; 1
    3940:	f1 f7       	brne	.-4      	; 0x393e <main+0x1618>
    3942:	fe 01       	movw	r30, r28
    3944:	e1 58       	subi	r30, 0x81	; 129
    3946:	ff 4f       	sbci	r31, 0xFF	; 255
    3948:	91 83       	std	Z+1, r25	; 0x01
    394a:	80 83       	st	Z, r24
												 _delay_ms(500);
												 DIO_VidSetPinValue(DIO_PORTA,DIO_PIN7 ,DIO_LOW); //admin led off
    394c:	80 e0       	ldi	r24, 0x00	; 0
    394e:	67 e0       	ldi	r22, 0x07	; 7
    3950:	40 e0       	ldi	r20, 0x00	; 0
    3952:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
												 LCD_SEND_COMMAND(0x01);
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												 LCD_VidSendStrig(" Select Mode:");
    395c:	8d e7       	ldi	r24, 0x7D	; 125
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3964:	82 e0       	ldi	r24, 0x02	; 2
    3966:	60 e0       	ldi	r22, 0x00	; 0
    3968:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												 LCD_VidSendStrig("0:Admin 1:Guest");
    396c:	8b e8       	ldi	r24, 0x8B	; 139
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												 flag=0;
    3974:	fe 01       	movw	r30, r28
    3976:	e7 5d       	subi	r30, 0xD7	; 215
    3978:	fe 4f       	sbci	r31, 0xFE	; 254
    397a:	10 82       	st	Z, r1
												 flag2=0;
    397c:	fe 01       	movw	r30, r28
    397e:	e8 5d       	subi	r30, 0xD8	; 216
    3980:	fe 4f       	sbci	r31, 0xFE	; 254
    3982:	10 82       	st	Z, r1
												 counter=0;
    3984:	fe 01       	movw	r30, r28
    3986:	e6 5d       	subi	r30, 0xD6	; 214
    3988:	fe 4f       	sbci	r31, 0xFE	; 254
    398a:	10 82       	st	Z, r1
												 pass=0;
    398c:	fe 01       	movw	r30, r28
    398e:	e3 5d       	subi	r30, 0xD3	; 211
    3990:	fe 4f       	sbci	r31, 0xFE	; 254
    3992:	11 82       	std	Z+1, r1	; 0x01
    3994:	10 82       	st	Z, r1
    3996:	c0 c2       	rjmp	.+1408   	; 0x3f18 <main+0x1bf2>
												 break;
											 }
											 else
											 {
												    //wrong entry
													LCD_SEND_COMMAND(0x01);
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
													LCD_VidSendStrig(" wrong choice");
    399e:	84 e3       	ldi	r24, 0x34	; 52
    39a0:	91 e0       	ldi	r25, 0x01	; 1
    39a2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    39a6:	82 e0       	ldi	r24, 0x02	; 2
    39a8:	60 e0       	ldi	r22, 0x00	; 0
    39aa:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
													LCD_VidSendStrig("choose again");
    39ae:	82 e4       	ldi	r24, 0x42	; 66
    39b0:	91 e0       	ldi	r25, 0x01	; 1
    39b2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    39b6:	fe 01       	movw	r30, r28
    39b8:	e5 58       	subi	r30, 0x85	; 133
    39ba:	ff 4f       	sbci	r31, 0xFF	; 255
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	aa ef       	ldi	r26, 0xFA	; 250
    39c2:	b3 e4       	ldi	r27, 0x43	; 67
    39c4:	80 83       	st	Z, r24
    39c6:	91 83       	std	Z+1, r25	; 0x01
    39c8:	a2 83       	std	Z+2, r26	; 0x02
    39ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39cc:	8e 01       	movw	r16, r28
    39ce:	09 58       	subi	r16, 0x89	; 137
    39d0:	1f 4f       	sbci	r17, 0xFF	; 255
    39d2:	fe 01       	movw	r30, r28
    39d4:	e5 58       	subi	r30, 0x85	; 133
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	60 81       	ld	r22, Z
    39da:	71 81       	ldd	r23, Z+1	; 0x01
    39dc:	82 81       	ldd	r24, Z+2	; 0x02
    39de:	93 81       	ldd	r25, Z+3	; 0x03
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	4a e7       	ldi	r20, 0x7A	; 122
    39e6:	55 e4       	ldi	r21, 0x45	; 69
    39e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39ec:	dc 01       	movw	r26, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	f8 01       	movw	r30, r16
    39f2:	80 83       	st	Z, r24
    39f4:	91 83       	std	Z+1, r25	; 0x01
    39f6:	a2 83       	std	Z+2, r26	; 0x02
    39f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39fa:	fe 01       	movw	r30, r28
    39fc:	e9 58       	subi	r30, 0x89	; 137
    39fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3a00:	60 81       	ld	r22, Z
    3a02:	71 81       	ldd	r23, Z+1	; 0x01
    3a04:	82 81       	ldd	r24, Z+2	; 0x02
    3a06:	93 81       	ldd	r25, Z+3	; 0x03
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	40 e8       	ldi	r20, 0x80	; 128
    3a0e:	5f e3       	ldi	r21, 0x3F	; 63
    3a10:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3a14:	88 23       	and	r24, r24
    3a16:	44 f4       	brge	.+16     	; 0x3a28 <main+0x1702>
		__ticks = 1;
    3a18:	fe 01       	movw	r30, r28
    3a1a:	eb 58       	subi	r30, 0x8B	; 139
    3a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1e:	81 e0       	ldi	r24, 0x01	; 1
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	91 83       	std	Z+1, r25	; 0x01
    3a24:	80 83       	st	Z, r24
    3a26:	64 c0       	rjmp	.+200    	; 0x3af0 <main+0x17ca>
	else if (__tmp > 65535)
    3a28:	fe 01       	movw	r30, r28
    3a2a:	e9 58       	subi	r30, 0x89	; 137
    3a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2e:	60 81       	ld	r22, Z
    3a30:	71 81       	ldd	r23, Z+1	; 0x01
    3a32:	82 81       	ldd	r24, Z+2	; 0x02
    3a34:	93 81       	ldd	r25, Z+3	; 0x03
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	3f ef       	ldi	r19, 0xFF	; 255
    3a3a:	4f e7       	ldi	r20, 0x7F	; 127
    3a3c:	57 e4       	ldi	r21, 0x47	; 71
    3a3e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3a42:	18 16       	cp	r1, r24
    3a44:	0c f0       	brlt	.+2      	; 0x3a48 <main+0x1722>
    3a46:	43 c0       	rjmp	.+134    	; 0x3ace <main+0x17a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a48:	fe 01       	movw	r30, r28
    3a4a:	e5 58       	subi	r30, 0x85	; 133
    3a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4e:	60 81       	ld	r22, Z
    3a50:	71 81       	ldd	r23, Z+1	; 0x01
    3a52:	82 81       	ldd	r24, Z+2	; 0x02
    3a54:	93 81       	ldd	r25, Z+3	; 0x03
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	40 e2       	ldi	r20, 0x20	; 32
    3a5c:	51 e4       	ldi	r21, 0x41	; 65
    3a5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	8e 01       	movw	r16, r28
    3a68:	0b 58       	subi	r16, 0x8B	; 139
    3a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6c:	bc 01       	movw	r22, r24
    3a6e:	cd 01       	movw	r24, r26
    3a70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	f8 01       	movw	r30, r16
    3a7a:	91 83       	std	Z+1, r25	; 0x01
    3a7c:	80 83       	st	Z, r24
    3a7e:	1f c0       	rjmp	.+62     	; 0x3abe <main+0x1798>
    3a80:	fe 01       	movw	r30, r28
    3a82:	ed 58       	subi	r30, 0x8D	; 141
    3a84:	ff 4f       	sbci	r31, 0xFF	; 255
    3a86:	80 e9       	ldi	r24, 0x90	; 144
    3a88:	91 e0       	ldi	r25, 0x01	; 1
    3a8a:	91 83       	std	Z+1, r25	; 0x01
    3a8c:	80 83       	st	Z, r24
    3a8e:	fe 01       	movw	r30, r28
    3a90:	ed 58       	subi	r30, 0x8D	; 141
    3a92:	ff 4f       	sbci	r31, 0xFF	; 255
    3a94:	80 81       	ld	r24, Z
    3a96:	91 81       	ldd	r25, Z+1	; 0x01
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	f1 f7       	brne	.-4      	; 0x3a98 <main+0x1772>
    3a9c:	fe 01       	movw	r30, r28
    3a9e:	ed 58       	subi	r30, 0x8D	; 141
    3aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa2:	91 83       	std	Z+1, r25	; 0x01
    3aa4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa6:	de 01       	movw	r26, r28
    3aa8:	ab 58       	subi	r26, 0x8B	; 139
    3aaa:	bf 4f       	sbci	r27, 0xFF	; 255
    3aac:	fe 01       	movw	r30, r28
    3aae:	eb 58       	subi	r30, 0x8B	; 139
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	80 81       	ld	r24, Z
    3ab4:	91 81       	ldd	r25, Z+1	; 0x01
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	11 96       	adiw	r26, 0x01	; 1
    3aba:	9c 93       	st	X, r25
    3abc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3abe:	fe 01       	movw	r30, r28
    3ac0:	eb 58       	subi	r30, 0x8B	; 139
    3ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac4:	80 81       	ld	r24, Z
    3ac6:	91 81       	ldd	r25, Z+1	; 0x01
    3ac8:	00 97       	sbiw	r24, 0x00	; 0
    3aca:	d1 f6       	brne	.-76     	; 0x3a80 <main+0x175a>
    3acc:	27 c0       	rjmp	.+78     	; 0x3b1c <main+0x17f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ace:	8e 01       	movw	r16, r28
    3ad0:	0b 58       	subi	r16, 0x8B	; 139
    3ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	e9 58       	subi	r30, 0x89	; 137
    3ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ada:	60 81       	ld	r22, Z
    3adc:	71 81       	ldd	r23, Z+1	; 0x01
    3ade:	82 81       	ldd	r24, Z+2	; 0x02
    3ae0:	93 81       	ldd	r25, Z+3	; 0x03
    3ae2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	f8 01       	movw	r30, r16
    3aec:	91 83       	std	Z+1, r25	; 0x01
    3aee:	80 83       	st	Z, r24
    3af0:	de 01       	movw	r26, r28
    3af2:	af 58       	subi	r26, 0x8F	; 143
    3af4:	bf 4f       	sbci	r27, 0xFF	; 255
    3af6:	fe 01       	movw	r30, r28
    3af8:	eb 58       	subi	r30, 0x8B	; 139
    3afa:	ff 4f       	sbci	r31, 0xFF	; 255
    3afc:	80 81       	ld	r24, Z
    3afe:	91 81       	ldd	r25, Z+1	; 0x01
    3b00:	8d 93       	st	X+, r24
    3b02:	9c 93       	st	X, r25
    3b04:	fe 01       	movw	r30, r28
    3b06:	ef 58       	subi	r30, 0x8F	; 143
    3b08:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0a:	80 81       	ld	r24, Z
    3b0c:	91 81       	ldd	r25, Z+1	; 0x01
    3b0e:	01 97       	sbiw	r24, 0x01	; 1
    3b10:	f1 f7       	brne	.-4      	; 0x3b0e <main+0x17e8>
    3b12:	fe 01       	movw	r30, r28
    3b14:	ef 58       	subi	r30, 0x8F	; 143
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	91 83       	std	Z+1, r25	; 0x01
    3b1a:	80 83       	st	Z, r24
													_delay_ms(500);
													LCD_SEND_COMMAND(0x01);
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
													LCD_VidSendStrig(" 0:Home");
    3b22:	84 ed       	ldi	r24, 0xD4	; 212
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColTwo);
    3b2a:	82 e0       	ldi	r24, 0x02	; 2
    3b2c:	61 e0       	ldi	r22, 0x01	; 1
    3b2e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												    LCD_VidSendStrig("1:Garag");
    3b32:	8c ed       	ldi	r24, 0xDC	; 220
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    3b3a:	ad cb       	rjmp	.-2214   	; 0x3296 <main+0xf70>

								 }
								 else
								 {
									 //wring password he take atemp
									 LCD_SEND_COMMAND(0x01);
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									 Try = Attempts;
    3b42:	fe 01       	movw	r30, r28
    3b44:	e5 5d       	subi	r30, 0xD5	; 213
    3b46:	fe 4f       	sbci	r31, 0xFE	; 254
    3b48:	83 e0       	ldi	r24, 0x03	; 3
    3b4a:	80 83       	st	Z, r24
									 counter++;
    3b4c:	de 01       	movw	r26, r28
    3b4e:	a6 5d       	subi	r26, 0xD6	; 214
    3b50:	be 4f       	sbci	r27, 0xFE	; 254
    3b52:	fe 01       	movw	r30, r28
    3b54:	e6 5d       	subi	r30, 0xD6	; 214
    3b56:	fe 4f       	sbci	r31, 0xFE	; 254
    3b58:	80 81       	ld	r24, Z
    3b5a:	8f 5f       	subi	r24, 0xFF	; 255
    3b5c:	8c 93       	st	X, r24
									 if(counter<Attempts)
    3b5e:	fe 01       	movw	r30, r28
    3b60:	e6 5d       	subi	r30, 0xD6	; 214
    3b62:	fe 4f       	sbci	r31, 0xFE	; 254
    3b64:	80 81       	ld	r24, Z
    3b66:	83 30       	cpi	r24, 0x03	; 3
    3b68:	08 f0       	brcs	.+2      	; 0x3b6c <main+0x1846>
    3b6a:	f0 c0       	rjmp	.+480    	; 0x3d4c <main+0x1a26>
									 {
										 LCD_VidSendStrig(" Wrong Password");
    3b6c:	8e e5       	ldi	r24, 0x5E	; 94
    3b6e:	91 e0       	ldi	r25, 0x01	; 1
    3b70:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3b74:	82 e0       	ldi	r24, 0x02	; 2
    3b76:	60 e0       	ldi	r22, 0x00	; 0
    3b78:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
										 LCD_VidSendStrig("Tries Left:");
    3b7c:	8e e6       	ldi	r24, 0x6E	; 110
    3b7e:	91 e0       	ldi	r25, 0x01	; 1
    3b80:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										 Temp =(Try-counter);
    3b84:	9e 01       	movw	r18, r28
    3b86:	29 5d       	subi	r18, 0xD9	; 217
    3b88:	3e 4f       	sbci	r19, 0xFE	; 254
    3b8a:	fe 01       	movw	r30, r28
    3b8c:	e5 5d       	subi	r30, 0xD5	; 213
    3b8e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b90:	de 01       	movw	r26, r28
    3b92:	a6 5d       	subi	r26, 0xD6	; 214
    3b94:	be 4f       	sbci	r27, 0xFE	; 254
    3b96:	90 81       	ld	r25, Z
    3b98:	8c 91       	ld	r24, X
    3b9a:	f9 2f       	mov	r31, r25
    3b9c:	f8 1b       	sub	r31, r24
    3b9e:	8f 2f       	mov	r24, r31
    3ba0:	f9 01       	movw	r30, r18
    3ba2:	80 83       	st	Z, r24
										 LCD_VidSendNumber(Temp);
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	e9 5d       	subi	r30, 0xD9	; 217
    3ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    3baa:	80 81       	ld	r24, Z
    3bac:	88 2f       	mov	r24, r24
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	a0 e0       	ldi	r26, 0x00	; 0
    3bb2:	b0 e0       	ldi	r27, 0x00	; 0
    3bb4:	bc 01       	movw	r22, r24
    3bb6:	cd 01       	movw	r24, r26
    3bb8:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_VidSendNumber>
    3bbc:	fe 01       	movw	r30, r28
    3bbe:	e3 59       	subi	r30, 0x93	; 147
    3bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc2:	80 e0       	ldi	r24, 0x00	; 0
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	aa ef       	ldi	r26, 0xFA	; 250
    3bc8:	b3 e4       	ldi	r27, 0x43	; 67
    3bca:	80 83       	st	Z, r24
    3bcc:	91 83       	std	Z+1, r25	; 0x01
    3bce:	a2 83       	std	Z+2, r26	; 0x02
    3bd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bd2:	8e 01       	movw	r16, r28
    3bd4:	07 59       	subi	r16, 0x97	; 151
    3bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd8:	fe 01       	movw	r30, r28
    3bda:	e3 59       	subi	r30, 0x93	; 147
    3bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bde:	60 81       	ld	r22, Z
    3be0:	71 81       	ldd	r23, Z+1	; 0x01
    3be2:	82 81       	ldd	r24, Z+2	; 0x02
    3be4:	93 81       	ldd	r25, Z+3	; 0x03
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	4a e7       	ldi	r20, 0x7A	; 122
    3bec:	55 e4       	ldi	r21, 0x45	; 69
    3bee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	cb 01       	movw	r24, r22
    3bf6:	f8 01       	movw	r30, r16
    3bf8:	80 83       	st	Z, r24
    3bfa:	91 83       	std	Z+1, r25	; 0x01
    3bfc:	a2 83       	std	Z+2, r26	; 0x02
    3bfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c00:	fe 01       	movw	r30, r28
    3c02:	e7 59       	subi	r30, 0x97	; 151
    3c04:	ff 4f       	sbci	r31, 0xFF	; 255
    3c06:	60 81       	ld	r22, Z
    3c08:	71 81       	ldd	r23, Z+1	; 0x01
    3c0a:	82 81       	ldd	r24, Z+2	; 0x02
    3c0c:	93 81       	ldd	r25, Z+3	; 0x03
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	40 e8       	ldi	r20, 0x80	; 128
    3c14:	5f e3       	ldi	r21, 0x3F	; 63
    3c16:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3c1a:	88 23       	and	r24, r24
    3c1c:	44 f4       	brge	.+16     	; 0x3c2e <main+0x1908>
		__ticks = 1;
    3c1e:	fe 01       	movw	r30, r28
    3c20:	e9 59       	subi	r30, 0x99	; 153
    3c22:	ff 4f       	sbci	r31, 0xFF	; 255
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	91 83       	std	Z+1, r25	; 0x01
    3c2a:	80 83       	st	Z, r24
    3c2c:	64 c0       	rjmp	.+200    	; 0x3cf6 <main+0x19d0>
	else if (__tmp > 65535)
    3c2e:	fe 01       	movw	r30, r28
    3c30:	e7 59       	subi	r30, 0x97	; 151
    3c32:	ff 4f       	sbci	r31, 0xFF	; 255
    3c34:	60 81       	ld	r22, Z
    3c36:	71 81       	ldd	r23, Z+1	; 0x01
    3c38:	82 81       	ldd	r24, Z+2	; 0x02
    3c3a:	93 81       	ldd	r25, Z+3	; 0x03
    3c3c:	20 e0       	ldi	r18, 0x00	; 0
    3c3e:	3f ef       	ldi	r19, 0xFF	; 255
    3c40:	4f e7       	ldi	r20, 0x7F	; 127
    3c42:	57 e4       	ldi	r21, 0x47	; 71
    3c44:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3c48:	18 16       	cp	r1, r24
    3c4a:	0c f0       	brlt	.+2      	; 0x3c4e <main+0x1928>
    3c4c:	43 c0       	rjmp	.+134    	; 0x3cd4 <main+0x19ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c4e:	fe 01       	movw	r30, r28
    3c50:	e3 59       	subi	r30, 0x93	; 147
    3c52:	ff 4f       	sbci	r31, 0xFF	; 255
    3c54:	60 81       	ld	r22, Z
    3c56:	71 81       	ldd	r23, Z+1	; 0x01
    3c58:	82 81       	ldd	r24, Z+2	; 0x02
    3c5a:	93 81       	ldd	r25, Z+3	; 0x03
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	40 e2       	ldi	r20, 0x20	; 32
    3c62:	51 e4       	ldi	r21, 0x41	; 65
    3c64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	8e 01       	movw	r16, r28
    3c6e:	09 59       	subi	r16, 0x99	; 153
    3c70:	1f 4f       	sbci	r17, 0xFF	; 255
    3c72:	bc 01       	movw	r22, r24
    3c74:	cd 01       	movw	r24, r26
    3c76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	cb 01       	movw	r24, r22
    3c7e:	f8 01       	movw	r30, r16
    3c80:	91 83       	std	Z+1, r25	; 0x01
    3c82:	80 83       	st	Z, r24
    3c84:	1f c0       	rjmp	.+62     	; 0x3cc4 <main+0x199e>
    3c86:	fe 01       	movw	r30, r28
    3c88:	eb 59       	subi	r30, 0x9B	; 155
    3c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8c:	80 e9       	ldi	r24, 0x90	; 144
    3c8e:	91 e0       	ldi	r25, 0x01	; 1
    3c90:	91 83       	std	Z+1, r25	; 0x01
    3c92:	80 83       	st	Z, r24
    3c94:	fe 01       	movw	r30, r28
    3c96:	eb 59       	subi	r30, 0x9B	; 155
    3c98:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9a:	80 81       	ld	r24, Z
    3c9c:	91 81       	ldd	r25, Z+1	; 0x01
    3c9e:	01 97       	sbiw	r24, 0x01	; 1
    3ca0:	f1 f7       	brne	.-4      	; 0x3c9e <main+0x1978>
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	eb 59       	subi	r30, 0x9B	; 155
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	91 83       	std	Z+1, r25	; 0x01
    3caa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cac:	de 01       	movw	r26, r28
    3cae:	a9 59       	subi	r26, 0x99	; 153
    3cb0:	bf 4f       	sbci	r27, 0xFF	; 255
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	e9 59       	subi	r30, 0x99	; 153
    3cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb8:	80 81       	ld	r24, Z
    3cba:	91 81       	ldd	r25, Z+1	; 0x01
    3cbc:	01 97       	sbiw	r24, 0x01	; 1
    3cbe:	11 96       	adiw	r26, 0x01	; 1
    3cc0:	9c 93       	st	X, r25
    3cc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	e9 59       	subi	r30, 0x99	; 153
    3cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cca:	80 81       	ld	r24, Z
    3ccc:	91 81       	ldd	r25, Z+1	; 0x01
    3cce:	00 97       	sbiw	r24, 0x00	; 0
    3cd0:	d1 f6       	brne	.-76     	; 0x3c86 <main+0x1960>
    3cd2:	27 c0       	rjmp	.+78     	; 0x3d22 <main+0x19fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cd4:	8e 01       	movw	r16, r28
    3cd6:	09 59       	subi	r16, 0x99	; 153
    3cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cda:	fe 01       	movw	r30, r28
    3cdc:	e7 59       	subi	r30, 0x97	; 151
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	60 81       	ld	r22, Z
    3ce2:	71 81       	ldd	r23, Z+1	; 0x01
    3ce4:	82 81       	ldd	r24, Z+2	; 0x02
    3ce6:	93 81       	ldd	r25, Z+3	; 0x03
    3ce8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cec:	dc 01       	movw	r26, r24
    3cee:	cb 01       	movw	r24, r22
    3cf0:	f8 01       	movw	r30, r16
    3cf2:	91 83       	std	Z+1, r25	; 0x01
    3cf4:	80 83       	st	Z, r24
    3cf6:	de 01       	movw	r26, r28
    3cf8:	ad 59       	subi	r26, 0x9D	; 157
    3cfa:	bf 4f       	sbci	r27, 0xFF	; 255
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	e9 59       	subi	r30, 0x99	; 153
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	80 81       	ld	r24, Z
    3d04:	91 81       	ldd	r25, Z+1	; 0x01
    3d06:	8d 93       	st	X+, r24
    3d08:	9c 93       	st	X, r25
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	ed 59       	subi	r30, 0x9D	; 157
    3d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d10:	80 81       	ld	r24, Z
    3d12:	91 81       	ldd	r25, Z+1	; 0x01
    3d14:	01 97       	sbiw	r24, 0x01	; 1
    3d16:	f1 f7       	brne	.-4      	; 0x3d14 <main+0x19ee>
    3d18:	fe 01       	movw	r30, r28
    3d1a:	ed 59       	subi	r30, 0x9D	; 157
    3d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1e:	91 83       	std	Z+1, r25	; 0x01
    3d20:	80 83       	st	Z, r24
										 _delay_ms(500);
										 LCD_SEND_COMMAND(0x01);
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
										 LCD_VidSendStrig(" Admin Mode:");
    3d28:	8b e9       	ldi	r24, 0x9B	; 155
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3d30:	82 e0       	ldi	r24, 0x02	; 2
    3d32:	60 e0       	ldi	r22, 0x00	; 0
    3d34:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
										 LCD_VidSendStrig("Enter Pass:");
    3d38:	88 ea       	ldi	r24, 0xA8	; 168
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										 pass=0;
    3d40:	fe 01       	movw	r30, r28
    3d42:	e3 5d       	subi	r30, 0xD3	; 211
    3d44:	fe 4f       	sbci	r31, 0xFE	; 254
    3d46:	11 82       	std	Z+1, r1	; 0x01
    3d48:	10 82       	st	Z, r1
    3d4a:	f3 c0       	rjmp	.+486    	; 0x3f32 <main+0x1c0c>

									 }
									 else
									 {
										 //block user
										 DIO_VidSetPinValue(DIO_PORTA,DIO_PIN5 ,DIO_HIGH);
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	65 e0       	ldi	r22, 0x05	; 5
    3d50:	41 e0       	ldi	r20, 0x01	; 1
    3d52:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
										 LCD_VidSendStrig(" login blocked");
    3d56:	8a e7       	ldi	r24, 0x7A	; 122
    3d58:	91 e0       	ldi	r25, 0x01	; 1
    3d5a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3d5e:	82 e0       	ldi	r24, 0x02	; 2
    3d60:	60 e0       	ldi	r22, 0x00	; 0
    3d62:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
										 LCD_VidSendStrig("wait 2 minutes");
    3d66:	89 e8       	ldi	r24, 0x89	; 137
    3d68:	91 e0       	ldi	r25, 0x01	; 1
    3d6a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    3d6e:	fe 01       	movw	r30, r28
    3d70:	e1 5a       	subi	r30, 0xA1	; 161
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	aa e7       	ldi	r26, 0x7A	; 122
    3d7a:	b4 e4       	ldi	r27, 0x44	; 68
    3d7c:	80 83       	st	Z, r24
    3d7e:	91 83       	std	Z+1, r25	; 0x01
    3d80:	a2 83       	std	Z+2, r26	; 0x02
    3d82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d84:	8e 01       	movw	r16, r28
    3d86:	05 5a       	subi	r16, 0xA5	; 165
    3d88:	1f 4f       	sbci	r17, 0xFF	; 255
    3d8a:	fe 01       	movw	r30, r28
    3d8c:	e1 5a       	subi	r30, 0xA1	; 161
    3d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d90:	60 81       	ld	r22, Z
    3d92:	71 81       	ldd	r23, Z+1	; 0x01
    3d94:	82 81       	ldd	r24, Z+2	; 0x02
    3d96:	93 81       	ldd	r25, Z+3	; 0x03
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	4a e7       	ldi	r20, 0x7A	; 122
    3d9e:	55 e4       	ldi	r21, 0x45	; 69
    3da0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	f8 01       	movw	r30, r16
    3daa:	80 83       	st	Z, r24
    3dac:	91 83       	std	Z+1, r25	; 0x01
    3dae:	a2 83       	std	Z+2, r26	; 0x02
    3db0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3db2:	fe 01       	movw	r30, r28
    3db4:	e5 5a       	subi	r30, 0xA5	; 165
    3db6:	ff 4f       	sbci	r31, 0xFF	; 255
    3db8:	60 81       	ld	r22, Z
    3dba:	71 81       	ldd	r23, Z+1	; 0x01
    3dbc:	82 81       	ldd	r24, Z+2	; 0x02
    3dbe:	93 81       	ldd	r25, Z+3	; 0x03
    3dc0:	20 e0       	ldi	r18, 0x00	; 0
    3dc2:	30 e0       	ldi	r19, 0x00	; 0
    3dc4:	40 e8       	ldi	r20, 0x80	; 128
    3dc6:	5f e3       	ldi	r21, 0x3F	; 63
    3dc8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3dcc:	88 23       	and	r24, r24
    3dce:	44 f4       	brge	.+16     	; 0x3de0 <main+0x1aba>
		__ticks = 1;
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	e7 5a       	subi	r30, 0xA7	; 167
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	91 83       	std	Z+1, r25	; 0x01
    3ddc:	80 83       	st	Z, r24
    3dde:	64 c0       	rjmp	.+200    	; 0x3ea8 <main+0x1b82>
	else if (__tmp > 65535)
    3de0:	fe 01       	movw	r30, r28
    3de2:	e5 5a       	subi	r30, 0xA5	; 165
    3de4:	ff 4f       	sbci	r31, 0xFF	; 255
    3de6:	60 81       	ld	r22, Z
    3de8:	71 81       	ldd	r23, Z+1	; 0x01
    3dea:	82 81       	ldd	r24, Z+2	; 0x02
    3dec:	93 81       	ldd	r25, Z+3	; 0x03
    3dee:	20 e0       	ldi	r18, 0x00	; 0
    3df0:	3f ef       	ldi	r19, 0xFF	; 255
    3df2:	4f e7       	ldi	r20, 0x7F	; 127
    3df4:	57 e4       	ldi	r21, 0x47	; 71
    3df6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3dfa:	18 16       	cp	r1, r24
    3dfc:	0c f0       	brlt	.+2      	; 0x3e00 <main+0x1ada>
    3dfe:	43 c0       	rjmp	.+134    	; 0x3e86 <main+0x1b60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e00:	fe 01       	movw	r30, r28
    3e02:	e1 5a       	subi	r30, 0xA1	; 161
    3e04:	ff 4f       	sbci	r31, 0xFF	; 255
    3e06:	60 81       	ld	r22, Z
    3e08:	71 81       	ldd	r23, Z+1	; 0x01
    3e0a:	82 81       	ldd	r24, Z+2	; 0x02
    3e0c:	93 81       	ldd	r25, Z+3	; 0x03
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	40 e2       	ldi	r20, 0x20	; 32
    3e14:	51 e4       	ldi	r21, 0x41	; 65
    3e16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e1a:	dc 01       	movw	r26, r24
    3e1c:	cb 01       	movw	r24, r22
    3e1e:	8e 01       	movw	r16, r28
    3e20:	07 5a       	subi	r16, 0xA7	; 167
    3e22:	1f 4f       	sbci	r17, 0xFF	; 255
    3e24:	bc 01       	movw	r22, r24
    3e26:	cd 01       	movw	r24, r26
    3e28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	cb 01       	movw	r24, r22
    3e30:	f8 01       	movw	r30, r16
    3e32:	91 83       	std	Z+1, r25	; 0x01
    3e34:	80 83       	st	Z, r24
    3e36:	1f c0       	rjmp	.+62     	; 0x3e76 <main+0x1b50>
    3e38:	fe 01       	movw	r30, r28
    3e3a:	e9 5a       	subi	r30, 0xA9	; 169
    3e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3e:	80 e9       	ldi	r24, 0x90	; 144
    3e40:	91 e0       	ldi	r25, 0x01	; 1
    3e42:	91 83       	std	Z+1, r25	; 0x01
    3e44:	80 83       	st	Z, r24
    3e46:	fe 01       	movw	r30, r28
    3e48:	e9 5a       	subi	r30, 0xA9	; 169
    3e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4c:	80 81       	ld	r24, Z
    3e4e:	91 81       	ldd	r25, Z+1	; 0x01
    3e50:	01 97       	sbiw	r24, 0x01	; 1
    3e52:	f1 f7       	brne	.-4      	; 0x3e50 <main+0x1b2a>
    3e54:	fe 01       	movw	r30, r28
    3e56:	e9 5a       	subi	r30, 0xA9	; 169
    3e58:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5a:	91 83       	std	Z+1, r25	; 0x01
    3e5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e5e:	de 01       	movw	r26, r28
    3e60:	a7 5a       	subi	r26, 0xA7	; 167
    3e62:	bf 4f       	sbci	r27, 0xFF	; 255
    3e64:	fe 01       	movw	r30, r28
    3e66:	e7 5a       	subi	r30, 0xA7	; 167
    3e68:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6a:	80 81       	ld	r24, Z
    3e6c:	91 81       	ldd	r25, Z+1	; 0x01
    3e6e:	01 97       	sbiw	r24, 0x01	; 1
    3e70:	11 96       	adiw	r26, 0x01	; 1
    3e72:	9c 93       	st	X, r25
    3e74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e76:	fe 01       	movw	r30, r28
    3e78:	e7 5a       	subi	r30, 0xA7	; 167
    3e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7c:	80 81       	ld	r24, Z
    3e7e:	91 81       	ldd	r25, Z+1	; 0x01
    3e80:	00 97       	sbiw	r24, 0x00	; 0
    3e82:	d1 f6       	brne	.-76     	; 0x3e38 <main+0x1b12>
    3e84:	27 c0       	rjmp	.+78     	; 0x3ed4 <main+0x1bae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e86:	8e 01       	movw	r16, r28
    3e88:	07 5a       	subi	r16, 0xA7	; 167
    3e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e8c:	fe 01       	movw	r30, r28
    3e8e:	e5 5a       	subi	r30, 0xA5	; 165
    3e90:	ff 4f       	sbci	r31, 0xFF	; 255
    3e92:	60 81       	ld	r22, Z
    3e94:	71 81       	ldd	r23, Z+1	; 0x01
    3e96:	82 81       	ldd	r24, Z+2	; 0x02
    3e98:	93 81       	ldd	r25, Z+3	; 0x03
    3e9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	f8 01       	movw	r30, r16
    3ea4:	91 83       	std	Z+1, r25	; 0x01
    3ea6:	80 83       	st	Z, r24
    3ea8:	de 01       	movw	r26, r28
    3eaa:	ab 5a       	subi	r26, 0xAB	; 171
    3eac:	bf 4f       	sbci	r27, 0xFF	; 255
    3eae:	fe 01       	movw	r30, r28
    3eb0:	e7 5a       	subi	r30, 0xA7	; 167
    3eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb4:	80 81       	ld	r24, Z
    3eb6:	91 81       	ldd	r25, Z+1	; 0x01
    3eb8:	8d 93       	st	X+, r24
    3eba:	9c 93       	st	X, r25
    3ebc:	fe 01       	movw	r30, r28
    3ebe:	eb 5a       	subi	r30, 0xAB	; 171
    3ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec2:	80 81       	ld	r24, Z
    3ec4:	91 81       	ldd	r25, Z+1	; 0x01
    3ec6:	01 97       	sbiw	r24, 0x01	; 1
    3ec8:	f1 f7       	brne	.-4      	; 0x3ec6 <main+0x1ba0>
    3eca:	fe 01       	movw	r30, r28
    3ecc:	eb 5a       	subi	r30, 0xAB	; 171
    3ece:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed0:	91 83       	std	Z+1, r25	; 0x01
    3ed2:	80 83       	st	Z, r24
										 _delay_ms(1000);
										 DIO_VidSetPinValue(DIO_PORTA,DIO_PIN5 ,DIO_LOW);
    3ed4:	80 e0       	ldi	r24, 0x00	; 0
    3ed6:	65 e0       	ldi	r22, 0x05	; 5
    3ed8:	40 e0       	ldi	r20, 0x00	; 0
    3eda:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
										 LCD_SEND_COMMAND(0x01);
    3ede:	81 e0       	ldi	r24, 0x01	; 1
    3ee0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
										 LCD_VidSendStrig(" Select Mode:");
    3ee4:	8d e7       	ldi	r24, 0x7D	; 125
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3eec:	82 e0       	ldi	r24, 0x02	; 2
    3eee:	60 e0       	ldi	r22, 0x00	; 0
    3ef0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
										 LCD_VidSendStrig("0:Admin 1:Guest");
    3ef4:	8b e8       	ldi	r24, 0x8B	; 139
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										 flag=0;
    3efc:	fe 01       	movw	r30, r28
    3efe:	e7 5d       	subi	r30, 0xD7	; 215
    3f00:	fe 4f       	sbci	r31, 0xFE	; 254
    3f02:	10 82       	st	Z, r1
										 counter=0;
    3f04:	fe 01       	movw	r30, r28
    3f06:	e6 5d       	subi	r30, 0xD6	; 214
    3f08:	fe 4f       	sbci	r31, 0xFE	; 254
    3f0a:	10 82       	st	Z, r1
										 pass=0;
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	e3 5d       	subi	r30, 0xD3	; 211
    3f10:	fe 4f       	sbci	r31, 0xFE	; 254
    3f12:	11 82       	std	Z+1, r1	; 0x01
    3f14:	10 82       	st	Z, r1
    3f16:	0d c0       	rjmp	.+26     	; 0x3f32 <main+0x1c0c>

							 }


						 }
							if(flag2==0)
    3f18:	fe 01       	movw	r30, r28
    3f1a:	e8 5d       	subi	r30, 0xD8	; 216
    3f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f1e:	80 81       	ld	r24, Z
    3f20:	88 23       	and	r24, r24
    3f22:	11 f0       	breq	.+4      	; 0x3f28 <main+0x1c02>
    3f24:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <main+0x2cc>
							{
								flag2=1;
    3f28:	fe 01       	movw	r30, r28
    3f2a:	e8 5d       	subi	r30, 0xD8	; 216
    3f2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	80 83       	st	Z, r24
							}



					}//end of while 2
					if(flag==0)
    3f32:	fe 01       	movw	r30, r28
    3f34:	e7 5d       	subi	r30, 0xD7	; 215
    3f36:	fe 4f       	sbci	r31, 0xFE	; 254
    3f38:	80 81       	ld	r24, Z
    3f3a:	88 23       	and	r24, r24
    3f3c:	11 f0       	breq	.+4      	; 0x3f42 <main+0x1c1c>
    3f3e:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <main+0x2cc>
					{
						flag=1;
    3f42:	fe 01       	movw	r30, r28
    3f44:	e7 5d       	subi	r30, 0xD7	; 215
    3f46:	fe 4f       	sbci	r31, 0xFE	; 254
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	80 83       	st	Z, r24
    3f4c:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <main+0x286>
					}
			      }


			}
		else if(read==1)
    3f50:	fe 01       	movw	r30, r28
    3f52:	e4 5d       	subi	r30, 0xD4	; 212
    3f54:	fe 4f       	sbci	r31, 0xFE	; 254
    3f56:	80 81       	ld	r24, Z
    3f58:	81 30       	cpi	r24, 0x01	; 1
    3f5a:	09 f0       	breq	.+2      	; 0x3f5e <main+0x1c38>
    3f5c:	e0 c3       	rjmp	.+1984   	; 0x471e <main+0x23f8>
			{
				//he select GUEST mode , so he should log in first
				LCD_SEND_COMMAND(0x01);
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
				LCD_VidSendStrig(" Guest Mode:");
    3f64:	88 e9       	ldi	r24, 0x98	; 152
    3f66:	91 e0       	ldi	r25, 0x01	; 1
    3f68:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
			    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3f6c:	82 e0       	ldi	r24, 0x02	; 2
    3f6e:	60 e0       	ldi	r22, 0x00	; 0
    3f70:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
				LCD_VidSendStrig("Enter Pass:");
    3f74:	88 ea       	ldi	r24, 0xA8	; 168
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
				while(1)
				{

					while(1)
					{
						read= KPD_u8GetPressedKey();
    3f7c:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    3f80:	fe 01       	movw	r30, r28
    3f82:	e4 5d       	subi	r30, 0xD4	; 212
    3f84:	fe 4f       	sbci	r31, 0xFE	; 254
    3f86:	80 83       	st	Z, r24
						 if(read!=0xFF)
    3f88:	fe 01       	movw	r30, r28
    3f8a:	e4 5d       	subi	r30, 0xD4	; 212
    3f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f8e:	80 81       	ld	r24, Z
    3f90:	8f 3f       	cpi	r24, 0xFF	; 255
    3f92:	09 f4       	brne	.+2      	; 0x3f96 <main+0x1c70>
    3f94:	aa c3       	rjmp	.+1876   	; 0x46ea <main+0x23c4>
						 {
							 if(read!='=')
    3f96:	fe 01       	movw	r30, r28
    3f98:	e4 5d       	subi	r30, 0xD4	; 212
    3f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f9c:	80 81       	ld	r24, Z
    3f9e:	8d 33       	cpi	r24, 0x3D	; 61
    3fa0:	01 f1       	breq	.+64     	; 0x3fe2 <main+0x1cbc>
							 {
								 LCD_SEND_Char('*');
    3fa2:	8a e2       	ldi	r24, 0x2A	; 42
    3fa4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_SEND_Char>
								 //he still writing the password
								 pass = (pass * 10) + read;
    3fa8:	fe 01       	movw	r30, r28
    3faa:	e3 5d       	subi	r30, 0xD3	; 211
    3fac:	fe 4f       	sbci	r31, 0xFE	; 254
    3fae:	80 81       	ld	r24, Z
    3fb0:	91 81       	ldd	r25, Z+1	; 0x01
    3fb2:	9c 01       	movw	r18, r24
    3fb4:	22 0f       	add	r18, r18
    3fb6:	33 1f       	adc	r19, r19
    3fb8:	c9 01       	movw	r24, r18
    3fba:	88 0f       	add	r24, r24
    3fbc:	99 1f       	adc	r25, r25
    3fbe:	88 0f       	add	r24, r24
    3fc0:	99 1f       	adc	r25, r25
    3fc2:	28 0f       	add	r18, r24
    3fc4:	39 1f       	adc	r19, r25
    3fc6:	fe 01       	movw	r30, r28
    3fc8:	e4 5d       	subi	r30, 0xD4	; 212
    3fca:	fe 4f       	sbci	r31, 0xFE	; 254
    3fcc:	80 81       	ld	r24, Z
    3fce:	88 2f       	mov	r24, r24
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	e3 5d       	subi	r30, 0xD3	; 211
    3fd6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fd8:	82 0f       	add	r24, r18
    3fda:	93 1f       	adc	r25, r19
    3fdc:	91 83       	std	Z+1, r25	; 0x01
    3fde:	80 83       	st	Z, r24
    3fe0:	90 c3       	rjmp	.+1824   	; 0x4702 <main+0x23dc>
								 break;
							 }
							 else if(read=='=')
    3fe2:	fe 01       	movw	r30, r28
    3fe4:	e4 5d       	subi	r30, 0xD4	; 212
    3fe6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fe8:	80 81       	ld	r24, Z
    3fea:	8d 33       	cpi	r24, 0x3D	; 61
    3fec:	09 f0       	breq	.+2      	; 0x3ff0 <main+0x1cca>
    3fee:	7d c3       	rjmp	.+1786   	; 0x46ea <main+0x23c4>
							 {
								 //he finishing writing the password
								 if(pass==Yasser_Pass)
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	e3 5d       	subi	r30, 0xD3	; 211
    3ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ff6:	80 81       	ld	r24, Z
    3ff8:	91 81       	ldd	r25, Z+1	; 0x01
    3ffa:	f4 e0       	ldi	r31, 0x04	; 4
    3ffc:	87 35       	cpi	r24, 0x57	; 87
    3ffe:	9f 07       	cpc	r25, r31
    4000:	09 f0       	breq	.+2      	; 0x4004 <main+0x1cde>
    4002:	07 c2       	rjmp	.+1038   	; 0x4412 <main+0x20ec>
								 {
									 DIO_VidSetPinValue(DIO_PORTA,DIO_PIN6,DIO_HIGH);//guest led will on
    4004:	80 e0       	ldi	r24, 0x00	; 0
    4006:	66 e0       	ldi	r22, 0x06	; 6
    4008:	41 e0       	ldi	r20, 0x01	; 1
    400a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
									 LCD_SEND_COMMAND(0x01);
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									 //guest yasser here
									 LCD_VidSendStrig(" Right Password");
    4014:	84 eb       	ldi	r24, 0xB4	; 180
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    401c:	82 e0       	ldi	r24, 0x02	; 2
    401e:	60 e0       	ldi	r22, 0x00	; 0
    4020:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									 LCD_VidSendStrig("welcome yasser");
    4024:	85 ea       	ldi	r24, 0xA5	; 165
    4026:	91 e0       	ldi	r25, 0x01	; 1
    4028:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    402c:	fe 01       	movw	r30, r28
    402e:	ef 5a       	subi	r30, 0xAF	; 175
    4030:	ff 4f       	sbci	r31, 0xFF	; 255
    4032:	80 e0       	ldi	r24, 0x00	; 0
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	a8 ec       	ldi	r26, 0xC8	; 200
    4038:	b2 e4       	ldi	r27, 0x42	; 66
    403a:	80 83       	st	Z, r24
    403c:	91 83       	std	Z+1, r25	; 0x01
    403e:	a2 83       	std	Z+2, r26	; 0x02
    4040:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4042:	8e 01       	movw	r16, r28
    4044:	03 5b       	subi	r16, 0xB3	; 179
    4046:	1f 4f       	sbci	r17, 0xFF	; 255
    4048:	fe 01       	movw	r30, r28
    404a:	ef 5a       	subi	r30, 0xAF	; 175
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	60 81       	ld	r22, Z
    4050:	71 81       	ldd	r23, Z+1	; 0x01
    4052:	82 81       	ldd	r24, Z+2	; 0x02
    4054:	93 81       	ldd	r25, Z+3	; 0x03
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	4a e7       	ldi	r20, 0x7A	; 122
    405c:	55 e4       	ldi	r21, 0x45	; 69
    405e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	f8 01       	movw	r30, r16
    4068:	80 83       	st	Z, r24
    406a:	91 83       	std	Z+1, r25	; 0x01
    406c:	a2 83       	std	Z+2, r26	; 0x02
    406e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4070:	fe 01       	movw	r30, r28
    4072:	e3 5b       	subi	r30, 0xB3	; 179
    4074:	ff 4f       	sbci	r31, 0xFF	; 255
    4076:	60 81       	ld	r22, Z
    4078:	71 81       	ldd	r23, Z+1	; 0x01
    407a:	82 81       	ldd	r24, Z+2	; 0x02
    407c:	93 81       	ldd	r25, Z+3	; 0x03
    407e:	20 e0       	ldi	r18, 0x00	; 0
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	40 e8       	ldi	r20, 0x80	; 128
    4084:	5f e3       	ldi	r21, 0x3F	; 63
    4086:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    408a:	88 23       	and	r24, r24
    408c:	44 f4       	brge	.+16     	; 0x409e <main+0x1d78>
		__ticks = 1;
    408e:	fe 01       	movw	r30, r28
    4090:	e5 5b       	subi	r30, 0xB5	; 181
    4092:	ff 4f       	sbci	r31, 0xFF	; 255
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	91 83       	std	Z+1, r25	; 0x01
    409a:	80 83       	st	Z, r24
    409c:	64 c0       	rjmp	.+200    	; 0x4166 <main+0x1e40>
	else if (__tmp > 65535)
    409e:	fe 01       	movw	r30, r28
    40a0:	e3 5b       	subi	r30, 0xB3	; 179
    40a2:	ff 4f       	sbci	r31, 0xFF	; 255
    40a4:	60 81       	ld	r22, Z
    40a6:	71 81       	ldd	r23, Z+1	; 0x01
    40a8:	82 81       	ldd	r24, Z+2	; 0x02
    40aa:	93 81       	ldd	r25, Z+3	; 0x03
    40ac:	20 e0       	ldi	r18, 0x00	; 0
    40ae:	3f ef       	ldi	r19, 0xFF	; 255
    40b0:	4f e7       	ldi	r20, 0x7F	; 127
    40b2:	57 e4       	ldi	r21, 0x47	; 71
    40b4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    40b8:	18 16       	cp	r1, r24
    40ba:	0c f0       	brlt	.+2      	; 0x40be <main+0x1d98>
    40bc:	43 c0       	rjmp	.+134    	; 0x4144 <main+0x1e1e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40be:	fe 01       	movw	r30, r28
    40c0:	ef 5a       	subi	r30, 0xAF	; 175
    40c2:	ff 4f       	sbci	r31, 0xFF	; 255
    40c4:	60 81       	ld	r22, Z
    40c6:	71 81       	ldd	r23, Z+1	; 0x01
    40c8:	82 81       	ldd	r24, Z+2	; 0x02
    40ca:	93 81       	ldd	r25, Z+3	; 0x03
    40cc:	20 e0       	ldi	r18, 0x00	; 0
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	40 e2       	ldi	r20, 0x20	; 32
    40d2:	51 e4       	ldi	r21, 0x41	; 65
    40d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    40d8:	dc 01       	movw	r26, r24
    40da:	cb 01       	movw	r24, r22
    40dc:	8e 01       	movw	r16, r28
    40de:	05 5b       	subi	r16, 0xB5	; 181
    40e0:	1f 4f       	sbci	r17, 0xFF	; 255
    40e2:	bc 01       	movw	r22, r24
    40e4:	cd 01       	movw	r24, r26
    40e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    40ea:	dc 01       	movw	r26, r24
    40ec:	cb 01       	movw	r24, r22
    40ee:	f8 01       	movw	r30, r16
    40f0:	91 83       	std	Z+1, r25	; 0x01
    40f2:	80 83       	st	Z, r24
    40f4:	1f c0       	rjmp	.+62     	; 0x4134 <main+0x1e0e>
    40f6:	fe 01       	movw	r30, r28
    40f8:	e7 5b       	subi	r30, 0xB7	; 183
    40fa:	ff 4f       	sbci	r31, 0xFF	; 255
    40fc:	80 e9       	ldi	r24, 0x90	; 144
    40fe:	91 e0       	ldi	r25, 0x01	; 1
    4100:	91 83       	std	Z+1, r25	; 0x01
    4102:	80 83       	st	Z, r24
    4104:	fe 01       	movw	r30, r28
    4106:	e7 5b       	subi	r30, 0xB7	; 183
    4108:	ff 4f       	sbci	r31, 0xFF	; 255
    410a:	80 81       	ld	r24, Z
    410c:	91 81       	ldd	r25, Z+1	; 0x01
    410e:	01 97       	sbiw	r24, 0x01	; 1
    4110:	f1 f7       	brne	.-4      	; 0x410e <main+0x1de8>
    4112:	fe 01       	movw	r30, r28
    4114:	e7 5b       	subi	r30, 0xB7	; 183
    4116:	ff 4f       	sbci	r31, 0xFF	; 255
    4118:	91 83       	std	Z+1, r25	; 0x01
    411a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    411c:	de 01       	movw	r26, r28
    411e:	a5 5b       	subi	r26, 0xB5	; 181
    4120:	bf 4f       	sbci	r27, 0xFF	; 255
    4122:	fe 01       	movw	r30, r28
    4124:	e5 5b       	subi	r30, 0xB5	; 181
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	80 81       	ld	r24, Z
    412a:	91 81       	ldd	r25, Z+1	; 0x01
    412c:	01 97       	sbiw	r24, 0x01	; 1
    412e:	11 96       	adiw	r26, 0x01	; 1
    4130:	9c 93       	st	X, r25
    4132:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4134:	fe 01       	movw	r30, r28
    4136:	e5 5b       	subi	r30, 0xB5	; 181
    4138:	ff 4f       	sbci	r31, 0xFF	; 255
    413a:	80 81       	ld	r24, Z
    413c:	91 81       	ldd	r25, Z+1	; 0x01
    413e:	00 97       	sbiw	r24, 0x00	; 0
    4140:	d1 f6       	brne	.-76     	; 0x40f6 <main+0x1dd0>
    4142:	27 c0       	rjmp	.+78     	; 0x4192 <main+0x1e6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4144:	8e 01       	movw	r16, r28
    4146:	05 5b       	subi	r16, 0xB5	; 181
    4148:	1f 4f       	sbci	r17, 0xFF	; 255
    414a:	fe 01       	movw	r30, r28
    414c:	e3 5b       	subi	r30, 0xB3	; 179
    414e:	ff 4f       	sbci	r31, 0xFF	; 255
    4150:	60 81       	ld	r22, Z
    4152:	71 81       	ldd	r23, Z+1	; 0x01
    4154:	82 81       	ldd	r24, Z+2	; 0x02
    4156:	93 81       	ldd	r25, Z+3	; 0x03
    4158:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    415c:	dc 01       	movw	r26, r24
    415e:	cb 01       	movw	r24, r22
    4160:	f8 01       	movw	r30, r16
    4162:	91 83       	std	Z+1, r25	; 0x01
    4164:	80 83       	st	Z, r24
    4166:	de 01       	movw	r26, r28
    4168:	a9 5b       	subi	r26, 0xB9	; 185
    416a:	bf 4f       	sbci	r27, 0xFF	; 255
    416c:	fe 01       	movw	r30, r28
    416e:	e5 5b       	subi	r30, 0xB5	; 181
    4170:	ff 4f       	sbci	r31, 0xFF	; 255
    4172:	80 81       	ld	r24, Z
    4174:	91 81       	ldd	r25, Z+1	; 0x01
    4176:	8d 93       	st	X+, r24
    4178:	9c 93       	st	X, r25
    417a:	fe 01       	movw	r30, r28
    417c:	e9 5b       	subi	r30, 0xB9	; 185
    417e:	ff 4f       	sbci	r31, 0xFF	; 255
    4180:	80 81       	ld	r24, Z
    4182:	91 81       	ldd	r25, Z+1	; 0x01
    4184:	01 97       	sbiw	r24, 0x01	; 1
    4186:	f1 f7       	brne	.-4      	; 0x4184 <main+0x1e5e>
    4188:	fe 01       	movw	r30, r28
    418a:	e9 5b       	subi	r30, 0xB9	; 185
    418c:	ff 4f       	sbci	r31, 0xFF	; 255
    418e:	91 83       	std	Z+1, r25	; 0x01
    4190:	80 83       	st	Z, r24
									 _delay_ms(100);
									 LCD_SEND_COMMAND(0x01);
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									 LCD_VidSendStrig(" bell will ring");
    4198:	84 eb       	ldi	r24, 0xB4	; 180
    419a:	91 e0       	ldi	r25, 0x01	; 1
    419c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									 USART_VIDSendChar(3);
    41a0:	83 e0       	ldi	r24, 0x03	; 3
    41a2:	0e 94 66 11 	call	0x22cc	; 0x22cc <USART_VIDSendChar>
									 DIO_VidSetPinValue(DIO_PORTA, DIO_PIN4,DIO_HIGH);//BUZZER ON
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    41a8:	64 e0       	ldi	r22, 0x04	; 4
    41aa:	41 e0       	ldi	r20, 0x01	; 1
    41ac:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
    41b0:	fe 01       	movw	r30, r28
    41b2:	ed 5b       	subi	r30, 0xBD	; 189
    41b4:	ff 4f       	sbci	r31, 0xFF	; 255
    41b6:	80 e0       	ldi	r24, 0x00	; 0
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	aa e7       	ldi	r26, 0x7A	; 122
    41bc:	b4 e4       	ldi	r27, 0x44	; 68
    41be:	80 83       	st	Z, r24
    41c0:	91 83       	std	Z+1, r25	; 0x01
    41c2:	a2 83       	std	Z+2, r26	; 0x02
    41c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41c6:	8e 01       	movw	r16, r28
    41c8:	01 5c       	subi	r16, 0xC1	; 193
    41ca:	1f 4f       	sbci	r17, 0xFF	; 255
    41cc:	fe 01       	movw	r30, r28
    41ce:	ed 5b       	subi	r30, 0xBD	; 189
    41d0:	ff 4f       	sbci	r31, 0xFF	; 255
    41d2:	60 81       	ld	r22, Z
    41d4:	71 81       	ldd	r23, Z+1	; 0x01
    41d6:	82 81       	ldd	r24, Z+2	; 0x02
    41d8:	93 81       	ldd	r25, Z+3	; 0x03
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	4a e7       	ldi	r20, 0x7A	; 122
    41e0:	55 e4       	ldi	r21, 0x45	; 69
    41e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    41e6:	dc 01       	movw	r26, r24
    41e8:	cb 01       	movw	r24, r22
    41ea:	f8 01       	movw	r30, r16
    41ec:	80 83       	st	Z, r24
    41ee:	91 83       	std	Z+1, r25	; 0x01
    41f0:	a2 83       	std	Z+2, r26	; 0x02
    41f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41f4:	fe 01       	movw	r30, r28
    41f6:	ff 96       	adiw	r30, 0x3f	; 63
    41f8:	60 81       	ld	r22, Z
    41fa:	71 81       	ldd	r23, Z+1	; 0x01
    41fc:	82 81       	ldd	r24, Z+2	; 0x02
    41fe:	93 81       	ldd	r25, Z+3	; 0x03
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	40 e8       	ldi	r20, 0x80	; 128
    4206:	5f e3       	ldi	r21, 0x3F	; 63
    4208:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    420c:	88 23       	and	r24, r24
    420e:	2c f4       	brge	.+10     	; 0x421a <main+0x1ef4>
		__ticks = 1;
    4210:	81 e0       	ldi	r24, 0x01	; 1
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	9e af       	std	Y+62, r25	; 0x3e
    4216:	8d af       	std	Y+61, r24	; 0x3d
    4218:	46 c0       	rjmp	.+140    	; 0x42a6 <main+0x1f80>
	else if (__tmp > 65535)
    421a:	fe 01       	movw	r30, r28
    421c:	ff 96       	adiw	r30, 0x3f	; 63
    421e:	60 81       	ld	r22, Z
    4220:	71 81       	ldd	r23, Z+1	; 0x01
    4222:	82 81       	ldd	r24, Z+2	; 0x02
    4224:	93 81       	ldd	r25, Z+3	; 0x03
    4226:	20 e0       	ldi	r18, 0x00	; 0
    4228:	3f ef       	ldi	r19, 0xFF	; 255
    422a:	4f e7       	ldi	r20, 0x7F	; 127
    422c:	57 e4       	ldi	r21, 0x47	; 71
    422e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4232:	18 16       	cp	r1, r24
    4234:	64 f5       	brge	.+88     	; 0x428e <main+0x1f68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4236:	fe 01       	movw	r30, r28
    4238:	ed 5b       	subi	r30, 0xBD	; 189
    423a:	ff 4f       	sbci	r31, 0xFF	; 255
    423c:	60 81       	ld	r22, Z
    423e:	71 81       	ldd	r23, Z+1	; 0x01
    4240:	82 81       	ldd	r24, Z+2	; 0x02
    4242:	93 81       	ldd	r25, Z+3	; 0x03
    4244:	20 e0       	ldi	r18, 0x00	; 0
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	40 e2       	ldi	r20, 0x20	; 32
    424a:	51 e4       	ldi	r21, 0x41	; 65
    424c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4250:	dc 01       	movw	r26, r24
    4252:	cb 01       	movw	r24, r22
    4254:	bc 01       	movw	r22, r24
    4256:	cd 01       	movw	r24, r26
    4258:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	9e af       	std	Y+62, r25	; 0x3e
    4262:	8d af       	std	Y+61, r24	; 0x3d
    4264:	0f c0       	rjmp	.+30     	; 0x4284 <main+0x1f5e>
    4266:	80 e9       	ldi	r24, 0x90	; 144
    4268:	91 e0       	ldi	r25, 0x01	; 1
    426a:	9c af       	std	Y+60, r25	; 0x3c
    426c:	8b af       	std	Y+59, r24	; 0x3b
    426e:	8b ad       	ldd	r24, Y+59	; 0x3b
    4270:	9c ad       	ldd	r25, Y+60	; 0x3c
    4272:	01 97       	sbiw	r24, 0x01	; 1
    4274:	f1 f7       	brne	.-4      	; 0x4272 <main+0x1f4c>
    4276:	9c af       	std	Y+60, r25	; 0x3c
    4278:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    427a:	8d ad       	ldd	r24, Y+61	; 0x3d
    427c:	9e ad       	ldd	r25, Y+62	; 0x3e
    427e:	01 97       	sbiw	r24, 0x01	; 1
    4280:	9e af       	std	Y+62, r25	; 0x3e
    4282:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4284:	8d ad       	ldd	r24, Y+61	; 0x3d
    4286:	9e ad       	ldd	r25, Y+62	; 0x3e
    4288:	00 97       	sbiw	r24, 0x00	; 0
    428a:	69 f7       	brne	.-38     	; 0x4266 <main+0x1f40>
    428c:	16 c0       	rjmp	.+44     	; 0x42ba <main+0x1f94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    428e:	fe 01       	movw	r30, r28
    4290:	ff 96       	adiw	r30, 0x3f	; 63
    4292:	60 81       	ld	r22, Z
    4294:	71 81       	ldd	r23, Z+1	; 0x01
    4296:	82 81       	ldd	r24, Z+2	; 0x02
    4298:	93 81       	ldd	r25, Z+3	; 0x03
    429a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    429e:	dc 01       	movw	r26, r24
    42a0:	cb 01       	movw	r24, r22
    42a2:	9e af       	std	Y+62, r25	; 0x3e
    42a4:	8d af       	std	Y+61, r24	; 0x3d
    42a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    42a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    42aa:	9a af       	std	Y+58, r25	; 0x3a
    42ac:	89 af       	std	Y+57, r24	; 0x39
    42ae:	89 ad       	ldd	r24, Y+57	; 0x39
    42b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    42b2:	01 97       	sbiw	r24, 0x01	; 1
    42b4:	f1 f7       	brne	.-4      	; 0x42b2 <main+0x1f8c>
    42b6:	9a af       	std	Y+58, r25	; 0x3a
    42b8:	89 af       	std	Y+57, r24	; 0x39
									 _delay_ms(1000);
									 LCD_SEND_COMMAND(0x01);
    42ba:	81 e0       	ldi	r24, 0x01	; 1
    42bc:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									 LCD_VidSendStrig(" bell will");
    42c0:	84 ec       	ldi	r24, 0xC4	; 196
    42c2:	91 e0       	ldi	r25, 0x01	; 1
    42c4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    42c8:	82 e0       	ldi	r24, 0x02	; 2
    42ca:	60 e0       	ldi	r22, 0x00	; 0
    42cc:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									 LCD_VidSendStrig(" Turn OFF!!!!");
    42d0:	8f ec       	ldi	r24, 0xCF	; 207
    42d2:	91 e0       	ldi	r25, 0x01	; 1
    42d4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									 DIO_VidSetPinValue(DIO_PORTA, DIO_PIN4,DIO_LOW);//BUZZER OFF
    42d8:	80 e0       	ldi	r24, 0x00	; 0
    42da:	64 e0       	ldi	r22, 0x04	; 4
    42dc:	40 e0       	ldi	r20, 0x00	; 0
    42de:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
									 DIO_VidSetPinValue(DIO_PORTA,DIO_PIN6,DIO_LOW);//guest led will OFF
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	66 e0       	ldi	r22, 0x06	; 6
    42e6:	40 e0       	ldi	r20, 0x00	; 0
    42e8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
    42ec:	80 e0       	ldi	r24, 0x00	; 0
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	a8 ec       	ldi	r26, 0xC8	; 200
    42f2:	b3 e4       	ldi	r27, 0x43	; 67
    42f4:	8d ab       	std	Y+53, r24	; 0x35
    42f6:	9e ab       	std	Y+54, r25	; 0x36
    42f8:	af ab       	std	Y+55, r26	; 0x37
    42fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42fc:	6d a9       	ldd	r22, Y+53	; 0x35
    42fe:	7e a9       	ldd	r23, Y+54	; 0x36
    4300:	8f a9       	ldd	r24, Y+55	; 0x37
    4302:	98 ad       	ldd	r25, Y+56	; 0x38
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	4a e7       	ldi	r20, 0x7A	; 122
    430a:	55 e4       	ldi	r21, 0x45	; 69
    430c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4310:	dc 01       	movw	r26, r24
    4312:	cb 01       	movw	r24, r22
    4314:	89 ab       	std	Y+49, r24	; 0x31
    4316:	9a ab       	std	Y+50, r25	; 0x32
    4318:	ab ab       	std	Y+51, r26	; 0x33
    431a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    431c:	69 a9       	ldd	r22, Y+49	; 0x31
    431e:	7a a9       	ldd	r23, Y+50	; 0x32
    4320:	8b a9       	ldd	r24, Y+51	; 0x33
    4322:	9c a9       	ldd	r25, Y+52	; 0x34
    4324:	20 e0       	ldi	r18, 0x00	; 0
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	40 e8       	ldi	r20, 0x80	; 128
    432a:	5f e3       	ldi	r21, 0x3F	; 63
    432c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4330:	88 23       	and	r24, r24
    4332:	2c f4       	brge	.+10     	; 0x433e <main+0x2018>
		__ticks = 1;
    4334:	81 e0       	ldi	r24, 0x01	; 1
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	98 ab       	std	Y+48, r25	; 0x30
    433a:	8f a7       	std	Y+47, r24	; 0x2f
    433c:	3f c0       	rjmp	.+126    	; 0x43bc <main+0x2096>
	else if (__tmp > 65535)
    433e:	69 a9       	ldd	r22, Y+49	; 0x31
    4340:	7a a9       	ldd	r23, Y+50	; 0x32
    4342:	8b a9       	ldd	r24, Y+51	; 0x33
    4344:	9c a9       	ldd	r25, Y+52	; 0x34
    4346:	20 e0       	ldi	r18, 0x00	; 0
    4348:	3f ef       	ldi	r19, 0xFF	; 255
    434a:	4f e7       	ldi	r20, 0x7F	; 127
    434c:	57 e4       	ldi	r21, 0x47	; 71
    434e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4352:	18 16       	cp	r1, r24
    4354:	4c f5       	brge	.+82     	; 0x43a8 <main+0x2082>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4356:	6d a9       	ldd	r22, Y+53	; 0x35
    4358:	7e a9       	ldd	r23, Y+54	; 0x36
    435a:	8f a9       	ldd	r24, Y+55	; 0x37
    435c:	98 ad       	ldd	r25, Y+56	; 0x38
    435e:	20 e0       	ldi	r18, 0x00	; 0
    4360:	30 e0       	ldi	r19, 0x00	; 0
    4362:	40 e2       	ldi	r20, 0x20	; 32
    4364:	51 e4       	ldi	r21, 0x41	; 65
    4366:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    436a:	dc 01       	movw	r26, r24
    436c:	cb 01       	movw	r24, r22
    436e:	bc 01       	movw	r22, r24
    4370:	cd 01       	movw	r24, r26
    4372:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4376:	dc 01       	movw	r26, r24
    4378:	cb 01       	movw	r24, r22
    437a:	98 ab       	std	Y+48, r25	; 0x30
    437c:	8f a7       	std	Y+47, r24	; 0x2f
    437e:	0f c0       	rjmp	.+30     	; 0x439e <main+0x2078>
    4380:	80 e9       	ldi	r24, 0x90	; 144
    4382:	91 e0       	ldi	r25, 0x01	; 1
    4384:	9e a7       	std	Y+46, r25	; 0x2e
    4386:	8d a7       	std	Y+45, r24	; 0x2d
    4388:	8d a5       	ldd	r24, Y+45	; 0x2d
    438a:	9e a5       	ldd	r25, Y+46	; 0x2e
    438c:	01 97       	sbiw	r24, 0x01	; 1
    438e:	f1 f7       	brne	.-4      	; 0x438c <main+0x2066>
    4390:	9e a7       	std	Y+46, r25	; 0x2e
    4392:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4394:	8f a5       	ldd	r24, Y+47	; 0x2f
    4396:	98 a9       	ldd	r25, Y+48	; 0x30
    4398:	01 97       	sbiw	r24, 0x01	; 1
    439a:	98 ab       	std	Y+48, r25	; 0x30
    439c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    439e:	8f a5       	ldd	r24, Y+47	; 0x2f
    43a0:	98 a9       	ldd	r25, Y+48	; 0x30
    43a2:	00 97       	sbiw	r24, 0x00	; 0
    43a4:	69 f7       	brne	.-38     	; 0x4380 <main+0x205a>
    43a6:	14 c0       	rjmp	.+40     	; 0x43d0 <main+0x20aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a8:	69 a9       	ldd	r22, Y+49	; 0x31
    43aa:	7a a9       	ldd	r23, Y+50	; 0x32
    43ac:	8b a9       	ldd	r24, Y+51	; 0x33
    43ae:	9c a9       	ldd	r25, Y+52	; 0x34
    43b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43b4:	dc 01       	movw	r26, r24
    43b6:	cb 01       	movw	r24, r22
    43b8:	98 ab       	std	Y+48, r25	; 0x30
    43ba:	8f a7       	std	Y+47, r24	; 0x2f
    43bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    43be:	98 a9       	ldd	r25, Y+48	; 0x30
    43c0:	9c a7       	std	Y+44, r25	; 0x2c
    43c2:	8b a7       	std	Y+43, r24	; 0x2b
    43c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    43c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    43c8:	01 97       	sbiw	r24, 0x01	; 1
    43ca:	f1 f7       	brne	.-4      	; 0x43c8 <main+0x20a2>
    43cc:	9c a7       	std	Y+44, r25	; 0x2c
    43ce:	8b a7       	std	Y+43, r24	; 0x2b
									 _delay_ms(400);
									 LCD_SEND_COMMAND(0x01);
    43d0:	81 e0       	ldi	r24, 0x01	; 1
    43d2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									 LCD_VidSendStrig(" Select Mode:");
    43d6:	8d e7       	ldi	r24, 0x7D	; 125
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    43de:	82 e0       	ldi	r24, 0x02	; 2
    43e0:	60 e0       	ldi	r22, 0x00	; 0
    43e2:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									 LCD_VidSendStrig("0:Admin 1:Guest");
    43e6:	8b e8       	ldi	r24, 0x8B	; 139
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									 flag=0;
    43ee:	fe 01       	movw	r30, r28
    43f0:	e7 5d       	subi	r30, 0xD7	; 215
    43f2:	fe 4f       	sbci	r31, 0xFE	; 254
    43f4:	10 82       	st	Z, r1
									 flag2=0;
    43f6:	fe 01       	movw	r30, r28
    43f8:	e8 5d       	subi	r30, 0xD8	; 216
    43fa:	fe 4f       	sbci	r31, 0xFE	; 254
    43fc:	10 82       	st	Z, r1
									 counter=0;
    43fe:	fe 01       	movw	r30, r28
    4400:	e6 5d       	subi	r30, 0xD6	; 214
    4402:	fe 4f       	sbci	r31, 0xFE	; 254
    4404:	10 82       	st	Z, r1
									 pass=0;
    4406:	fe 01       	movw	r30, r28
    4408:	e3 5d       	subi	r30, 0xD3	; 211
    440a:	fe 4f       	sbci	r31, 0xFE	; 254
    440c:	11 82       	std	Z+1, r1	; 0x01
    440e:	10 82       	st	Z, r1
    4410:	6c c1       	rjmp	.+728    	; 0x46ea <main+0x23c4>

								 }
								 else
								 {
									 //wring password he take atemp
									 LCD_SEND_COMMAND(0x01);
    4412:	81 e0       	ldi	r24, 0x01	; 1
    4414:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									 Try = Attempts;
    4418:	fe 01       	movw	r30, r28
    441a:	e5 5d       	subi	r30, 0xD5	; 213
    441c:	fe 4f       	sbci	r31, 0xFE	; 254
    441e:	83 e0       	ldi	r24, 0x03	; 3
    4420:	80 83       	st	Z, r24
									 counter++;
    4422:	de 01       	movw	r26, r28
    4424:	a6 5d       	subi	r26, 0xD6	; 214
    4426:	be 4f       	sbci	r27, 0xFE	; 254
    4428:	fe 01       	movw	r30, r28
    442a:	e6 5d       	subi	r30, 0xD6	; 214
    442c:	fe 4f       	sbci	r31, 0xFE	; 254
    442e:	80 81       	ld	r24, Z
    4430:	8f 5f       	subi	r24, 0xFF	; 255
    4432:	8c 93       	st	X, r24
									 if(counter<Attempts)
    4434:	fe 01       	movw	r30, r28
    4436:	e6 5d       	subi	r30, 0xD6	; 214
    4438:	fe 4f       	sbci	r31, 0xFE	; 254
    443a:	80 81       	ld	r24, Z
    443c:	83 30       	cpi	r24, 0x03	; 3
    443e:	08 f0       	brcs	.+2      	; 0x4442 <main+0x211c>
    4440:	af c0       	rjmp	.+350    	; 0x45a0 <main+0x227a>
									 {
										 LCD_VidSendStrig(" Wrong Password");
    4442:	8e e5       	ldi	r24, 0x5E	; 94
    4444:	91 e0       	ldi	r25, 0x01	; 1
    4446:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    444a:	82 e0       	ldi	r24, 0x02	; 2
    444c:	60 e0       	ldi	r22, 0x00	; 0
    444e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
										 LCD_VidSendStrig("Tries Left:");
    4452:	8e e6       	ldi	r24, 0x6E	; 110
    4454:	91 e0       	ldi	r25, 0x01	; 1
    4456:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										 Temp =(Try-counter);
    445a:	9e 01       	movw	r18, r28
    445c:	29 5d       	subi	r18, 0xD9	; 217
    445e:	3e 4f       	sbci	r19, 0xFE	; 254
    4460:	fe 01       	movw	r30, r28
    4462:	e5 5d       	subi	r30, 0xD5	; 213
    4464:	fe 4f       	sbci	r31, 0xFE	; 254
    4466:	de 01       	movw	r26, r28
    4468:	a6 5d       	subi	r26, 0xD6	; 214
    446a:	be 4f       	sbci	r27, 0xFE	; 254
    446c:	90 81       	ld	r25, Z
    446e:	8c 91       	ld	r24, X
    4470:	f9 2f       	mov	r31, r25
    4472:	f8 1b       	sub	r31, r24
    4474:	8f 2f       	mov	r24, r31
    4476:	f9 01       	movw	r30, r18
    4478:	80 83       	st	Z, r24
										 LCD_VidSendNumber(Temp);
    447a:	fe 01       	movw	r30, r28
    447c:	e9 5d       	subi	r30, 0xD9	; 217
    447e:	fe 4f       	sbci	r31, 0xFE	; 254
    4480:	80 81       	ld	r24, Z
    4482:	88 2f       	mov	r24, r24
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	a0 e0       	ldi	r26, 0x00	; 0
    4488:	b0 e0       	ldi	r27, 0x00	; 0
    448a:	bc 01       	movw	r22, r24
    448c:	cd 01       	movw	r24, r26
    448e:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_VidSendNumber>
    4492:	80 e0       	ldi	r24, 0x00	; 0
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	aa e7       	ldi	r26, 0x7A	; 122
    4498:	b4 e4       	ldi	r27, 0x44	; 68
    449a:	8f a3       	std	Y+39, r24	; 0x27
    449c:	98 a7       	std	Y+40, r25	; 0x28
    449e:	a9 a7       	std	Y+41, r26	; 0x29
    44a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44a2:	6f a1       	ldd	r22, Y+39	; 0x27
    44a4:	78 a5       	ldd	r23, Y+40	; 0x28
    44a6:	89 a5       	ldd	r24, Y+41	; 0x29
    44a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    44aa:	20 e0       	ldi	r18, 0x00	; 0
    44ac:	30 e0       	ldi	r19, 0x00	; 0
    44ae:	4a e7       	ldi	r20, 0x7A	; 122
    44b0:	55 e4       	ldi	r21, 0x45	; 69
    44b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    44b6:	dc 01       	movw	r26, r24
    44b8:	cb 01       	movw	r24, r22
    44ba:	8b a3       	std	Y+35, r24	; 0x23
    44bc:	9c a3       	std	Y+36, r25	; 0x24
    44be:	ad a3       	std	Y+37, r26	; 0x25
    44c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    44c2:	6b a1       	ldd	r22, Y+35	; 0x23
    44c4:	7c a1       	ldd	r23, Y+36	; 0x24
    44c6:	8d a1       	ldd	r24, Y+37	; 0x25
    44c8:	9e a1       	ldd	r25, Y+38	; 0x26
    44ca:	20 e0       	ldi	r18, 0x00	; 0
    44cc:	30 e0       	ldi	r19, 0x00	; 0
    44ce:	40 e8       	ldi	r20, 0x80	; 128
    44d0:	5f e3       	ldi	r21, 0x3F	; 63
    44d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    44d6:	88 23       	and	r24, r24
    44d8:	2c f4       	brge	.+10     	; 0x44e4 <main+0x21be>
		__ticks = 1;
    44da:	81 e0       	ldi	r24, 0x01	; 1
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	9a a3       	std	Y+34, r25	; 0x22
    44e0:	89 a3       	std	Y+33, r24	; 0x21
    44e2:	3f c0       	rjmp	.+126    	; 0x4562 <main+0x223c>
	else if (__tmp > 65535)
    44e4:	6b a1       	ldd	r22, Y+35	; 0x23
    44e6:	7c a1       	ldd	r23, Y+36	; 0x24
    44e8:	8d a1       	ldd	r24, Y+37	; 0x25
    44ea:	9e a1       	ldd	r25, Y+38	; 0x26
    44ec:	20 e0       	ldi	r18, 0x00	; 0
    44ee:	3f ef       	ldi	r19, 0xFF	; 255
    44f0:	4f e7       	ldi	r20, 0x7F	; 127
    44f2:	57 e4       	ldi	r21, 0x47	; 71
    44f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    44f8:	18 16       	cp	r1, r24
    44fa:	4c f5       	brge	.+82     	; 0x454e <main+0x2228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44fc:	6f a1       	ldd	r22, Y+39	; 0x27
    44fe:	78 a5       	ldd	r23, Y+40	; 0x28
    4500:	89 a5       	ldd	r24, Y+41	; 0x29
    4502:	9a a5       	ldd	r25, Y+42	; 0x2a
    4504:	20 e0       	ldi	r18, 0x00	; 0
    4506:	30 e0       	ldi	r19, 0x00	; 0
    4508:	40 e2       	ldi	r20, 0x20	; 32
    450a:	51 e4       	ldi	r21, 0x41	; 65
    450c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4510:	dc 01       	movw	r26, r24
    4512:	cb 01       	movw	r24, r22
    4514:	bc 01       	movw	r22, r24
    4516:	cd 01       	movw	r24, r26
    4518:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    451c:	dc 01       	movw	r26, r24
    451e:	cb 01       	movw	r24, r22
    4520:	9a a3       	std	Y+34, r25	; 0x22
    4522:	89 a3       	std	Y+33, r24	; 0x21
    4524:	0f c0       	rjmp	.+30     	; 0x4544 <main+0x221e>
    4526:	80 e9       	ldi	r24, 0x90	; 144
    4528:	91 e0       	ldi	r25, 0x01	; 1
    452a:	98 a3       	std	Y+32, r25	; 0x20
    452c:	8f 8f       	std	Y+31, r24	; 0x1f
    452e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4530:	98 a1       	ldd	r25, Y+32	; 0x20
    4532:	01 97       	sbiw	r24, 0x01	; 1
    4534:	f1 f7       	brne	.-4      	; 0x4532 <main+0x220c>
    4536:	98 a3       	std	Y+32, r25	; 0x20
    4538:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    453a:	89 a1       	ldd	r24, Y+33	; 0x21
    453c:	9a a1       	ldd	r25, Y+34	; 0x22
    453e:	01 97       	sbiw	r24, 0x01	; 1
    4540:	9a a3       	std	Y+34, r25	; 0x22
    4542:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4544:	89 a1       	ldd	r24, Y+33	; 0x21
    4546:	9a a1       	ldd	r25, Y+34	; 0x22
    4548:	00 97       	sbiw	r24, 0x00	; 0
    454a:	69 f7       	brne	.-38     	; 0x4526 <main+0x2200>
    454c:	14 c0       	rjmp	.+40     	; 0x4576 <main+0x2250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    454e:	6b a1       	ldd	r22, Y+35	; 0x23
    4550:	7c a1       	ldd	r23, Y+36	; 0x24
    4552:	8d a1       	ldd	r24, Y+37	; 0x25
    4554:	9e a1       	ldd	r25, Y+38	; 0x26
    4556:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    455a:	dc 01       	movw	r26, r24
    455c:	cb 01       	movw	r24, r22
    455e:	9a a3       	std	Y+34, r25	; 0x22
    4560:	89 a3       	std	Y+33, r24	; 0x21
    4562:	89 a1       	ldd	r24, Y+33	; 0x21
    4564:	9a a1       	ldd	r25, Y+34	; 0x22
    4566:	9e 8f       	std	Y+30, r25	; 0x1e
    4568:	8d 8f       	std	Y+29, r24	; 0x1d
    456a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    456c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    456e:	01 97       	sbiw	r24, 0x01	; 1
    4570:	f1 f7       	brne	.-4      	; 0x456e <main+0x2248>
    4572:	9e 8f       	std	Y+30, r25	; 0x1e
    4574:	8d 8f       	std	Y+29, r24	; 0x1d
										 _delay_ms(1000);
										 LCD_SEND_COMMAND(0x01);
    4576:	81 e0       	ldi	r24, 0x01	; 1
    4578:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
										 LCD_VidSendStrig(" GUEST Mode:");
    457c:	8d ed       	ldi	r24, 0xDD	; 221
    457e:	91 e0       	ldi	r25, 0x01	; 1
    4580:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4584:	82 e0       	ldi	r24, 0x02	; 2
    4586:	60 e0       	ldi	r22, 0x00	; 0
    4588:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
										 LCD_VidSendStrig("Enter Pass:");
    458c:	88 ea       	ldi	r24, 0xA8	; 168
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										 pass=0;
    4594:	fe 01       	movw	r30, r28
    4596:	e3 5d       	subi	r30, 0xD3	; 211
    4598:	fe 4f       	sbci	r31, 0xFE	; 254
    459a:	11 82       	std	Z+1, r1	; 0x01
    459c:	10 82       	st	Z, r1
    459e:	b1 c0       	rjmp	.+354    	; 0x4702 <main+0x23dc>

									 }
									 else
									 {
										 //block user
										 DIO_VidSetPinValue(DIO_PORTA,DIO_PIN5 ,DIO_HIGH);
    45a0:	80 e0       	ldi	r24, 0x00	; 0
    45a2:	65 e0       	ldi	r22, 0x05	; 5
    45a4:	41 e0       	ldi	r20, 0x01	; 1
    45a6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
										 LCD_VidSendStrig(" login blocked");
    45aa:	8a e7       	ldi	r24, 0x7A	; 122
    45ac:	91 e0       	ldi	r25, 0x01	; 1
    45ae:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    45b2:	82 e0       	ldi	r24, 0x02	; 2
    45b4:	60 e0       	ldi	r22, 0x00	; 0
    45b6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
										 LCD_VidSendStrig("wait 2 minutes");
    45ba:	89 e8       	ldi	r24, 0x89	; 137
    45bc:	91 e0       	ldi	r25, 0x01	; 1
    45be:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    45c2:	80 e0       	ldi	r24, 0x00	; 0
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	aa ef       	ldi	r26, 0xFA	; 250
    45c8:	b4 e4       	ldi	r27, 0x44	; 68
    45ca:	89 8f       	std	Y+25, r24	; 0x19
    45cc:	9a 8f       	std	Y+26, r25	; 0x1a
    45ce:	ab 8f       	std	Y+27, r26	; 0x1b
    45d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45d2:	69 8d       	ldd	r22, Y+25	; 0x19
    45d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45da:	20 e0       	ldi	r18, 0x00	; 0
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	4a e7       	ldi	r20, 0x7A	; 122
    45e0:	55 e4       	ldi	r21, 0x45	; 69
    45e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    45e6:	dc 01       	movw	r26, r24
    45e8:	cb 01       	movw	r24, r22
    45ea:	8d 8b       	std	Y+21, r24	; 0x15
    45ec:	9e 8b       	std	Y+22, r25	; 0x16
    45ee:	af 8b       	std	Y+23, r26	; 0x17
    45f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45f2:	6d 89       	ldd	r22, Y+21	; 0x15
    45f4:	7e 89       	ldd	r23, Y+22	; 0x16
    45f6:	8f 89       	ldd	r24, Y+23	; 0x17
    45f8:	98 8d       	ldd	r25, Y+24	; 0x18
    45fa:	20 e0       	ldi	r18, 0x00	; 0
    45fc:	30 e0       	ldi	r19, 0x00	; 0
    45fe:	40 e8       	ldi	r20, 0x80	; 128
    4600:	5f e3       	ldi	r21, 0x3F	; 63
    4602:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4606:	88 23       	and	r24, r24
    4608:	2c f4       	brge	.+10     	; 0x4614 <main+0x22ee>
		__ticks = 1;
    460a:	81 e0       	ldi	r24, 0x01	; 1
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	9c 8b       	std	Y+20, r25	; 0x14
    4610:	8b 8b       	std	Y+19, r24	; 0x13
    4612:	3f c0       	rjmp	.+126    	; 0x4692 <main+0x236c>
	else if (__tmp > 65535)
    4614:	6d 89       	ldd	r22, Y+21	; 0x15
    4616:	7e 89       	ldd	r23, Y+22	; 0x16
    4618:	8f 89       	ldd	r24, Y+23	; 0x17
    461a:	98 8d       	ldd	r25, Y+24	; 0x18
    461c:	20 e0       	ldi	r18, 0x00	; 0
    461e:	3f ef       	ldi	r19, 0xFF	; 255
    4620:	4f e7       	ldi	r20, 0x7F	; 127
    4622:	57 e4       	ldi	r21, 0x47	; 71
    4624:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4628:	18 16       	cp	r1, r24
    462a:	4c f5       	brge	.+82     	; 0x467e <main+0x2358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    462c:	69 8d       	ldd	r22, Y+25	; 0x19
    462e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4630:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4632:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4634:	20 e0       	ldi	r18, 0x00	; 0
    4636:	30 e0       	ldi	r19, 0x00	; 0
    4638:	40 e2       	ldi	r20, 0x20	; 32
    463a:	51 e4       	ldi	r21, 0x41	; 65
    463c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4640:	dc 01       	movw	r26, r24
    4642:	cb 01       	movw	r24, r22
    4644:	bc 01       	movw	r22, r24
    4646:	cd 01       	movw	r24, r26
    4648:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    464c:	dc 01       	movw	r26, r24
    464e:	cb 01       	movw	r24, r22
    4650:	9c 8b       	std	Y+20, r25	; 0x14
    4652:	8b 8b       	std	Y+19, r24	; 0x13
    4654:	0f c0       	rjmp	.+30     	; 0x4674 <main+0x234e>
    4656:	80 e9       	ldi	r24, 0x90	; 144
    4658:	91 e0       	ldi	r25, 0x01	; 1
    465a:	9a 8b       	std	Y+18, r25	; 0x12
    465c:	89 8b       	std	Y+17, r24	; 0x11
    465e:	89 89       	ldd	r24, Y+17	; 0x11
    4660:	9a 89       	ldd	r25, Y+18	; 0x12
    4662:	01 97       	sbiw	r24, 0x01	; 1
    4664:	f1 f7       	brne	.-4      	; 0x4662 <main+0x233c>
    4666:	9a 8b       	std	Y+18, r25	; 0x12
    4668:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    466a:	8b 89       	ldd	r24, Y+19	; 0x13
    466c:	9c 89       	ldd	r25, Y+20	; 0x14
    466e:	01 97       	sbiw	r24, 0x01	; 1
    4670:	9c 8b       	std	Y+20, r25	; 0x14
    4672:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4674:	8b 89       	ldd	r24, Y+19	; 0x13
    4676:	9c 89       	ldd	r25, Y+20	; 0x14
    4678:	00 97       	sbiw	r24, 0x00	; 0
    467a:	69 f7       	brne	.-38     	; 0x4656 <main+0x2330>
    467c:	14 c0       	rjmp	.+40     	; 0x46a6 <main+0x2380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    467e:	6d 89       	ldd	r22, Y+21	; 0x15
    4680:	7e 89       	ldd	r23, Y+22	; 0x16
    4682:	8f 89       	ldd	r24, Y+23	; 0x17
    4684:	98 8d       	ldd	r25, Y+24	; 0x18
    4686:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    468a:	dc 01       	movw	r26, r24
    468c:	cb 01       	movw	r24, r22
    468e:	9c 8b       	std	Y+20, r25	; 0x14
    4690:	8b 8b       	std	Y+19, r24	; 0x13
    4692:	8b 89       	ldd	r24, Y+19	; 0x13
    4694:	9c 89       	ldd	r25, Y+20	; 0x14
    4696:	98 8b       	std	Y+16, r25	; 0x10
    4698:	8f 87       	std	Y+15, r24	; 0x0f
    469a:	8f 85       	ldd	r24, Y+15	; 0x0f
    469c:	98 89       	ldd	r25, Y+16	; 0x10
    469e:	01 97       	sbiw	r24, 0x01	; 1
    46a0:	f1 f7       	brne	.-4      	; 0x469e <main+0x2378>
    46a2:	98 8b       	std	Y+16, r25	; 0x10
    46a4:	8f 87       	std	Y+15, r24	; 0x0f
										 _delay_ms(2000);
										 DIO_VidSetPinValue(DIO_PORTA,DIO_PIN5 ,DIO_LOW);
    46a6:	80 e0       	ldi	r24, 0x00	; 0
    46a8:	65 e0       	ldi	r22, 0x05	; 5
    46aa:	40 e0       	ldi	r20, 0x00	; 0
    46ac:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
										 LCD_SEND_COMMAND(0x01);
    46b0:	81 e0       	ldi	r24, 0x01	; 1
    46b2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
										 LCD_VidSendStrig(" Select Mode:");
    46b6:	8d e7       	ldi	r24, 0x7D	; 125
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										 LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    46be:	82 e0       	ldi	r24, 0x02	; 2
    46c0:	60 e0       	ldi	r22, 0x00	; 0
    46c2:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
										 LCD_VidSendStrig("0:Admin 1:Guest");
    46c6:	8b e8       	ldi	r24, 0x8B	; 139
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										 flag=0;
    46ce:	fe 01       	movw	r30, r28
    46d0:	e7 5d       	subi	r30, 0xD7	; 215
    46d2:	fe 4f       	sbci	r31, 0xFE	; 254
    46d4:	10 82       	st	Z, r1
										 counter=0;
    46d6:	fe 01       	movw	r30, r28
    46d8:	e6 5d       	subi	r30, 0xD6	; 214
    46da:	fe 4f       	sbci	r31, 0xFE	; 254
    46dc:	10 82       	st	Z, r1
										 pass=0;
    46de:	fe 01       	movw	r30, r28
    46e0:	e3 5d       	subi	r30, 0xD3	; 211
    46e2:	fe 4f       	sbci	r31, 0xFE	; 254
    46e4:	11 82       	std	Z+1, r1	; 0x01
    46e6:	10 82       	st	Z, r1
    46e8:	0c c0       	rjmp	.+24     	; 0x4702 <main+0x23dc>

							 }


						 }
							if(flag2==0)
    46ea:	fe 01       	movw	r30, r28
    46ec:	e8 5d       	subi	r30, 0xD8	; 216
    46ee:	fe 4f       	sbci	r31, 0xFE	; 254
    46f0:	80 81       	ld	r24, Z
    46f2:	88 23       	and	r24, r24
    46f4:	09 f0       	breq	.+2      	; 0x46f8 <main+0x23d2>
    46f6:	42 cc       	rjmp	.-1916   	; 0x3f7c <main+0x1c56>
							{
								flag2=1;
    46f8:	fe 01       	movw	r30, r28
    46fa:	e8 5d       	subi	r30, 0xD8	; 216
    46fc:	fe 4f       	sbci	r31, 0xFE	; 254
    46fe:	81 e0       	ldi	r24, 0x01	; 1
    4700:	80 83       	st	Z, r24
							}



					}//end of while 2
					if(flag==0)
    4702:	fe 01       	movw	r30, r28
    4704:	e7 5d       	subi	r30, 0xD7	; 215
    4706:	fe 4f       	sbci	r31, 0xFE	; 254
    4708:	80 81       	ld	r24, Z
    470a:	88 23       	and	r24, r24
    470c:	09 f0       	breq	.+2      	; 0x4710 <main+0x23ea>
    470e:	36 cc       	rjmp	.-1940   	; 0x3f7c <main+0x1c56>
					{
						flag=1;
    4710:	fe 01       	movw	r30, r28
    4712:	e7 5d       	subi	r30, 0xD7	; 215
    4714:	fe 4f       	sbci	r31, 0xFE	; 254
    4716:	81 e0       	ldi	r24, 0x01	; 1
    4718:	80 83       	st	Z, r24
    471a:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <main+0x286>

			}
		else
		{
			//wrong entry
			LCD_SEND_COMMAND(0x01);
    471e:	81 e0       	ldi	r24, 0x01	; 1
    4720:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
			LCD_VidSendStrig(" wrong choice");
    4724:	84 e3       	ldi	r24, 0x34	; 52
    4726:	91 e0       	ldi	r25, 0x01	; 1
    4728:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
		    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    472c:	82 e0       	ldi	r24, 0x02	; 2
    472e:	60 e0       	ldi	r22, 0x00	; 0
    4730:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
			LCD_VidSendStrig("choose again");
    4734:	82 e4       	ldi	r24, 0x42	; 66
    4736:	91 e0       	ldi	r25, 0x01	; 1
    4738:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    473c:	80 e0       	ldi	r24, 0x00	; 0
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	aa ef       	ldi	r26, 0xFA	; 250
    4742:	b3 e4       	ldi	r27, 0x43	; 67
    4744:	8b 87       	std	Y+11, r24	; 0x0b
    4746:	9c 87       	std	Y+12, r25	; 0x0c
    4748:	ad 87       	std	Y+13, r26	; 0x0d
    474a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    474c:	6b 85       	ldd	r22, Y+11	; 0x0b
    474e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4750:	8d 85       	ldd	r24, Y+13	; 0x0d
    4752:	9e 85       	ldd	r25, Y+14	; 0x0e
    4754:	20 e0       	ldi	r18, 0x00	; 0
    4756:	30 e0       	ldi	r19, 0x00	; 0
    4758:	4a e7       	ldi	r20, 0x7A	; 122
    475a:	55 e4       	ldi	r21, 0x45	; 69
    475c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4760:	dc 01       	movw	r26, r24
    4762:	cb 01       	movw	r24, r22
    4764:	8f 83       	std	Y+7, r24	; 0x07
    4766:	98 87       	std	Y+8, r25	; 0x08
    4768:	a9 87       	std	Y+9, r26	; 0x09
    476a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    476c:	6f 81       	ldd	r22, Y+7	; 0x07
    476e:	78 85       	ldd	r23, Y+8	; 0x08
    4770:	89 85       	ldd	r24, Y+9	; 0x09
    4772:	9a 85       	ldd	r25, Y+10	; 0x0a
    4774:	20 e0       	ldi	r18, 0x00	; 0
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	40 e8       	ldi	r20, 0x80	; 128
    477a:	5f e3       	ldi	r21, 0x3F	; 63
    477c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4780:	88 23       	and	r24, r24
    4782:	2c f4       	brge	.+10     	; 0x478e <main+0x2468>
		__ticks = 1;
    4784:	81 e0       	ldi	r24, 0x01	; 1
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	9e 83       	std	Y+6, r25	; 0x06
    478a:	8d 83       	std	Y+5, r24	; 0x05
    478c:	3f c0       	rjmp	.+126    	; 0x480c <main+0x24e6>
	else if (__tmp > 65535)
    478e:	6f 81       	ldd	r22, Y+7	; 0x07
    4790:	78 85       	ldd	r23, Y+8	; 0x08
    4792:	89 85       	ldd	r24, Y+9	; 0x09
    4794:	9a 85       	ldd	r25, Y+10	; 0x0a
    4796:	20 e0       	ldi	r18, 0x00	; 0
    4798:	3f ef       	ldi	r19, 0xFF	; 255
    479a:	4f e7       	ldi	r20, 0x7F	; 127
    479c:	57 e4       	ldi	r21, 0x47	; 71
    479e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    47a2:	18 16       	cp	r1, r24
    47a4:	4c f5       	brge	.+82     	; 0x47f8 <main+0x24d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    47a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    47aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    47ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    47ae:	20 e0       	ldi	r18, 0x00	; 0
    47b0:	30 e0       	ldi	r19, 0x00	; 0
    47b2:	40 e2       	ldi	r20, 0x20	; 32
    47b4:	51 e4       	ldi	r21, 0x41	; 65
    47b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47ba:	dc 01       	movw	r26, r24
    47bc:	cb 01       	movw	r24, r22
    47be:	bc 01       	movw	r22, r24
    47c0:	cd 01       	movw	r24, r26
    47c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    47c6:	dc 01       	movw	r26, r24
    47c8:	cb 01       	movw	r24, r22
    47ca:	9e 83       	std	Y+6, r25	; 0x06
    47cc:	8d 83       	std	Y+5, r24	; 0x05
    47ce:	0f c0       	rjmp	.+30     	; 0x47ee <main+0x24c8>
    47d0:	80 e9       	ldi	r24, 0x90	; 144
    47d2:	91 e0       	ldi	r25, 0x01	; 1
    47d4:	9c 83       	std	Y+4, r25	; 0x04
    47d6:	8b 83       	std	Y+3, r24	; 0x03
    47d8:	8b 81       	ldd	r24, Y+3	; 0x03
    47da:	9c 81       	ldd	r25, Y+4	; 0x04
    47dc:	01 97       	sbiw	r24, 0x01	; 1
    47de:	f1 f7       	brne	.-4      	; 0x47dc <main+0x24b6>
    47e0:	9c 83       	std	Y+4, r25	; 0x04
    47e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47e4:	8d 81       	ldd	r24, Y+5	; 0x05
    47e6:	9e 81       	ldd	r25, Y+6	; 0x06
    47e8:	01 97       	sbiw	r24, 0x01	; 1
    47ea:	9e 83       	std	Y+6, r25	; 0x06
    47ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47ee:	8d 81       	ldd	r24, Y+5	; 0x05
    47f0:	9e 81       	ldd	r25, Y+6	; 0x06
    47f2:	00 97       	sbiw	r24, 0x00	; 0
    47f4:	69 f7       	brne	.-38     	; 0x47d0 <main+0x24aa>
    47f6:	14 c0       	rjmp	.+40     	; 0x4820 <main+0x24fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47f8:	6f 81       	ldd	r22, Y+7	; 0x07
    47fa:	78 85       	ldd	r23, Y+8	; 0x08
    47fc:	89 85       	ldd	r24, Y+9	; 0x09
    47fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4800:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4804:	dc 01       	movw	r26, r24
    4806:	cb 01       	movw	r24, r22
    4808:	9e 83       	std	Y+6, r25	; 0x06
    480a:	8d 83       	std	Y+5, r24	; 0x05
    480c:	8d 81       	ldd	r24, Y+5	; 0x05
    480e:	9e 81       	ldd	r25, Y+6	; 0x06
    4810:	9a 83       	std	Y+2, r25	; 0x02
    4812:	89 83       	std	Y+1, r24	; 0x01
    4814:	89 81       	ldd	r24, Y+1	; 0x01
    4816:	9a 81       	ldd	r25, Y+2	; 0x02
    4818:	01 97       	sbiw	r24, 0x01	; 1
    481a:	f1 f7       	brne	.-4      	; 0x4818 <main+0x24f2>
    481c:	9a 83       	std	Y+2, r25	; 0x02
    481e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LCD_SEND_COMMAND(0x01);
    4820:	81 e0       	ldi	r24, 0x01	; 1
    4822:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
			LCD_VidSendStrig(" Select Mode:");
    4826:	8d e7       	ldi	r24, 0x7D	; 125
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
			LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    482e:	82 e0       	ldi	r24, 0x02	; 2
    4830:	60 e0       	ldi	r22, 0x00	; 0
    4832:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
			LCD_VidSendStrig("0:Admin 1:Guest");
    4836:	8b e8       	ldi	r24, 0x8B	; 139
    4838:	90 e0       	ldi	r25, 0x00	; 0
    483a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    483e:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <main+0x286>

00004842 <__vector_16>:
}



ISR(ADC_vect)
{
    4842:	1f 92       	push	r1
    4844:	0f 92       	push	r0
    4846:	0f b6       	in	r0, 0x3f	; 63
    4848:	0f 92       	push	r0
    484a:	11 24       	eor	r1, r1
    484c:	2f 93       	push	r18
    484e:	3f 93       	push	r19
    4850:	4f 93       	push	r20
    4852:	5f 93       	push	r21
    4854:	6f 93       	push	r22
    4856:	7f 93       	push	r23
    4858:	8f 93       	push	r24
    485a:	9f 93       	push	r25
    485c:	af 93       	push	r26
    485e:	bf 93       	push	r27
    4860:	ef 93       	push	r30
    4862:	ff 93       	push	r31
    4864:	df 93       	push	r29
    4866:	cf 93       	push	r28
    4868:	cd b7       	in	r28, 0x3d	; 61
    486a:	de b7       	in	r29, 0x3e	; 62
    486c:	a4 97       	sbiw	r28, 0x24	; 36
    486e:	de bf       	out	0x3e, r29	; 62
    4870:	cd bf       	out	0x3d, r28	; 61
	//ISR for ADC IN interrupt mode for the LDR
	u16 LOC_U16DigitalRes, LOC_U16AnalogRES ,LOC_U16Light,LDR;

	LOC_U16DigitalRes=ADC;
    4872:	e4 e2       	ldi	r30, 0x24	; 36
    4874:	f0 e0       	ldi	r31, 0x00	; 0
    4876:	80 81       	ld	r24, Z
    4878:	91 81       	ldd	r25, Z+1	; 0x01
    487a:	9c a3       	std	Y+36, r25	; 0x24
    487c:	8b a3       	std	Y+35, r24	; 0x23

	LOC_U16AnalogRES= (u16)((LOC_U16DigitalRes *5000UL)/1024);
    487e:	8b a1       	ldd	r24, Y+35	; 0x23
    4880:	9c a1       	ldd	r25, Y+36	; 0x24
    4882:	cc 01       	movw	r24, r24
    4884:	a0 e0       	ldi	r26, 0x00	; 0
    4886:	b0 e0       	ldi	r27, 0x00	; 0
    4888:	28 e8       	ldi	r18, 0x88	; 136
    488a:	33 e1       	ldi	r19, 0x13	; 19
    488c:	40 e0       	ldi	r20, 0x00	; 0
    488e:	50 e0       	ldi	r21, 0x00	; 0
    4890:	bc 01       	movw	r22, r24
    4892:	cd 01       	movw	r24, r26
    4894:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <__mulsi3>
    4898:	dc 01       	movw	r26, r24
    489a:	cb 01       	movw	r24, r22
    489c:	07 2e       	mov	r0, r23
    489e:	7a e0       	ldi	r23, 0x0A	; 10
    48a0:	b6 95       	lsr	r27
    48a2:	a7 95       	ror	r26
    48a4:	97 95       	ror	r25
    48a6:	87 95       	ror	r24
    48a8:	7a 95       	dec	r23
    48aa:	d1 f7       	brne	.-12     	; 0x48a0 <__vector_16+0x5e>
    48ac:	70 2d       	mov	r23, r0
    48ae:	9a a3       	std	Y+34, r25	; 0x22
    48b0:	89 a3       	std	Y+33, r24	; 0x21

	LOC_U16Light=LOC_U16AnalogRES;
    48b2:	89 a1       	ldd	r24, Y+33	; 0x21
    48b4:	9a a1       	ldd	r25, Y+34	; 0x22
    48b6:	98 a3       	std	Y+32, r25	; 0x20
    48b8:	8f 8f       	std	Y+31, r24	; 0x1f

	LDR=(1*5000 -LOC_U16Light*1)/LOC_U16Light;
    48ba:	28 e8       	ldi	r18, 0x88	; 136
    48bc:	33 e1       	ldi	r19, 0x13	; 19
    48be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    48c0:	98 a1       	ldd	r25, Y+32	; 0x20
    48c2:	a9 01       	movw	r20, r18
    48c4:	48 1b       	sub	r20, r24
    48c6:	59 0b       	sbc	r21, r25
    48c8:	ca 01       	movw	r24, r20
    48ca:	2f 8d       	ldd	r18, Y+31	; 0x1f
    48cc:	38 a1       	ldd	r19, Y+32	; 0x20
    48ce:	b9 01       	movw	r22, r18
    48d0:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <__udivmodhi4>
    48d4:	cb 01       	movw	r24, r22
    48d6:	9e 8f       	std	Y+30, r25	; 0x1e
    48d8:	8d 8f       	std	Y+29, r24	; 0x1d
	if(LDR>200) //dark we need 2 leds
    48da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    48dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    48de:	89 3c       	cpi	r24, 0xC9	; 201
    48e0:	91 05       	cpc	r25, r1
    48e2:	58 f0       	brcs	.+22     	; 0x48fa <__vector_16+0xb8>
	{
	 DIO_VidSetPinValue(DIO_PORTD,DIO_PIN3,DIO_HIGH);
    48e4:	83 e0       	ldi	r24, 0x03	; 3
    48e6:	63 e0       	ldi	r22, 0x03	; 3
    48e8:	41 e0       	ldi	r20, 0x01	; 1
    48ea:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
	 DIO_VidSetPinValue(DIO_PORTD,DIO_PIN2,DIO_HIGH);
    48ee:	83 e0       	ldi	r24, 0x03	; 3
    48f0:	62 e0       	ldi	r22, 0x02	; 2
    48f2:	41 e0       	ldi	r20, 0x01	; 1
    48f4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
    48f8:	0b c1       	rjmp	.+534    	; 0x4b10 <__vector_16+0x2ce>

	}
	else if(LDR>55 && LDR<=200)// one led
    48fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    48fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    48fe:	88 33       	cpi	r24, 0x38	; 56
    4900:	91 05       	cpc	r25, r1
    4902:	08 f4       	brcc	.+2      	; 0x4906 <__vector_16+0xc4>
    4904:	83 c0       	rjmp	.+262    	; 0x4a0c <__vector_16+0x1ca>
    4906:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4908:	9e 8d       	ldd	r25, Y+30	; 0x1e
    490a:	89 3c       	cpi	r24, 0xC9	; 201
    490c:	91 05       	cpc	r25, r1
    490e:	08 f0       	brcs	.+2      	; 0x4912 <__vector_16+0xd0>
    4910:	7d c0       	rjmp	.+250    	; 0x4a0c <__vector_16+0x1ca>
	{
		 DIO_VidSetPinValue(DIO_PORTD,DIO_PIN3,DIO_HIGH);
    4912:	83 e0       	ldi	r24, 0x03	; 3
    4914:	63 e0       	ldi	r22, 0x03	; 3
    4916:	41 e0       	ldi	r20, 0x01	; 1
    4918:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
		 DIO_VidSetPinValue(DIO_PORTD,DIO_PIN2,DIO_LOW);
    491c:	83 e0       	ldi	r24, 0x03	; 3
    491e:	62 e0       	ldi	r22, 0x02	; 2
    4920:	40 e0       	ldi	r20, 0x00	; 0
    4922:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
    4926:	80 e0       	ldi	r24, 0x00	; 0
    4928:	90 e0       	ldi	r25, 0x00	; 0
    492a:	aa ef       	ldi	r26, 0xFA	; 250
    492c:	b3 e4       	ldi	r27, 0x43	; 67
    492e:	89 8f       	std	Y+25, r24	; 0x19
    4930:	9a 8f       	std	Y+26, r25	; 0x1a
    4932:	ab 8f       	std	Y+27, r26	; 0x1b
    4934:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4936:	69 8d       	ldd	r22, Y+25	; 0x19
    4938:	7a 8d       	ldd	r23, Y+26	; 0x1a
    493a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    493c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    493e:	20 e0       	ldi	r18, 0x00	; 0
    4940:	30 e0       	ldi	r19, 0x00	; 0
    4942:	4a e7       	ldi	r20, 0x7A	; 122
    4944:	55 e4       	ldi	r21, 0x45	; 69
    4946:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    494a:	dc 01       	movw	r26, r24
    494c:	cb 01       	movw	r24, r22
    494e:	8d 8b       	std	Y+21, r24	; 0x15
    4950:	9e 8b       	std	Y+22, r25	; 0x16
    4952:	af 8b       	std	Y+23, r26	; 0x17
    4954:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4956:	6d 89       	ldd	r22, Y+21	; 0x15
    4958:	7e 89       	ldd	r23, Y+22	; 0x16
    495a:	8f 89       	ldd	r24, Y+23	; 0x17
    495c:	98 8d       	ldd	r25, Y+24	; 0x18
    495e:	20 e0       	ldi	r18, 0x00	; 0
    4960:	30 e0       	ldi	r19, 0x00	; 0
    4962:	40 e8       	ldi	r20, 0x80	; 128
    4964:	5f e3       	ldi	r21, 0x3F	; 63
    4966:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    496a:	88 23       	and	r24, r24
    496c:	2c f4       	brge	.+10     	; 0x4978 <__vector_16+0x136>
		__ticks = 1;
    496e:	81 e0       	ldi	r24, 0x01	; 1
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	9c 8b       	std	Y+20, r25	; 0x14
    4974:	8b 8b       	std	Y+19, r24	; 0x13
    4976:	3f c0       	rjmp	.+126    	; 0x49f6 <__vector_16+0x1b4>
	else if (__tmp > 65535)
    4978:	6d 89       	ldd	r22, Y+21	; 0x15
    497a:	7e 89       	ldd	r23, Y+22	; 0x16
    497c:	8f 89       	ldd	r24, Y+23	; 0x17
    497e:	98 8d       	ldd	r25, Y+24	; 0x18
    4980:	20 e0       	ldi	r18, 0x00	; 0
    4982:	3f ef       	ldi	r19, 0xFF	; 255
    4984:	4f e7       	ldi	r20, 0x7F	; 127
    4986:	57 e4       	ldi	r21, 0x47	; 71
    4988:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    498c:	18 16       	cp	r1, r24
    498e:	4c f5       	brge	.+82     	; 0x49e2 <__vector_16+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4990:	69 8d       	ldd	r22, Y+25	; 0x19
    4992:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4994:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4996:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4998:	20 e0       	ldi	r18, 0x00	; 0
    499a:	30 e0       	ldi	r19, 0x00	; 0
    499c:	40 e2       	ldi	r20, 0x20	; 32
    499e:	51 e4       	ldi	r21, 0x41	; 65
    49a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    49a4:	dc 01       	movw	r26, r24
    49a6:	cb 01       	movw	r24, r22
    49a8:	bc 01       	movw	r22, r24
    49aa:	cd 01       	movw	r24, r26
    49ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    49b0:	dc 01       	movw	r26, r24
    49b2:	cb 01       	movw	r24, r22
    49b4:	9c 8b       	std	Y+20, r25	; 0x14
    49b6:	8b 8b       	std	Y+19, r24	; 0x13
    49b8:	0f c0       	rjmp	.+30     	; 0x49d8 <__vector_16+0x196>
    49ba:	80 e9       	ldi	r24, 0x90	; 144
    49bc:	91 e0       	ldi	r25, 0x01	; 1
    49be:	9a 8b       	std	Y+18, r25	; 0x12
    49c0:	89 8b       	std	Y+17, r24	; 0x11
    49c2:	89 89       	ldd	r24, Y+17	; 0x11
    49c4:	9a 89       	ldd	r25, Y+18	; 0x12
    49c6:	01 97       	sbiw	r24, 0x01	; 1
    49c8:	f1 f7       	brne	.-4      	; 0x49c6 <__vector_16+0x184>
    49ca:	9a 8b       	std	Y+18, r25	; 0x12
    49cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49ce:	8b 89       	ldd	r24, Y+19	; 0x13
    49d0:	9c 89       	ldd	r25, Y+20	; 0x14
    49d2:	01 97       	sbiw	r24, 0x01	; 1
    49d4:	9c 8b       	std	Y+20, r25	; 0x14
    49d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49d8:	8b 89       	ldd	r24, Y+19	; 0x13
    49da:	9c 89       	ldd	r25, Y+20	; 0x14
    49dc:	00 97       	sbiw	r24, 0x00	; 0
    49de:	69 f7       	brne	.-38     	; 0x49ba <__vector_16+0x178>
    49e0:	97 c0       	rjmp	.+302    	; 0x4b10 <__vector_16+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49e2:	6d 89       	ldd	r22, Y+21	; 0x15
    49e4:	7e 89       	ldd	r23, Y+22	; 0x16
    49e6:	8f 89       	ldd	r24, Y+23	; 0x17
    49e8:	98 8d       	ldd	r25, Y+24	; 0x18
    49ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    49ee:	dc 01       	movw	r26, r24
    49f0:	cb 01       	movw	r24, r22
    49f2:	9c 8b       	std	Y+20, r25	; 0x14
    49f4:	8b 8b       	std	Y+19, r24	; 0x13
    49f6:	8b 89       	ldd	r24, Y+19	; 0x13
    49f8:	9c 89       	ldd	r25, Y+20	; 0x14
    49fa:	98 8b       	std	Y+16, r25	; 0x10
    49fc:	8f 87       	std	Y+15, r24	; 0x0f
    49fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a00:	98 89       	ldd	r25, Y+16	; 0x10
    4a02:	01 97       	sbiw	r24, 0x01	; 1
    4a04:	f1 f7       	brne	.-4      	; 0x4a02 <__vector_16+0x1c0>
    4a06:	98 8b       	std	Y+16, r25	; 0x10
    4a08:	8f 87       	std	Y+15, r24	; 0x0f
    4a0a:	82 c0       	rjmp	.+260    	; 0x4b10 <__vector_16+0x2ce>
		 _delay_ms(500);

	}
	else if(LDR>=0 && LDR<=55) // no leds on
    4a0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4a10:	88 33       	cpi	r24, 0x38	; 56
    4a12:	91 05       	cpc	r25, r1
    4a14:	08 f0       	brcs	.+2      	; 0x4a18 <__vector_16+0x1d6>
    4a16:	7c c0       	rjmp	.+248    	; 0x4b10 <__vector_16+0x2ce>
	{
		 DIO_VidSetPinValue(DIO_PORTD,DIO_PIN3,DIO_LOW);
    4a18:	83 e0       	ldi	r24, 0x03	; 3
    4a1a:	63 e0       	ldi	r22, 0x03	; 3
    4a1c:	40 e0       	ldi	r20, 0x00	; 0
    4a1e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
		 DIO_VidSetPinValue(DIO_PORTD,DIO_PIN2,DIO_LOW);
    4a22:	83 e0       	ldi	r24, 0x03	; 3
    4a24:	62 e0       	ldi	r22, 0x02	; 2
    4a26:	40 e0       	ldi	r20, 0x00	; 0
    4a28:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
    4a2c:	80 e0       	ldi	r24, 0x00	; 0
    4a2e:	90 e0       	ldi	r25, 0x00	; 0
    4a30:	aa ef       	ldi	r26, 0xFA	; 250
    4a32:	b3 e4       	ldi	r27, 0x43	; 67
    4a34:	8b 87       	std	Y+11, r24	; 0x0b
    4a36:	9c 87       	std	Y+12, r25	; 0x0c
    4a38:	ad 87       	std	Y+13, r26	; 0x0d
    4a3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a44:	20 e0       	ldi	r18, 0x00	; 0
    4a46:	30 e0       	ldi	r19, 0x00	; 0
    4a48:	4a e7       	ldi	r20, 0x7A	; 122
    4a4a:	55 e4       	ldi	r21, 0x45	; 69
    4a4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a50:	dc 01       	movw	r26, r24
    4a52:	cb 01       	movw	r24, r22
    4a54:	8f 83       	std	Y+7, r24	; 0x07
    4a56:	98 87       	std	Y+8, r25	; 0x08
    4a58:	a9 87       	std	Y+9, r26	; 0x09
    4a5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a5e:	78 85       	ldd	r23, Y+8	; 0x08
    4a60:	89 85       	ldd	r24, Y+9	; 0x09
    4a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a64:	20 e0       	ldi	r18, 0x00	; 0
    4a66:	30 e0       	ldi	r19, 0x00	; 0
    4a68:	40 e8       	ldi	r20, 0x80	; 128
    4a6a:	5f e3       	ldi	r21, 0x3F	; 63
    4a6c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4a70:	88 23       	and	r24, r24
    4a72:	2c f4       	brge	.+10     	; 0x4a7e <__vector_16+0x23c>
		__ticks = 1;
    4a74:	81 e0       	ldi	r24, 0x01	; 1
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	9e 83       	std	Y+6, r25	; 0x06
    4a7a:	8d 83       	std	Y+5, r24	; 0x05
    4a7c:	3f c0       	rjmp	.+126    	; 0x4afc <__vector_16+0x2ba>
	else if (__tmp > 65535)
    4a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    4a80:	78 85       	ldd	r23, Y+8	; 0x08
    4a82:	89 85       	ldd	r24, Y+9	; 0x09
    4a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a86:	20 e0       	ldi	r18, 0x00	; 0
    4a88:	3f ef       	ldi	r19, 0xFF	; 255
    4a8a:	4f e7       	ldi	r20, 0x7F	; 127
    4a8c:	57 e4       	ldi	r21, 0x47	; 71
    4a8e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4a92:	18 16       	cp	r1, r24
    4a94:	4c f5       	brge	.+82     	; 0x4ae8 <__vector_16+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a96:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a98:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	30 e0       	ldi	r19, 0x00	; 0
    4aa2:	40 e2       	ldi	r20, 0x20	; 32
    4aa4:	51 e4       	ldi	r21, 0x41	; 65
    4aa6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4aaa:	dc 01       	movw	r26, r24
    4aac:	cb 01       	movw	r24, r22
    4aae:	bc 01       	movw	r22, r24
    4ab0:	cd 01       	movw	r24, r26
    4ab2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	9e 83       	std	Y+6, r25	; 0x06
    4abc:	8d 83       	std	Y+5, r24	; 0x05
    4abe:	0f c0       	rjmp	.+30     	; 0x4ade <__vector_16+0x29c>
    4ac0:	80 e9       	ldi	r24, 0x90	; 144
    4ac2:	91 e0       	ldi	r25, 0x01	; 1
    4ac4:	9c 83       	std	Y+4, r25	; 0x04
    4ac6:	8b 83       	std	Y+3, r24	; 0x03
    4ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    4aca:	9c 81       	ldd	r25, Y+4	; 0x04
    4acc:	01 97       	sbiw	r24, 0x01	; 1
    4ace:	f1 f7       	brne	.-4      	; 0x4acc <__vector_16+0x28a>
    4ad0:	9c 83       	std	Y+4, r25	; 0x04
    4ad2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ad8:	01 97       	sbiw	r24, 0x01	; 1
    4ada:	9e 83       	std	Y+6, r25	; 0x06
    4adc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ade:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae2:	00 97       	sbiw	r24, 0x00	; 0
    4ae4:	69 f7       	brne	.-38     	; 0x4ac0 <__vector_16+0x27e>
    4ae6:	14 c0       	rjmp	.+40     	; 0x4b10 <__vector_16+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    4aea:	78 85       	ldd	r23, Y+8	; 0x08
    4aec:	89 85       	ldd	r24, Y+9	; 0x09
    4aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4af0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4af4:	dc 01       	movw	r26, r24
    4af6:	cb 01       	movw	r24, r22
    4af8:	9e 83       	std	Y+6, r25	; 0x06
    4afa:	8d 83       	std	Y+5, r24	; 0x05
    4afc:	8d 81       	ldd	r24, Y+5	; 0x05
    4afe:	9e 81       	ldd	r25, Y+6	; 0x06
    4b00:	9a 83       	std	Y+2, r25	; 0x02
    4b02:	89 83       	std	Y+1, r24	; 0x01
    4b04:	89 81       	ldd	r24, Y+1	; 0x01
    4b06:	9a 81       	ldd	r25, Y+2	; 0x02
    4b08:	01 97       	sbiw	r24, 0x01	; 1
    4b0a:	f1 f7       	brne	.-4      	; 0x4b08 <__vector_16+0x2c6>
    4b0c:	9a 83       	std	Y+2, r25	; 0x02
    4b0e:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(500);
	}
    //adc start convertion again
	SET_BIT(ADCSRA,ADSC);
    4b10:	a6 e2       	ldi	r26, 0x26	; 38
    4b12:	b0 e0       	ldi	r27, 0x00	; 0
    4b14:	e6 e2       	ldi	r30, 0x26	; 38
    4b16:	f0 e0       	ldi	r31, 0x00	; 0
    4b18:	80 81       	ld	r24, Z
    4b1a:	80 64       	ori	r24, 0x40	; 64
    4b1c:	8c 93       	st	X, r24
}
    4b1e:	a4 96       	adiw	r28, 0x24	; 36
    4b20:	de bf       	out	0x3e, r29	; 62
    4b22:	cd bf       	out	0x3d, r28	; 61
    4b24:	cf 91       	pop	r28
    4b26:	df 91       	pop	r29
    4b28:	ff 91       	pop	r31
    4b2a:	ef 91       	pop	r30
    4b2c:	bf 91       	pop	r27
    4b2e:	af 91       	pop	r26
    4b30:	9f 91       	pop	r25
    4b32:	8f 91       	pop	r24
    4b34:	7f 91       	pop	r23
    4b36:	6f 91       	pop	r22
    4b38:	5f 91       	pop	r21
    4b3a:	4f 91       	pop	r20
    4b3c:	3f 91       	pop	r19
    4b3e:	2f 91       	pop	r18
    4b40:	0f 90       	pop	r0
    4b42:	0f be       	out	0x3f, r0	; 63
    4b44:	0f 90       	pop	r0
    4b46:	1f 90       	pop	r1
    4b48:	18 95       	reti

00004b4a <__mulsi3>:
    4b4a:	62 9f       	mul	r22, r18
    4b4c:	d0 01       	movw	r26, r0
    4b4e:	73 9f       	mul	r23, r19
    4b50:	f0 01       	movw	r30, r0
    4b52:	82 9f       	mul	r24, r18
    4b54:	e0 0d       	add	r30, r0
    4b56:	f1 1d       	adc	r31, r1
    4b58:	64 9f       	mul	r22, r20
    4b5a:	e0 0d       	add	r30, r0
    4b5c:	f1 1d       	adc	r31, r1
    4b5e:	92 9f       	mul	r25, r18
    4b60:	f0 0d       	add	r31, r0
    4b62:	83 9f       	mul	r24, r19
    4b64:	f0 0d       	add	r31, r0
    4b66:	74 9f       	mul	r23, r20
    4b68:	f0 0d       	add	r31, r0
    4b6a:	65 9f       	mul	r22, r21
    4b6c:	f0 0d       	add	r31, r0
    4b6e:	99 27       	eor	r25, r25
    4b70:	72 9f       	mul	r23, r18
    4b72:	b0 0d       	add	r27, r0
    4b74:	e1 1d       	adc	r30, r1
    4b76:	f9 1f       	adc	r31, r25
    4b78:	63 9f       	mul	r22, r19
    4b7a:	b0 0d       	add	r27, r0
    4b7c:	e1 1d       	adc	r30, r1
    4b7e:	f9 1f       	adc	r31, r25
    4b80:	bd 01       	movw	r22, r26
    4b82:	cf 01       	movw	r24, r30
    4b84:	11 24       	eor	r1, r1
    4b86:	08 95       	ret

00004b88 <__udivmodhi4>:
    4b88:	aa 1b       	sub	r26, r26
    4b8a:	bb 1b       	sub	r27, r27
    4b8c:	51 e1       	ldi	r21, 0x11	; 17
    4b8e:	07 c0       	rjmp	.+14     	; 0x4b9e <__udivmodhi4_ep>

00004b90 <__udivmodhi4_loop>:
    4b90:	aa 1f       	adc	r26, r26
    4b92:	bb 1f       	adc	r27, r27
    4b94:	a6 17       	cp	r26, r22
    4b96:	b7 07       	cpc	r27, r23
    4b98:	10 f0       	brcs	.+4      	; 0x4b9e <__udivmodhi4_ep>
    4b9a:	a6 1b       	sub	r26, r22
    4b9c:	b7 0b       	sbc	r27, r23

00004b9e <__udivmodhi4_ep>:
    4b9e:	88 1f       	adc	r24, r24
    4ba0:	99 1f       	adc	r25, r25
    4ba2:	5a 95       	dec	r21
    4ba4:	a9 f7       	brne	.-22     	; 0x4b90 <__udivmodhi4_loop>
    4ba6:	80 95       	com	r24
    4ba8:	90 95       	com	r25
    4baa:	bc 01       	movw	r22, r24
    4bac:	cd 01       	movw	r24, r26
    4bae:	08 95       	ret

00004bb0 <__prologue_saves__>:
    4bb0:	2f 92       	push	r2
    4bb2:	3f 92       	push	r3
    4bb4:	4f 92       	push	r4
    4bb6:	5f 92       	push	r5
    4bb8:	6f 92       	push	r6
    4bba:	7f 92       	push	r7
    4bbc:	8f 92       	push	r8
    4bbe:	9f 92       	push	r9
    4bc0:	af 92       	push	r10
    4bc2:	bf 92       	push	r11
    4bc4:	cf 92       	push	r12
    4bc6:	df 92       	push	r13
    4bc8:	ef 92       	push	r14
    4bca:	ff 92       	push	r15
    4bcc:	0f 93       	push	r16
    4bce:	1f 93       	push	r17
    4bd0:	cf 93       	push	r28
    4bd2:	df 93       	push	r29
    4bd4:	cd b7       	in	r28, 0x3d	; 61
    4bd6:	de b7       	in	r29, 0x3e	; 62
    4bd8:	ca 1b       	sub	r28, r26
    4bda:	db 0b       	sbc	r29, r27
    4bdc:	0f b6       	in	r0, 0x3f	; 63
    4bde:	f8 94       	cli
    4be0:	de bf       	out	0x3e, r29	; 62
    4be2:	0f be       	out	0x3f, r0	; 63
    4be4:	cd bf       	out	0x3d, r28	; 61
    4be6:	09 94       	ijmp

00004be8 <__epilogue_restores__>:
    4be8:	2a 88       	ldd	r2, Y+18	; 0x12
    4bea:	39 88       	ldd	r3, Y+17	; 0x11
    4bec:	48 88       	ldd	r4, Y+16	; 0x10
    4bee:	5f 84       	ldd	r5, Y+15	; 0x0f
    4bf0:	6e 84       	ldd	r6, Y+14	; 0x0e
    4bf2:	7d 84       	ldd	r7, Y+13	; 0x0d
    4bf4:	8c 84       	ldd	r8, Y+12	; 0x0c
    4bf6:	9b 84       	ldd	r9, Y+11	; 0x0b
    4bf8:	aa 84       	ldd	r10, Y+10	; 0x0a
    4bfa:	b9 84       	ldd	r11, Y+9	; 0x09
    4bfc:	c8 84       	ldd	r12, Y+8	; 0x08
    4bfe:	df 80       	ldd	r13, Y+7	; 0x07
    4c00:	ee 80       	ldd	r14, Y+6	; 0x06
    4c02:	fd 80       	ldd	r15, Y+5	; 0x05
    4c04:	0c 81       	ldd	r16, Y+4	; 0x04
    4c06:	1b 81       	ldd	r17, Y+3	; 0x03
    4c08:	aa 81       	ldd	r26, Y+2	; 0x02
    4c0a:	b9 81       	ldd	r27, Y+1	; 0x01
    4c0c:	ce 0f       	add	r28, r30
    4c0e:	d1 1d       	adc	r29, r1
    4c10:	0f b6       	in	r0, 0x3f	; 63
    4c12:	f8 94       	cli
    4c14:	de bf       	out	0x3e, r29	; 62
    4c16:	0f be       	out	0x3f, r0	; 63
    4c18:	cd bf       	out	0x3d, r28	; 61
    4c1a:	ed 01       	movw	r28, r26
    4c1c:	08 95       	ret

00004c1e <itoa>:
    4c1e:	fb 01       	movw	r30, r22
    4c20:	9f 01       	movw	r18, r30
    4c22:	e8 94       	clt
    4c24:	42 30       	cpi	r20, 0x02	; 2
    4c26:	c4 f0       	brlt	.+48     	; 0x4c58 <itoa+0x3a>
    4c28:	45 32       	cpi	r20, 0x25	; 37
    4c2a:	b4 f4       	brge	.+44     	; 0x4c58 <itoa+0x3a>
    4c2c:	4a 30       	cpi	r20, 0x0A	; 10
    4c2e:	29 f4       	brne	.+10     	; 0x4c3a <itoa+0x1c>
    4c30:	97 fb       	bst	r25, 7
    4c32:	1e f4       	brtc	.+6      	; 0x4c3a <itoa+0x1c>
    4c34:	90 95       	com	r25
    4c36:	81 95       	neg	r24
    4c38:	9f 4f       	sbci	r25, 0xFF	; 255
    4c3a:	64 2f       	mov	r22, r20
    4c3c:	77 27       	eor	r23, r23
    4c3e:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <__udivmodhi4>
    4c42:	80 5d       	subi	r24, 0xD0	; 208
    4c44:	8a 33       	cpi	r24, 0x3A	; 58
    4c46:	0c f0       	brlt	.+2      	; 0x4c4a <itoa+0x2c>
    4c48:	89 5d       	subi	r24, 0xD9	; 217
    4c4a:	81 93       	st	Z+, r24
    4c4c:	cb 01       	movw	r24, r22
    4c4e:	00 97       	sbiw	r24, 0x00	; 0
    4c50:	a1 f7       	brne	.-24     	; 0x4c3a <itoa+0x1c>
    4c52:	16 f4       	brtc	.+4      	; 0x4c58 <itoa+0x3a>
    4c54:	5d e2       	ldi	r21, 0x2D	; 45
    4c56:	51 93       	st	Z+, r21
    4c58:	10 82       	st	Z, r1
    4c5a:	c9 01       	movw	r24, r18
    4c5c:	0c 94 30 26 	jmp	0x4c60	; 0x4c60 <strrev>

00004c60 <strrev>:
    4c60:	dc 01       	movw	r26, r24
    4c62:	fc 01       	movw	r30, r24
    4c64:	67 2f       	mov	r22, r23
    4c66:	71 91       	ld	r23, Z+
    4c68:	77 23       	and	r23, r23
    4c6a:	e1 f7       	brne	.-8      	; 0x4c64 <strrev+0x4>
    4c6c:	32 97       	sbiw	r30, 0x02	; 2
    4c6e:	04 c0       	rjmp	.+8      	; 0x4c78 <strrev+0x18>
    4c70:	7c 91       	ld	r23, X
    4c72:	6d 93       	st	X+, r22
    4c74:	70 83       	st	Z, r23
    4c76:	62 91       	ld	r22, -Z
    4c78:	ae 17       	cp	r26, r30
    4c7a:	bf 07       	cpc	r27, r31
    4c7c:	c8 f3       	brcs	.-14     	; 0x4c70 <strrev+0x10>
    4c7e:	08 95       	ret

00004c80 <_exit>:
    4c80:	f8 94       	cli

00004c82 <__stop_program>:
    4c82:	ff cf       	rjmp	.-2      	; 0x4c82 <__stop_program>
