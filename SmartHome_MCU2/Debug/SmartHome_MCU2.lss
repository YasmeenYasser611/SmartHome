
SmartHome_MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000053be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e4  00800060  000053be  00005432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00004290  00000000  00000000  00005618  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f8c  00000000  00000000  000098a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000a834  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000a994  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000ab23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000cb68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000dc69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000ebec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000ed6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000f02e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000f8bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f3 e5       	ldi	r31, 0x53	; 83
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 34       	cpi	r26, 0x44	; 68
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 82 11 	call	0x2304	; 0x2304 <main>
      7a:	0c 94 dd 29 	jmp	0x53ba	; 0x53ba <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 61 29 	jmp	0x52c2	; 0x52c2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e2       	ldi	r26, 0x2C	; 44
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 7d 29 	jmp	0x52fa	; 0x52fa <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 6d 29 	jmp	0x52da	; 0x52da <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 89 29 	jmp	0x5312	; 0x5312 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 6d 29 	jmp	0x52da	; 0x52da <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 89 29 	jmp	0x5312	; 0x5312 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 61 29 	jmp	0x52c2	; 0x52c2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e2       	ldi	r24, 0x2C	; 44
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 7d 29 	jmp	0x52fa	; 0x52fa <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 69 29 	jmp	0x52d2	; 0x52d2 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6c e2       	ldi	r22, 0x2C	; 44
     68c:	72 e0       	ldi	r23, 0x02	; 2
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 85 29 	jmp	0x530a	; 0x530a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 6d 29 	jmp	0x52da	; 0x52da <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 89 29 	jmp	0x5312	; 0x5312 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 6d 29 	jmp	0x52da	; 0x52da <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 89 29 	jmp	0x5312	; 0x5312 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 6d 29 	jmp	0x52da	; 0x52da <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 89 29 	jmp	0x5312	; 0x5312 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 71 29 	jmp	0x52e2	; 0x52e2 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 8d 29 	jmp	0x531a	; 0x531a <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_VidSetPinDirection>:
#include"DIO.h"

//function for direction
void DIO_VidSetPinDirection( u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Direction)    //preph name_returntype_funcName
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	29 97       	sbiw	r28, 0x09	; 9
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6a 83       	std	Y+2, r22	; 0x02
     ca6:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_U8Direction)
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	39 87       	std	Y+9, r19	; 0x09
     cb0:	28 87       	std	Y+8, r18	; 0x08
     cb2:	88 85       	ldd	r24, Y+8	; 0x08
     cb4:	99 85       	ldd	r25, Y+9	; 0x09
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	39 f0       	breq	.+14     	; 0xcc8 <DIO_VidSetPinDirection+0x3a>
     cba:	28 85       	ldd	r18, Y+8	; 0x08
     cbc:	39 85       	ldd	r19, Y+9	; 0x09
     cbe:	21 30       	cpi	r18, 0x01	; 1
     cc0:	31 05       	cpc	r19, r1
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <DIO_VidSetPinDirection+0x38>
     cc4:	75 c0       	rjmp	.+234    	; 0xdb0 <DIO_VidSetPinDirection+0x122>
     cc6:	e2 c0       	rjmp	.+452    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	{
	    case DIO_INPUT:
	      switch(Copy_U8Port)
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	3f 83       	std	Y+7, r19	; 0x07
     cd0:	2e 83       	std	Y+6, r18	; 0x06
     cd2:	8e 81       	ldd	r24, Y+6	; 0x06
     cd4:	9f 81       	ldd	r25, Y+7	; 0x07
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	91 05       	cpc	r25, r1
     cda:	59 f1       	breq	.+86     	; 0xd32 <DIO_VidSetPinDirection+0xa4>
     cdc:	2e 81       	ldd	r18, Y+6	; 0x06
     cde:	3f 81       	ldd	r19, Y+7	; 0x07
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	2c f4       	brge	.+10     	; 0xcf0 <DIO_VidSetPinDirection+0x62>
     ce6:	8e 81       	ldd	r24, Y+6	; 0x06
     ce8:	9f 81       	ldd	r25, Y+7	; 0x07
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	69 f0       	breq	.+26     	; 0xd08 <DIO_VidSetPinDirection+0x7a>
     cee:	ce c0       	rjmp	.+412    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
     cf0:	2e 81       	ldd	r18, Y+6	; 0x06
     cf2:	3f 81       	ldd	r19, Y+7	; 0x07
     cf4:	22 30       	cpi	r18, 0x02	; 2
     cf6:	31 05       	cpc	r19, r1
     cf8:	89 f1       	breq	.+98     	; 0xd5c <DIO_VidSetPinDirection+0xce>
     cfa:	8e 81       	ldd	r24, Y+6	; 0x06
     cfc:	9f 81       	ldd	r25, Y+7	; 0x07
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	91 05       	cpc	r25, r1
     d02:	09 f4       	brne	.+2      	; 0xd06 <DIO_VidSetPinDirection+0x78>
     d04:	40 c0       	rjmp	.+128    	; 0xd86 <DIO_VidSetPinDirection+0xf8>
     d06:	c2 c0       	rjmp	.+388    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	      {
	    	case DIO_PORTA:
	    		CLR_BIT( DDRA , Copy_U8Pin);
     d08:	aa e3       	ldi	r26, 0x3A	; 58
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ea e3       	ldi	r30, 0x3A	; 58
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_VidSetPinDirection+0x98>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_VidSetPinDirection+0x94>
     d2a:	80 95       	com	r24
     d2c:	84 23       	and	r24, r20
     d2e:	8c 93       	st	X, r24
     d30:	ad c0       	rjmp	.+346    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    		break;
	    	case DIO_PORTB:
	    		CLR_BIT( DDRB , Copy_U8Pin);
     d32:	a7 e3       	ldi	r26, 0x37	; 55
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e7 e3       	ldi	r30, 0x37	; 55
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_VidSetPinDirection+0xc2>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_VidSetPinDirection+0xbe>
     d54:	80 95       	com	r24
     d56:	84 23       	and	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	98 c0       	rjmp	.+304    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    		break;
	    	case DIO_PORTC:
	    		CLR_BIT( DDRC , Copy_U8Pin);
     d5c:	a4 e3       	ldi	r26, 0x34	; 52
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e4 e3       	ldi	r30, 0x34	; 52
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	48 2f       	mov	r20, r24
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 2e       	mov	r0, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <DIO_VidSetPinDirection+0xec>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <DIO_VidSetPinDirection+0xe8>
     d7e:	80 95       	com	r24
     d80:	84 23       	and	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	83 c0       	rjmp	.+262    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    	    break;
	    	case DIO_PORTD:
	    		CLR_BIT( DDRD , Copy_U8Pin);
     d86:	a1 e3       	ldi	r26, 0x31	; 49
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e1 e3       	ldi	r30, 0x31	; 49
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_VidSetPinDirection+0x116>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_VidSetPinDirection+0x112>
     da8:	80 95       	com	r24
     daa:	84 23       	and	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	6e c0       	rjmp	.+220    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    	    break;

	      }
	      break;
	    case DIO_OUTPUT:
	    	switch(Copy_U8Port)
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	3d 83       	std	Y+5, r19	; 0x05
     db8:	2c 83       	std	Y+4, r18	; 0x04
     dba:	8c 81       	ldd	r24, Y+4	; 0x04
     dbc:	9d 81       	ldd	r25, Y+5	; 0x05
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	91 05       	cpc	r25, r1
     dc2:	49 f1       	breq	.+82     	; 0xe16 <DIO_VidSetPinDirection+0x188>
     dc4:	2c 81       	ldd	r18, Y+4	; 0x04
     dc6:	3d 81       	ldd	r19, Y+5	; 0x05
     dc8:	22 30       	cpi	r18, 0x02	; 2
     dca:	31 05       	cpc	r19, r1
     dcc:	2c f4       	brge	.+10     	; 0xdd8 <DIO_VidSetPinDirection+0x14a>
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	9d 81       	ldd	r25, Y+5	; 0x05
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	61 f0       	breq	.+24     	; 0xdee <DIO_VidSetPinDirection+0x160>
     dd6:	5a c0       	rjmp	.+180    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
     dd8:	2c 81       	ldd	r18, Y+4	; 0x04
     dda:	3d 81       	ldd	r19, Y+5	; 0x05
     ddc:	22 30       	cpi	r18, 0x02	; 2
     dde:	31 05       	cpc	r19, r1
     de0:	71 f1       	breq	.+92     	; 0xe3e <DIO_VidSetPinDirection+0x1b0>
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	9d 81       	ldd	r25, Y+5	; 0x05
     de6:	83 30       	cpi	r24, 0x03	; 3
     de8:	91 05       	cpc	r25, r1
     dea:	e9 f1       	breq	.+122    	; 0xe66 <DIO_VidSetPinDirection+0x1d8>
     dec:	4f c0       	rjmp	.+158    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    		    {
	    		    	case DIO_PORTA:
	    		    		SET_BIT( DDRA , Copy_U8Pin);
     dee:	aa e3       	ldi	r26, 0x3A	; 58
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	ea e3       	ldi	r30, 0x3A	; 58
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_VidSetPinDirection+0x17e>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_VidSetPinDirection+0x17a>
     e10:	84 2b       	or	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	3b c0       	rjmp	.+118    	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    		    		break;
	    		    	case DIO_PORTB:
	    		    		SET_BIT( DDRB , Copy_U8Pin);
     e16:	a7 e3       	ldi	r26, 0x37	; 55
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e7 e3       	ldi	r30, 0x37	; 55
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_VidSetPinDirection+0x1a6>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_VidSetPinDirection+0x1a2>
     e38:	84 2b       	or	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	27 c0       	rjmp	.+78     	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    		    		break;
	    		    	case DIO_PORTC:
	    		    		SET_BIT( DDRC , Copy_U8Pin);
     e3e:	a4 e3       	ldi	r26, 0x34	; 52
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e4 e3       	ldi	r30, 0x34	; 52
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_VidSetPinDirection+0x1ce>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <DIO_VidSetPinDirection+0x1ca>
     e60:	84 2b       	or	r24, r20
     e62:	8c 93       	st	X, r24
     e64:	13 c0       	rjmp	.+38     	; 0xe8c <DIO_VidSetPinDirection+0x1fe>
	    		    	    break;
	    		    	case DIO_PORTD:
	    		    		SET_BIT( DDRD , Copy_U8Pin);
     e66:	a1 e3       	ldi	r26, 0x31	; 49
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e1 e3       	ldi	r30, 0x31	; 49
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_VidSetPinDirection+0x1f6>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_VidSetPinDirection+0x1f2>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
	    		    	    break;
	    		    }
	    	break;
	}
}
     e8c:	29 96       	adiw	r28, 0x09	; 9
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <DIO_VidSetPinValue>:
//function for value
void DIO_VidSetPinValue( u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Value)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	29 97       	sbiw	r28, 0x09	; 9
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	6a 83       	std	Y+2, r22	; 0x02
     eb6:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_U8Value)
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	39 87       	std	Y+9, r19	; 0x09
     ec0:	28 87       	std	Y+8, r18	; 0x08
     ec2:	88 85       	ldd	r24, Y+8	; 0x08
     ec4:	99 85       	ldd	r25, Y+9	; 0x09
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	39 f0       	breq	.+14     	; 0xed8 <DIO_VidSetPinValue+0x3a>
     eca:	28 85       	ldd	r18, Y+8	; 0x08
     ecc:	39 85       	ldd	r19, Y+9	; 0x09
     ece:	21 30       	cpi	r18, 0x01	; 1
     ed0:	31 05       	cpc	r19, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <DIO_VidSetPinValue+0x38>
     ed4:	75 c0       	rjmp	.+234    	; 0xfc0 <DIO_VidSetPinValue+0x122>
     ed6:	e2 c0       	rjmp	.+452    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	{
	    case DIO_LOW:
	      switch(Copy_U8Port)
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	3f 83       	std	Y+7, r19	; 0x07
     ee0:	2e 83       	std	Y+6, r18	; 0x06
     ee2:	8e 81       	ldd	r24, Y+6	; 0x06
     ee4:	9f 81       	ldd	r25, Y+7	; 0x07
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	59 f1       	breq	.+86     	; 0xf42 <DIO_VidSetPinValue+0xa4>
     eec:	2e 81       	ldd	r18, Y+6	; 0x06
     eee:	3f 81       	ldd	r19, Y+7	; 0x07
     ef0:	22 30       	cpi	r18, 0x02	; 2
     ef2:	31 05       	cpc	r19, r1
     ef4:	2c f4       	brge	.+10     	; 0xf00 <DIO_VidSetPinValue+0x62>
     ef6:	8e 81       	ldd	r24, Y+6	; 0x06
     ef8:	9f 81       	ldd	r25, Y+7	; 0x07
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	69 f0       	breq	.+26     	; 0xf18 <DIO_VidSetPinValue+0x7a>
     efe:	ce c0       	rjmp	.+412    	; 0x109c <DIO_VidSetPinValue+0x1fe>
     f00:	2e 81       	ldd	r18, Y+6	; 0x06
     f02:	3f 81       	ldd	r19, Y+7	; 0x07
     f04:	22 30       	cpi	r18, 0x02	; 2
     f06:	31 05       	cpc	r19, r1
     f08:	89 f1       	breq	.+98     	; 0xf6c <DIO_VidSetPinValue+0xce>
     f0a:	8e 81       	ldd	r24, Y+6	; 0x06
     f0c:	9f 81       	ldd	r25, Y+7	; 0x07
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	91 05       	cpc	r25, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <DIO_VidSetPinValue+0x78>
     f14:	40 c0       	rjmp	.+128    	; 0xf96 <DIO_VidSetPinValue+0xf8>
     f16:	c2 c0       	rjmp	.+388    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	      {
	    	case DIO_PORTA:
	    		CLR_BIT( PORTA , Copy_U8Pin);
     f18:	ab e3       	ldi	r26, 0x3B	; 59
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	eb e3       	ldi	r30, 0x3B	; 59
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <DIO_VidSetPinValue+0x98>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <DIO_VidSetPinValue+0x94>
     f3a:	80 95       	com	r24
     f3c:	84 23       	and	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	ad c0       	rjmp	.+346    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    		break;
	    	case DIO_PORTB:
	    		CLR_BIT( PORTB , Copy_U8Pin);
     f42:	a8 e3       	ldi	r26, 0x38	; 56
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e3       	ldi	r30, 0x38	; 56
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_VidSetPinValue+0xc2>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_VidSetPinValue+0xbe>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	98 c0       	rjmp	.+304    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    		break;
	    	case DIO_PORTC:
	    		CLR_BIT( PORTC , Copy_U8Pin);
     f6c:	a5 e3       	ldi	r26, 0x35	; 53
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e5 e3       	ldi	r30, 0x35	; 53
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_VidSetPinValue+0xec>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_VidSetPinValue+0xe8>
     f8e:	80 95       	com	r24
     f90:	84 23       	and	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	83 c0       	rjmp	.+262    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    	    break;
	    	case DIO_PORTD:
	    		CLR_BIT( PORTD , Copy_U8Pin);
     f96:	a2 e3       	ldi	r26, 0x32	; 50
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e2 e3       	ldi	r30, 0x32	; 50
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_VidSetPinValue+0x116>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_VidSetPinValue+0x112>
     fb8:	80 95       	com	r24
     fba:	84 23       	and	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	6e c0       	rjmp	.+220    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    	    break;

	      }
	      break;
	    case DIO_HIGH:
	    	switch(Copy_U8Port)
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	3d 83       	std	Y+5, r19	; 0x05
     fc8:	2c 83       	std	Y+4, r18	; 0x04
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	9d 81       	ldd	r25, Y+5	; 0x05
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	91 05       	cpc	r25, r1
     fd2:	49 f1       	breq	.+82     	; 0x1026 <DIO_VidSetPinValue+0x188>
     fd4:	2c 81       	ldd	r18, Y+4	; 0x04
     fd6:	3d 81       	ldd	r19, Y+5	; 0x05
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	2c f4       	brge	.+10     	; 0xfe8 <DIO_VidSetPinValue+0x14a>
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	61 f0       	breq	.+24     	; 0xffe <DIO_VidSetPinValue+0x160>
     fe6:	5a c0       	rjmp	.+180    	; 0x109c <DIO_VidSetPinValue+0x1fe>
     fe8:	2c 81       	ldd	r18, Y+4	; 0x04
     fea:	3d 81       	ldd	r19, Y+5	; 0x05
     fec:	22 30       	cpi	r18, 0x02	; 2
     fee:	31 05       	cpc	r19, r1
     ff0:	71 f1       	breq	.+92     	; 0x104e <DIO_VidSetPinValue+0x1b0>
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	83 30       	cpi	r24, 0x03	; 3
     ff8:	91 05       	cpc	r25, r1
     ffa:	e9 f1       	breq	.+122    	; 0x1076 <DIO_VidSetPinValue+0x1d8>
     ffc:	4f c0       	rjmp	.+158    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    		    {
	    		    	case DIO_PORTA:
	    		    		SET_BIT( PORTA , Copy_U8Pin);
     ffe:	ab e3       	ldi	r26, 0x3B	; 59
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	eb e3       	ldi	r30, 0x3B	; 59
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_VidSetPinValue+0x17e>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_VidSetPinValue+0x17a>
    1020:	84 2b       	or	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	3b c0       	rjmp	.+118    	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    		    		break;
	    		    	case DIO_PORTB:
	    		    		SET_BIT( PORTB , Copy_U8Pin);
    1026:	a8 e3       	ldi	r26, 0x38	; 56
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e8 e3       	ldi	r30, 0x38	; 56
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_VidSetPinValue+0x1a6>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_VidSetPinValue+0x1a2>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	27 c0       	rjmp	.+78     	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    		    		break;
	    		    	case DIO_PORTC:
	    		    		SET_BIT( PORTC , Copy_U8Pin);
    104e:	a5 e3       	ldi	r26, 0x35	; 53
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e5 e3       	ldi	r30, 0x35	; 53
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_VidSetPinValue+0x1ce>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_VidSetPinValue+0x1ca>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	13 c0       	rjmp	.+38     	; 0x109c <DIO_VidSetPinValue+0x1fe>
	    		    	    break;
	    		    	case DIO_PORTD:
	    		    		SET_BIT( PORTD , Copy_U8Pin);
    1076:	a2 e3       	ldi	r26, 0x32	; 50
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e2 e3       	ldi	r30, 0x32	; 50
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_VidSetPinValue+0x1f6>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_VidSetPinValue+0x1f2>
    1098:	84 2b       	or	r24, r20
    109a:	8c 93       	st	X, r24
	    		    	    break;
	    		    }
	    	        break;
	}

}
    109c:	29 96       	adiw	r28, 0x09	; 9
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <DIO_VidSetPortDirection>:


 //function to set port direction
void DIO_VidSetPortDirection(u8 Copy_U8Port , u8 Copy_U8Direction)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <DIO_VidSetPortDirection+0x6>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <DIO_VidSetPortDirection+0x8>
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	3c 83       	std	Y+4, r19	; 0x04
    10c6:	2b 83       	std	Y+3, r18	; 0x03
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	91 05       	cpc	r25, r1
    10d0:	d1 f0       	breq	.+52     	; 0x1106 <DIO_VidSetPortDirection+0x58>
    10d2:	2b 81       	ldd	r18, Y+3	; 0x03
    10d4:	3c 81       	ldd	r19, Y+4	; 0x04
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	2c f4       	brge	.+10     	; 0x10e6 <DIO_VidSetPortDirection+0x38>
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	61 f0       	breq	.+24     	; 0x10fc <DIO_VidSetPortDirection+0x4e>
    10e4:	1e c0       	rjmp	.+60     	; 0x1122 <DIO_VidSetPortDirection+0x74>
    10e6:	2b 81       	ldd	r18, Y+3	; 0x03
    10e8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	81 f0       	breq	.+32     	; 0x1110 <DIO_VidSetPortDirection+0x62>
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	91 05       	cpc	r25, r1
    10f8:	81 f0       	breq	.+32     	; 0x111a <DIO_VidSetPortDirection+0x6c>
    10fa:	13 c0       	rjmp	.+38     	; 0x1122 <DIO_VidSetPortDirection+0x74>
		    {
		    	case DIO_PORTA:
		    		DDRA= Copy_U8Direction;
    10fc:	ea e3       	ldi	r30, 0x3A	; 58
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	80 83       	st	Z, r24
    1104:	0e c0       	rjmp	.+28     	; 0x1122 <DIO_VidSetPortDirection+0x74>
		    		break;
		    	case DIO_PORTB:
		    		DDRB= Copy_U8Direction;
    1106:	e7 e3       	ldi	r30, 0x37	; 55
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	80 83       	st	Z, r24
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <DIO_VidSetPortDirection+0x74>
		    		break;
		    	case DIO_PORTC:
		    		DDRC= Copy_U8Direction;
    1110:	e4 e3       	ldi	r30, 0x34	; 52
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	80 83       	st	Z, r24
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <DIO_VidSetPortDirection+0x74>
		    	    break;
		    	case DIO_PORTD:
		    		DDRD= Copy_U8Direction;
    111a:	e1 e3       	ldi	r30, 0x31	; 49
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	80 83       	st	Z, r24
		    	    break;
		    }

}
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <DIO_VidSetPortValue>:
//functio to set the port value
void DIO_VidSetPortValue(u8 Copy_U8Port , u8 Copy_U8Value)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <DIO_VidSetPortValue+0x6>
    1136:	00 d0       	rcall	.+0      	; 0x1138 <DIO_VidSetPortValue+0x8>
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3c 83       	std	Y+4, r19	; 0x04
    1148:	2b 83       	std	Y+3, r18	; 0x03
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	91 05       	cpc	r25, r1
    1152:	d1 f0       	breq	.+52     	; 0x1188 <DIO_VidSetPortValue+0x58>
    1154:	2b 81       	ldd	r18, Y+3	; 0x03
    1156:	3c 81       	ldd	r19, Y+4	; 0x04
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	2c f4       	brge	.+10     	; 0x1168 <DIO_VidSetPortValue+0x38>
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	61 f0       	breq	.+24     	; 0x117e <DIO_VidSetPortValue+0x4e>
    1166:	1e c0       	rjmp	.+60     	; 0x11a4 <DIO_VidSetPortValue+0x74>
    1168:	2b 81       	ldd	r18, Y+3	; 0x03
    116a:	3c 81       	ldd	r19, Y+4	; 0x04
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	81 f0       	breq	.+32     	; 0x1192 <DIO_VidSetPortValue+0x62>
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	81 f0       	breq	.+32     	; 0x119c <DIO_VidSetPortValue+0x6c>
    117c:	13 c0       	rjmp	.+38     	; 0x11a4 <DIO_VidSetPortValue+0x74>
		    {
		    	case DIO_PORTA:
		    		PORTA= Copy_U8Value;
    117e:	eb e3       	ldi	r30, 0x3B	; 59
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	80 83       	st	Z, r24
    1186:	0e c0       	rjmp	.+28     	; 0x11a4 <DIO_VidSetPortValue+0x74>
		    		break;
		    	case DIO_PORTB:
		    		PORTB= Copy_U8Value;
    1188:	e8 e3       	ldi	r30, 0x38	; 56
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	80 83       	st	Z, r24
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <DIO_VidSetPortValue+0x74>
		    		break;
		    	case DIO_PORTC:
		    		PORTC= Copy_U8Value;
    1192:	e5 e3       	ldi	r30, 0x35	; 53
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	80 83       	st	Z, r24
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <DIO_VidSetPortValue+0x74>
		    	    break;
		    	case DIO_PORTD:
		    		PORTD= Copy_U8Value;
    119c:	e2 e3       	ldi	r30, 0x32	; 50
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	80 83       	st	Z, r24
		    	    break;
		    }

}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <DIO_VidTogglePinValue>:
//function to toggle the pin
void DIO_VidTogglePinValue(u8 Copy_U8Port , u8 Copy_U8Pin)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <DIO_VidTogglePinValue+0x6>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <DIO_VidTogglePinValue+0x8>
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	3c 83       	std	Y+4, r19	; 0x04
    11ca:	2b 83       	std	Y+3, r18	; 0x03
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	91 05       	cpc	r25, r1
    11d4:	49 f1       	breq	.+82     	; 0x1228 <DIO_VidTogglePinValue+0x76>
    11d6:	2b 81       	ldd	r18, Y+3	; 0x03
    11d8:	3c 81       	ldd	r19, Y+4	; 0x04
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	2c f4       	brge	.+10     	; 0x11ea <DIO_VidTogglePinValue+0x38>
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	61 f0       	breq	.+24     	; 0x1200 <DIO_VidTogglePinValue+0x4e>
    11e8:	5a c0       	rjmp	.+180    	; 0x129e <DIO_VidTogglePinValue+0xec>
    11ea:	2b 81       	ldd	r18, Y+3	; 0x03
    11ec:	3c 81       	ldd	r19, Y+4	; 0x04
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	71 f1       	breq	.+92     	; 0x1250 <DIO_VidTogglePinValue+0x9e>
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	91 05       	cpc	r25, r1
    11fc:	e9 f1       	breq	.+122    	; 0x1278 <DIO_VidTogglePinValue+0xc6>
    11fe:	4f c0       	rjmp	.+158    	; 0x129e <DIO_VidTogglePinValue+0xec>
		    {
		    	case DIO_PORTA:
		    		TOGGLE_BIT(PORTA , Copy_U8Pin);
    1200:	ab e3       	ldi	r26, 0x3B	; 59
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	eb e3       	ldi	r30, 0x3B	; 59
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_VidTogglePinValue+0x6c>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_VidTogglePinValue+0x68>
    1222:	84 27       	eor	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	3b c0       	rjmp	.+118    	; 0x129e <DIO_VidTogglePinValue+0xec>
		    		break;
		    	case DIO_PORTB:
		    		TOGGLE_BIT(PORTB , Copy_U8Pin);
    1228:	a8 e3       	ldi	r26, 0x38	; 56
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e8 e3       	ldi	r30, 0x38	; 56
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_VidTogglePinValue+0x94>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_VidTogglePinValue+0x90>
    124a:	84 27       	eor	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	27 c0       	rjmp	.+78     	; 0x129e <DIO_VidTogglePinValue+0xec>
		    		break;
		    	case DIO_PORTC:
		    		TOGGLE_BIT(PORTC , Copy_U8Pin);
    1250:	a5 e3       	ldi	r26, 0x35	; 53
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e5 e3       	ldi	r30, 0x35	; 53
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_VidTogglePinValue+0xbc>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_VidTogglePinValue+0xb8>
    1272:	84 27       	eor	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	13 c0       	rjmp	.+38     	; 0x129e <DIO_VidTogglePinValue+0xec>
		    	    break;
		    	case DIO_PORTD:
		    		TOGGLE_BIT(PORTD , Copy_U8Pin);
    1278:	a2 e3       	ldi	r26, 0x32	; 50
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e2 e3       	ldi	r30, 0x32	; 50
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_VidTogglePinValue+0xe4>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_VidTogglePinValue+0xe0>
    129a:	84 27       	eor	r24, r20
    129c:	8c 93       	st	X, r24
		    	    break;
		    }

}
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <DIO_U8Get_PinValue>:

u8 DIO_U8Get_PinValue(u8 Copy_U8Port , u8 Copy_U8Pin)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <DIO_U8Get_PinValue+0x6>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <DIO_U8Get_PinValue+0x8>
    12b4:	0f 92       	push	r0
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	8a 83       	std	Y+2, r24	; 0x02
    12bc:	6b 83       	std	Y+3, r22	; 0x03
	u8 read;
	switch(Copy_U8Port)
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	3d 83       	std	Y+5, r19	; 0x05
    12c6:	2c 83       	std	Y+4, r18	; 0x04
    12c8:	4c 81       	ldd	r20, Y+4	; 0x04
    12ca:	5d 81       	ldd	r21, Y+5	; 0x05
    12cc:	41 30       	cpi	r20, 0x01	; 1
    12ce:	51 05       	cpc	r21, r1
    12d0:	41 f1       	breq	.+80     	; 0x1322 <DIO_U8Get_PinValue+0x76>
    12d2:	8c 81       	ldd	r24, Y+4	; 0x04
    12d4:	9d 81       	ldd	r25, Y+5	; 0x05
    12d6:	82 30       	cpi	r24, 0x02	; 2
    12d8:	91 05       	cpc	r25, r1
    12da:	34 f4       	brge	.+12     	; 0x12e8 <DIO_U8Get_PinValue+0x3c>
    12dc:	2c 81       	ldd	r18, Y+4	; 0x04
    12de:	3d 81       	ldd	r19, Y+5	; 0x05
    12e0:	21 15       	cp	r18, r1
    12e2:	31 05       	cpc	r19, r1
    12e4:	61 f0       	breq	.+24     	; 0x12fe <DIO_U8Get_PinValue+0x52>
    12e6:	52 c0       	rjmp	.+164    	; 0x138c <DIO_U8Get_PinValue+0xe0>
    12e8:	4c 81       	ldd	r20, Y+4	; 0x04
    12ea:	5d 81       	ldd	r21, Y+5	; 0x05
    12ec:	42 30       	cpi	r20, 0x02	; 2
    12ee:	51 05       	cpc	r21, r1
    12f0:	51 f1       	breq	.+84     	; 0x1346 <DIO_U8Get_PinValue+0x9a>
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	9d 81       	ldd	r25, Y+5	; 0x05
    12f6:	83 30       	cpi	r24, 0x03	; 3
    12f8:	91 05       	cpc	r25, r1
    12fa:	b9 f1       	breq	.+110    	; 0x136a <DIO_U8Get_PinValue+0xbe>
    12fc:	47 c0       	rjmp	.+142    	; 0x138c <DIO_U8Get_PinValue+0xe0>
			    {
			    	case DIO_PORTA:
			    		read =GET_BIT(PINA , Copy_U8Pin);
    12fe:	e9 e3       	ldi	r30, 0x39	; 57
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	88 2f       	mov	r24, r24
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a9 01       	movw	r20, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_U8Get_PinValue+0x6a>
    1312:	55 95       	asr	r21
    1314:	47 95       	ror	r20
    1316:	8a 95       	dec	r24
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_U8Get_PinValue+0x66>
    131a:	ca 01       	movw	r24, r20
    131c:	81 70       	andi	r24, 0x01	; 1
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	35 c0       	rjmp	.+106    	; 0x138c <DIO_U8Get_PinValue+0xe0>
			    		break;
			    	case DIO_PORTB:
			    		read=GET_BIT(PINB , Copy_U8Pin);
    1322:	e6 e3       	ldi	r30, 0x36	; 54
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a9 01       	movw	r20, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_U8Get_PinValue+0x8e>
    1336:	55 95       	asr	r21
    1338:	47 95       	ror	r20
    133a:	8a 95       	dec	r24
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_U8Get_PinValue+0x8a>
    133e:	ca 01       	movw	r24, r20
    1340:	81 70       	andi	r24, 0x01	; 1
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	23 c0       	rjmp	.+70     	; 0x138c <DIO_U8Get_PinValue+0xe0>
			    		break;
			    	case DIO_PORTC:
			    		read=GET_BIT(PINC , Copy_U8Pin);
    1346:	e3 e3       	ldi	r30, 0x33	; 51
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	a9 01       	movw	r20, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_U8Get_PinValue+0xb2>
    135a:	55 95       	asr	r21
    135c:	47 95       	ror	r20
    135e:	8a 95       	dec	r24
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_U8Get_PinValue+0xae>
    1362:	ca 01       	movw	r24, r20
    1364:	81 70       	andi	r24, 0x01	; 1
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	11 c0       	rjmp	.+34     	; 0x138c <DIO_U8Get_PinValue+0xe0>
			    	    break;
			    	case DIO_PORTD:
			    		read=GET_BIT(PIND , Copy_U8Pin);
    136a:	e0 e3       	ldi	r30, 0x30	; 48
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a9 01       	movw	r20, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_U8Get_PinValue+0xd6>
    137e:	55 95       	asr	r21
    1380:	47 95       	ror	r20
    1382:	8a 95       	dec	r24
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_U8Get_PinValue+0xd2>
    1386:	ca 01       	movw	r24, r20
    1388:	81 70       	andi	r24, 0x01	; 1
    138a:	89 83       	std	Y+1, r24	; 0x01
			    	    break;
			    }
	return read;
    138c:	89 81       	ldd	r24, Y+1	; 0x01
}
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <KPD_Init>:




void KPD_Init(void)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPortDirection(KPD_PORT, KPD_PORT_DIRECTION);
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	60 ef       	ldi	r22, 0xF0	; 240
    13aa:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_VidSetPortDirection>
	DIO_VidSetPortValue(KPD_PORT,DIO_ALL_HIGH);  //0b 1111   1111
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	6f ef       	ldi	r22, 0xFF	; 255
    13b2:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_VidSetPortValue>
	                                             //   high + pull up res
}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <KPD_u8GetPressedKey>:


u8 KPD_u8GetPressedKey(void){
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	af 97       	sbiw	r28, 0x2f	; 47
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_u8PressedKey= 0xFF	, PinVal;
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Loc_u8KPDArr[KPD_ROW_NUM][KPD_COL_NUM]= KPD_ARR;
    13d4:	ce 01       	movw	r24, r28
    13d6:	43 96       	adiw	r24, 0x13	; 19
    13d8:	9c a7       	std	Y+44, r25	; 0x2c
    13da:	8b a7       	std	Y+43, r24	; 0x2b
    13dc:	e4 e3       	ldi	r30, 0x34	; 52
    13de:	f2 e0       	ldi	r31, 0x02	; 2
    13e0:	fe a7       	std	Y+46, r31	; 0x2e
    13e2:	ed a7       	std	Y+45, r30	; 0x2d
    13e4:	f0 e1       	ldi	r31, 0x10	; 16
    13e6:	ff a7       	std	Y+47, r31	; 0x2f
    13e8:	ed a5       	ldd	r30, Y+45	; 0x2d
    13ea:	fe a5       	ldd	r31, Y+46	; 0x2e
    13ec:	00 80       	ld	r0, Z
    13ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    13f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    13f2:	01 96       	adiw	r24, 0x01	; 1
    13f4:	9e a7       	std	Y+46, r25	; 0x2e
    13f6:	8d a7       	std	Y+45, r24	; 0x2d
    13f8:	eb a5       	ldd	r30, Y+43	; 0x2b
    13fa:	fc a5       	ldd	r31, Y+44	; 0x2c
    13fc:	00 82       	st	Z, r0
    13fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1400:	9c a5       	ldd	r25, Y+44	; 0x2c
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	9c a7       	std	Y+44, r25	; 0x2c
    1406:	8b a7       	std	Y+43, r24	; 0x2b
    1408:	9f a5       	ldd	r25, Y+47	; 0x2f
    140a:	91 50       	subi	r25, 0x01	; 1
    140c:	9f a7       	std	Y+47, r25	; 0x2f
    140e:	ef a5       	ldd	r30, Y+47	; 0x2f
    1410:	ee 23       	and	r30, r30
    1412:	51 f7       	brne	.-44     	; 0x13e8 <KPD_u8GetPressedKey+0x2c>
    u8 Loc_u8KPDCOLArr[KPD_COL_NUM]={COL1, COL2, COL3, COL4};
    1414:	84 e0       	ldi	r24, 0x04	; 4
    1416:	8b a3       	std	Y+35, r24	; 0x23
    1418:	85 e0       	ldi	r24, 0x05	; 5
    141a:	8c a3       	std	Y+36, r24	; 0x24
    141c:	86 e0       	ldi	r24, 0x06	; 6
    141e:	8d a3       	std	Y+37, r24	; 0x25
    1420:	87 e0       	ldi	r24, 0x07	; 7
    1422:	8e a3       	std	Y+38, r24	; 0x26
	u8 Loc_u8KPDROWArr[KPD_ROW_NUM]={ROW1, ROW2, ROW3, ROW4};
    1424:	1f a2       	std	Y+39, r1	; 0x27
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	88 a7       	std	Y+40, r24	; 0x28
    142a:	82 e0       	ldi	r24, 0x02	; 2
    142c:	89 a7       	std	Y+41, r24	; 0x29
    142e:	83 e0       	ldi	r24, 0x03	; 3
    1430:	8a a7       	std	Y+42, r24	; 0x2a
	for(u8 i=0; i < KPD_COL_NUM; i++)
    1432:	18 8a       	std	Y+16, r1	; 0x10
    1434:	d2 c0       	rjmp	.+420    	; 0x15da <KPD_u8GetPressedKey+0x21e>
	{ //loop for col
			/* ACTIVATE CURRENT COLUMN */
		DIO_VidSetPinValue(KPD_PORT, Loc_u8KPDCOLArr[i], DIO_LOW);
    1436:	88 89       	ldd	r24, Y+16	; 0x10
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	ce 01       	movw	r24, r28
    143e:	83 96       	adiw	r24, 0x23	; 35
    1440:	fc 01       	movw	r30, r24
    1442:	e2 0f       	add	r30, r18
    1444:	f3 1f       	adc	r31, r19
    1446:	90 81       	ld	r25, Z
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	69 2f       	mov	r22, r25
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
			/* SEARCH IF A ROW IS LOW THUS A KEY IS PRESSED */
		for(u8 j=0; j < KPD_ROW_NUM; j++ )
    1452:	1f 86       	std	Y+15, r1	; 0x0f
    1454:	ad c0       	rjmp	.+346    	; 0x15b0 <KPD_u8GetPressedKey+0x1f4>
		{//loop for rows
			PinVal=DIO_U8Get_PinValue(KPD_PORT, Loc_u8KPDROWArr[j]);
    1456:	8f 85       	ldd	r24, Y+15	; 0x0f
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	ce 01       	movw	r24, r28
    145e:	87 96       	adiw	r24, 0x27	; 39
    1460:	fc 01       	movw	r30, r24
    1462:	e2 0f       	add	r30, r18
    1464:	f3 1f       	adc	r31, r19
    1466:	90 81       	ld	r25, Z
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	69 2f       	mov	r22, r25
    146c:	0e 94 56 09 	call	0x12ac	; 0x12ac <DIO_U8Get_PinValue>
    1470:	89 8b       	std	Y+17, r24	; 0x11
				/* CHECK IF SWITCH IS PRESSED */
			if( DIO_LOW == PinVal)
    1472:	89 89       	ldd	r24, Y+17	; 0x11
    1474:	88 23       	and	r24, r24
    1476:	09 f0       	breq	.+2      	; 0x147a <KPD_u8GetPressedKey+0xbe>
    1478:	98 c0       	rjmp	.+304    	; 0x15aa <KPD_u8GetPressedKey+0x1ee>
			{
				Loc_u8PressedKey = Loc_u8KPDArr[j][i];
    147a:	8f 85       	ldd	r24, Y+15	; 0x0f
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	88 89       	ldd	r24, Y+16	; 0x10
    1482:	48 2f       	mov	r20, r24
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	22 0f       	add	r18, r18
    1488:	33 1f       	adc	r19, r19
    148a:	22 0f       	add	r18, r18
    148c:	33 1f       	adc	r19, r19
    148e:	ce 01       	movw	r24, r28
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	82 0f       	add	r24, r18
    1494:	93 1f       	adc	r25, r19
    1496:	84 0f       	add	r24, r20
    1498:	95 1f       	adc	r25, r21
    149a:	fc 01       	movw	r30, r24
    149c:	72 96       	adiw	r30, 0x12	; 18
    149e:	80 81       	ld	r24, Z
    14a0:	8a 8b       	std	Y+18, r24	; 0x12
    14a2:	0e c0       	rjmp	.+28     	; 0x14c0 <KPD_u8GetPressedKey+0x104>
					/* Polling ( wait till button is released ) */
				while( DIO_LOW == PinVal	)
				{
					PinVal=DIO_U8Get_PinValue(KPD_PORT, Loc_u8KPDROWArr[j]);
    14a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	ce 01       	movw	r24, r28
    14ac:	87 96       	adiw	r24, 0x27	; 39
    14ae:	fc 01       	movw	r30, r24
    14b0:	e2 0f       	add	r30, r18
    14b2:	f3 1f       	adc	r31, r19
    14b4:	90 81       	ld	r25, Z
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	69 2f       	mov	r22, r25
    14ba:	0e 94 56 09 	call	0x12ac	; 0x12ac <DIO_U8Get_PinValue>
    14be:	89 8b       	std	Y+17, r24	; 0x11
				/* CHECK IF SWITCH IS PRESSED */
			if( DIO_LOW == PinVal)
			{
				Loc_u8PressedKey = Loc_u8KPDArr[j][i];
					/* Polling ( wait till button is released ) */
				while( DIO_LOW == PinVal	)
    14c0:	89 89       	ldd	r24, Y+17	; 0x11
    14c2:	88 23       	and	r24, r24
    14c4:	79 f3       	breq	.-34     	; 0x14a4 <KPD_u8GetPressedKey+0xe8>
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	a0 e2       	ldi	r26, 0x20	; 32
    14cc:	b1 e4       	ldi	r27, 0x41	; 65
    14ce:	8b 87       	std	Y+11, r24	; 0x0b
    14d0:	9c 87       	std	Y+12, r25	; 0x0c
    14d2:	ad 87       	std	Y+13, r26	; 0x0d
    14d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14da:	8d 85       	ldd	r24, Y+13	; 0x0d
    14dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	4a e7       	ldi	r20, 0x7A	; 122
    14e4:	55 e4       	ldi	r21, 0x45	; 69
    14e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	8f 83       	std	Y+7, r24	; 0x07
    14f0:	98 87       	std	Y+8, r25	; 0x08
    14f2:	a9 87       	std	Y+9, r26	; 0x09
    14f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14f6:	6f 81       	ldd	r22, Y+7	; 0x07
    14f8:	78 85       	ldd	r23, Y+8	; 0x08
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e8       	ldi	r20, 0x80	; 128
    1504:	5f e3       	ldi	r21, 0x3F	; 63
    1506:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    150a:	88 23       	and	r24, r24
    150c:	2c f4       	brge	.+10     	; 0x1518 <KPD_u8GetPressedKey+0x15c>
		__ticks = 1;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	9e 83       	std	Y+6, r25	; 0x06
    1514:	8d 83       	std	Y+5, r24	; 0x05
    1516:	3f c0       	rjmp	.+126    	; 0x1596 <KPD_u8GetPressedKey+0x1da>
	else if (__tmp > 65535)
    1518:	6f 81       	ldd	r22, Y+7	; 0x07
    151a:	78 85       	ldd	r23, Y+8	; 0x08
    151c:	89 85       	ldd	r24, Y+9	; 0x09
    151e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	3f ef       	ldi	r19, 0xFF	; 255
    1524:	4f e7       	ldi	r20, 0x7F	; 127
    1526:	57 e4       	ldi	r21, 0x47	; 71
    1528:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    152c:	18 16       	cp	r1, r24
    152e:	4c f5       	brge	.+82     	; 0x1582 <KPD_u8GetPressedKey+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1530:	6b 85       	ldd	r22, Y+11	; 0x0b
    1532:	7c 85       	ldd	r23, Y+12	; 0x0c
    1534:	8d 85       	ldd	r24, Y+13	; 0x0d
    1536:	9e 85       	ldd	r25, Y+14	; 0x0e
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e2       	ldi	r20, 0x20	; 32
    153e:	51 e4       	ldi	r21, 0x41	; 65
    1540:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	bc 01       	movw	r22, r24
    154a:	cd 01       	movw	r24, r26
    154c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	9e 83       	std	Y+6, r25	; 0x06
    1556:	8d 83       	std	Y+5, r24	; 0x05
    1558:	0f c0       	rjmp	.+30     	; 0x1578 <KPD_u8GetPressedKey+0x1bc>
    155a:	80 e9       	ldi	r24, 0x90	; 144
    155c:	91 e0       	ldi	r25, 0x01	; 1
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	f1 f7       	brne	.-4      	; 0x1566 <KPD_u8GetPressedKey+0x1aa>
    156a:	9c 83       	std	Y+4, r25	; 0x04
    156c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	69 f7       	brne	.-38     	; 0x155a <KPD_u8GetPressedKey+0x19e>
    1580:	14 c0       	rjmp	.+40     	; 0x15aa <KPD_u8GetPressedKey+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1582:	6f 81       	ldd	r22, Y+7	; 0x07
    1584:	78 85       	ldd	r23, Y+8	; 0x08
    1586:	89 85       	ldd	r24, Y+9	; 0x09
    1588:	9a 85       	ldd	r25, Y+10	; 0x0a
    158a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	9e 83       	std	Y+6, r25	; 0x06
    1594:	8d 83       	std	Y+5, r24	; 0x05
    1596:	8d 81       	ldd	r24, Y+5	; 0x05
    1598:	9e 81       	ldd	r25, Y+6	; 0x06
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	9a 81       	ldd	r25, Y+2	; 0x02
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <KPD_u8GetPressedKey+0x1e6>
    15a6:	9a 83       	std	Y+2, r25	; 0x02
    15a8:	89 83       	std	Y+1, r24	; 0x01
	for(u8 i=0; i < KPD_COL_NUM; i++)
	{ //loop for col
			/* ACTIVATE CURRENT COLUMN */
		DIO_VidSetPinValue(KPD_PORT, Loc_u8KPDCOLArr[i], DIO_LOW);
			/* SEARCH IF A ROW IS LOW THUS A KEY IS PRESSED */
		for(u8 j=0; j < KPD_ROW_NUM; j++ )
    15aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ac:	8f 5f       	subi	r24, 0xFF	; 255
    15ae:	8f 87       	std	Y+15, r24	; 0x0f
    15b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b2:	84 30       	cpi	r24, 0x04	; 4
    15b4:	08 f4       	brcc	.+2      	; 0x15b8 <KPD_u8GetPressedKey+0x1fc>
    15b6:	4f cf       	rjmp	.-354    	; 0x1456 <KPD_u8GetPressedKey+0x9a>
				}
				_delay_ms(10);
			}
		}
			/* DEACTIVATE CURRENT COLUMN */
		DIO_VidSetPinValue(KPD_PORT, Loc_u8KPDCOLArr[i], DIO_HIGH);
    15b8:	88 89       	ldd	r24, Y+16	; 0x10
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	ce 01       	movw	r24, r28
    15c0:	83 96       	adiw	r24, 0x23	; 35
    15c2:	fc 01       	movw	r30, r24
    15c4:	e2 0f       	add	r30, r18
    15c6:	f3 1f       	adc	r31, r19
    15c8:	90 81       	ld	r25, Z
    15ca:	82 e0       	ldi	r24, 0x02	; 2
    15cc:	69 2f       	mov	r22, r25
    15ce:	41 e0       	ldi	r20, 0x01	; 1
    15d0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
u8 KPD_u8GetPressedKey(void){
	u8 Loc_u8PressedKey= 0xFF	, PinVal;
	u8 Loc_u8KPDArr[KPD_ROW_NUM][KPD_COL_NUM]= KPD_ARR;
    u8 Loc_u8KPDCOLArr[KPD_COL_NUM]={COL1, COL2, COL3, COL4};
	u8 Loc_u8KPDROWArr[KPD_ROW_NUM]={ROW1, ROW2, ROW3, ROW4};
	for(u8 i=0; i < KPD_COL_NUM; i++)
    15d4:	88 89       	ldd	r24, Y+16	; 0x10
    15d6:	8f 5f       	subi	r24, 0xFF	; 255
    15d8:	88 8b       	std	Y+16, r24	; 0x10
    15da:	88 89       	ldd	r24, Y+16	; 0x10
    15dc:	84 30       	cpi	r24, 0x04	; 4
    15de:	08 f4       	brcc	.+2      	; 0x15e2 <KPD_u8GetPressedKey+0x226>
    15e0:	2a cf       	rjmp	.-428    	; 0x1436 <KPD_u8GetPressedKey+0x7a>
			}
		}
			/* DEACTIVATE CURRENT COLUMN */
		DIO_VidSetPinValue(KPD_PORT, Loc_u8KPDCOLArr[i], DIO_HIGH);
	}
	return Loc_u8PressedKey;
    15e2:	8a 89       	ldd	r24, Y+18	; 0x12
}
    15e4:	af 96       	adiw	r28, 0x2f	; 47
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <LCD_SEND_COMMAND>:
#include"LCD.h"
void LCD_SEND_COMMAND(u8 Copy_U8LcdCommand)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	69 97       	sbiw	r28, 0x19	; 25
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	89 8f       	std	Y+25, r24	; 0x19
	DIO_VidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_LOW);
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	61 e0       	ldi	r22, 0x01	; 1
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	62 e0       	ldi	r22, 0x02	; 2
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8LcdCommand);
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	69 8d       	ldd	r22, Y+25	; 0x19
    1624:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_HIGH);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	41 e0       	ldi	r20, 0x01	; 1
    162e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a0 e8       	ldi	r26, 0x80	; 128
    1638:	bf e3       	ldi	r27, 0x3F	; 63
    163a:	8d 8b       	std	Y+21, r24	; 0x15
    163c:	9e 8b       	std	Y+22, r25	; 0x16
    163e:	af 8b       	std	Y+23, r26	; 0x17
    1640:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1642:	6d 89       	ldd	r22, Y+21	; 0x15
    1644:	7e 89       	ldd	r23, Y+22	; 0x16
    1646:	8f 89       	ldd	r24, Y+23	; 0x17
    1648:	98 8d       	ldd	r25, Y+24	; 0x18
    164a:	2b ea       	ldi	r18, 0xAB	; 171
    164c:	3a ea       	ldi	r19, 0xAA	; 170
    164e:	4a ea       	ldi	r20, 0xAA	; 170
    1650:	50 e4       	ldi	r21, 0x40	; 64
    1652:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	89 8b       	std	Y+17, r24	; 0x11
    165c:	9a 8b       	std	Y+18, r25	; 0x12
    165e:	ab 8b       	std	Y+19, r26	; 0x13
    1660:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1662:	69 89       	ldd	r22, Y+17	; 0x11
    1664:	7a 89       	ldd	r23, Y+18	; 0x12
    1666:	8b 89       	ldd	r24, Y+19	; 0x13
    1668:	9c 89       	ldd	r25, Y+20	; 0x14
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e8       	ldi	r20, 0x80	; 128
    1670:	5f e3       	ldi	r21, 0x3F	; 63
    1672:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1676:	88 23       	and	r24, r24
    1678:	1c f4       	brge	.+6      	; 0x1680 <LCD_SEND_COMMAND+0x8a>
		__ticks = 1;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	88 8b       	std	Y+16, r24	; 0x10
    167e:	91 c0       	rjmp	.+290    	; 0x17a2 <LCD_SEND_COMMAND+0x1ac>
	else if (__tmp > 255)
    1680:	69 89       	ldd	r22, Y+17	; 0x11
    1682:	7a 89       	ldd	r23, Y+18	; 0x12
    1684:	8b 89       	ldd	r24, Y+19	; 0x13
    1686:	9c 89       	ldd	r25, Y+20	; 0x14
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	4f e7       	ldi	r20, 0x7F	; 127
    168e:	53 e4       	ldi	r21, 0x43	; 67
    1690:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1694:	18 16       	cp	r1, r24
    1696:	0c f0       	brlt	.+2      	; 0x169a <LCD_SEND_COMMAND+0xa4>
    1698:	7b c0       	rjmp	.+246    	; 0x1790 <LCD_SEND_COMMAND+0x19a>
	{
		_delay_ms(__us / 1000.0);
    169a:	6d 89       	ldd	r22, Y+21	; 0x15
    169c:	7e 89       	ldd	r23, Y+22	; 0x16
    169e:	8f 89       	ldd	r24, Y+23	; 0x17
    16a0:	98 8d       	ldd	r25, Y+24	; 0x18
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	4a e7       	ldi	r20, 0x7A	; 122
    16a8:	54 e4       	ldi	r21, 0x44	; 68
    16aa:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	8c 87       	std	Y+12, r24	; 0x0c
    16b4:	9d 87       	std	Y+13, r25	; 0x0d
    16b6:	ae 87       	std	Y+14, r26	; 0x0e
    16b8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    16bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    16be:	8e 85       	ldd	r24, Y+14	; 0x0e
    16c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	4a e7       	ldi	r20, 0x7A	; 122
    16c8:	55 e4       	ldi	r21, 0x45	; 69
    16ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	88 87       	std	Y+8, r24	; 0x08
    16d4:	99 87       	std	Y+9, r25	; 0x09
    16d6:	aa 87       	std	Y+10, r26	; 0x0a
    16d8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    16da:	68 85       	ldd	r22, Y+8	; 0x08
    16dc:	79 85       	ldd	r23, Y+9	; 0x09
    16de:	8a 85       	ldd	r24, Y+10	; 0x0a
    16e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e8       	ldi	r20, 0x80	; 128
    16e8:	5f e3       	ldi	r21, 0x3F	; 63
    16ea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16ee:	88 23       	and	r24, r24
    16f0:	2c f4       	brge	.+10     	; 0x16fc <LCD_SEND_COMMAND+0x106>
		__ticks = 1;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	9f 83       	std	Y+7, r25	; 0x07
    16f8:	8e 83       	std	Y+6, r24	; 0x06
    16fa:	3f c0       	rjmp	.+126    	; 0x177a <LCD_SEND_COMMAND+0x184>
	else if (__tmp > 65535)
    16fc:	68 85       	ldd	r22, Y+8	; 0x08
    16fe:	79 85       	ldd	r23, Y+9	; 0x09
    1700:	8a 85       	ldd	r24, Y+10	; 0x0a
    1702:	9b 85       	ldd	r25, Y+11	; 0x0b
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	3f ef       	ldi	r19, 0xFF	; 255
    1708:	4f e7       	ldi	r20, 0x7F	; 127
    170a:	57 e4       	ldi	r21, 0x47	; 71
    170c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1710:	18 16       	cp	r1, r24
    1712:	4c f5       	brge	.+82     	; 0x1766 <LCD_SEND_COMMAND+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1714:	6c 85       	ldd	r22, Y+12	; 0x0c
    1716:	7d 85       	ldd	r23, Y+13	; 0x0d
    1718:	8e 85       	ldd	r24, Y+14	; 0x0e
    171a:	9f 85       	ldd	r25, Y+15	; 0x0f
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e2       	ldi	r20, 0x20	; 32
    1722:	51 e4       	ldi	r21, 0x41	; 65
    1724:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9f 83       	std	Y+7, r25	; 0x07
    173a:	8e 83       	std	Y+6, r24	; 0x06
    173c:	0f c0       	rjmp	.+30     	; 0x175c <LCD_SEND_COMMAND+0x166>
    173e:	80 e9       	ldi	r24, 0x90	; 144
    1740:	91 e0       	ldi	r25, 0x01	; 1
    1742:	9d 83       	std	Y+5, r25	; 0x05
    1744:	8c 83       	std	Y+4, r24	; 0x04
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <LCD_SEND_COMMAND+0x154>
    174e:	9d 83       	std	Y+5, r25	; 0x05
    1750:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1752:	8e 81       	ldd	r24, Y+6	; 0x06
    1754:	9f 81       	ldd	r25, Y+7	; 0x07
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	9f 83       	std	Y+7, r25	; 0x07
    175a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175c:	8e 81       	ldd	r24, Y+6	; 0x06
    175e:	9f 81       	ldd	r25, Y+7	; 0x07
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	69 f7       	brne	.-38     	; 0x173e <LCD_SEND_COMMAND+0x148>
    1764:	24 c0       	rjmp	.+72     	; 0x17ae <LCD_SEND_COMMAND+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1766:	68 85       	ldd	r22, Y+8	; 0x08
    1768:	79 85       	ldd	r23, Y+9	; 0x09
    176a:	8a 85       	ldd	r24, Y+10	; 0x0a
    176c:	9b 85       	ldd	r25, Y+11	; 0x0b
    176e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	9f 83       	std	Y+7, r25	; 0x07
    1778:	8e 83       	std	Y+6, r24	; 0x06
    177a:	8e 81       	ldd	r24, Y+6	; 0x06
    177c:	9f 81       	ldd	r25, Y+7	; 0x07
    177e:	9b 83       	std	Y+3, r25	; 0x03
    1780:	8a 83       	std	Y+2, r24	; 0x02
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	9b 81       	ldd	r25, Y+3	; 0x03
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <LCD_SEND_COMMAND+0x190>
    178a:	9b 83       	std	Y+3, r25	; 0x03
    178c:	8a 83       	std	Y+2, r24	; 0x02
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <LCD_SEND_COMMAND+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1790:	69 89       	ldd	r22, Y+17	; 0x11
    1792:	7a 89       	ldd	r23, Y+18	; 0x12
    1794:	8b 89       	ldd	r24, Y+19	; 0x13
    1796:	9c 89       	ldd	r25, Y+20	; 0x14
    1798:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	88 8b       	std	Y+16, r24	; 0x10
    17a2:	88 89       	ldd	r24, Y+16	; 0x10
    17a4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	8a 95       	dec	r24
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <LCD_SEND_COMMAND+0x1b2>
    17ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
	//_delay_us(1);

}
    17b8:	69 96       	adiw	r28, 0x19	; 25
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <LCD_SEND_Char>:
void LCD_SEND_Char(u8 Copy_U8LcdData) //to send character
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	69 97       	sbiw	r28, 0x19	; 25
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	89 8f       	std	Y+25, r24	; 0x19
	DIO_VidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_HIGH);
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	61 e0       	ldi	r22, 0x01	; 1
    17e4:	41 e0       	ldi	r20, 0x01	; 1
    17e6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	62 e0       	ldi	r22, 0x02	; 2
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8LcdData);
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	69 8d       	ldd	r22, Y+25	; 0x19
    17f8:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_HIGH);
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	41 e0       	ldi	r20, 0x01	; 1
    1802:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a0 e8       	ldi	r26, 0x80	; 128
    180c:	bf e3       	ldi	r27, 0x3F	; 63
    180e:	8d 8b       	std	Y+21, r24	; 0x15
    1810:	9e 8b       	std	Y+22, r25	; 0x16
    1812:	af 8b       	std	Y+23, r26	; 0x17
    1814:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1816:	6d 89       	ldd	r22, Y+21	; 0x15
    1818:	7e 89       	ldd	r23, Y+22	; 0x16
    181a:	8f 89       	ldd	r24, Y+23	; 0x17
    181c:	98 8d       	ldd	r25, Y+24	; 0x18
    181e:	2b ea       	ldi	r18, 0xAB	; 171
    1820:	3a ea       	ldi	r19, 0xAA	; 170
    1822:	4a ea       	ldi	r20, 0xAA	; 170
    1824:	50 e4       	ldi	r21, 0x40	; 64
    1826:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	89 8b       	std	Y+17, r24	; 0x11
    1830:	9a 8b       	std	Y+18, r25	; 0x12
    1832:	ab 8b       	std	Y+19, r26	; 0x13
    1834:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1836:	69 89       	ldd	r22, Y+17	; 0x11
    1838:	7a 89       	ldd	r23, Y+18	; 0x12
    183a:	8b 89       	ldd	r24, Y+19	; 0x13
    183c:	9c 89       	ldd	r25, Y+20	; 0x14
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e8       	ldi	r20, 0x80	; 128
    1844:	5f e3       	ldi	r21, 0x3F	; 63
    1846:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    184a:	88 23       	and	r24, r24
    184c:	1c f4       	brge	.+6      	; 0x1854 <LCD_SEND_Char+0x8a>
		__ticks = 1;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	88 8b       	std	Y+16, r24	; 0x10
    1852:	91 c0       	rjmp	.+290    	; 0x1976 <LCD_SEND_Char+0x1ac>
	else if (__tmp > 255)
    1854:	69 89       	ldd	r22, Y+17	; 0x11
    1856:	7a 89       	ldd	r23, Y+18	; 0x12
    1858:	8b 89       	ldd	r24, Y+19	; 0x13
    185a:	9c 89       	ldd	r25, Y+20	; 0x14
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	53 e4       	ldi	r21, 0x43	; 67
    1864:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	0c f0       	brlt	.+2      	; 0x186e <LCD_SEND_Char+0xa4>
    186c:	7b c0       	rjmp	.+246    	; 0x1964 <LCD_SEND_Char+0x19a>
	{
		_delay_ms(__us / 1000.0);
    186e:	6d 89       	ldd	r22, Y+21	; 0x15
    1870:	7e 89       	ldd	r23, Y+22	; 0x16
    1872:	8f 89       	ldd	r24, Y+23	; 0x17
    1874:	98 8d       	ldd	r25, Y+24	; 0x18
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	4a e7       	ldi	r20, 0x7A	; 122
    187c:	54 e4       	ldi	r21, 0x44	; 68
    187e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	8c 87       	std	Y+12, r24	; 0x0c
    1888:	9d 87       	std	Y+13, r25	; 0x0d
    188a:	ae 87       	std	Y+14, r26	; 0x0e
    188c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1890:	7d 85       	ldd	r23, Y+13	; 0x0d
    1892:	8e 85       	ldd	r24, Y+14	; 0x0e
    1894:	9f 85       	ldd	r25, Y+15	; 0x0f
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a e7       	ldi	r20, 0x7A	; 122
    189c:	55 e4       	ldi	r21, 0x45	; 69
    189e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	88 87       	std	Y+8, r24	; 0x08
    18a8:	99 87       	std	Y+9, r25	; 0x09
    18aa:	aa 87       	std	Y+10, r26	; 0x0a
    18ac:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    18ae:	68 85       	ldd	r22, Y+8	; 0x08
    18b0:	79 85       	ldd	r23, Y+9	; 0x09
    18b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    18b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e8       	ldi	r20, 0x80	; 128
    18bc:	5f e3       	ldi	r21, 0x3F	; 63
    18be:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18c2:	88 23       	and	r24, r24
    18c4:	2c f4       	brge	.+10     	; 0x18d0 <LCD_SEND_Char+0x106>
		__ticks = 1;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9f 83       	std	Y+7, r25	; 0x07
    18cc:	8e 83       	std	Y+6, r24	; 0x06
    18ce:	3f c0       	rjmp	.+126    	; 0x194e <LCD_SEND_Char+0x184>
	else if (__tmp > 65535)
    18d0:	68 85       	ldd	r22, Y+8	; 0x08
    18d2:	79 85       	ldd	r23, Y+9	; 0x09
    18d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    18d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	3f ef       	ldi	r19, 0xFF	; 255
    18dc:	4f e7       	ldi	r20, 0x7F	; 127
    18de:	57 e4       	ldi	r21, 0x47	; 71
    18e0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18e4:	18 16       	cp	r1, r24
    18e6:	4c f5       	brge	.+82     	; 0x193a <LCD_SEND_Char+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    18ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    18ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    18ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e2       	ldi	r20, 0x20	; 32
    18f6:	51 e4       	ldi	r21, 0x41	; 65
    18f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	bc 01       	movw	r22, r24
    1902:	cd 01       	movw	r24, r26
    1904:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	9f 83       	std	Y+7, r25	; 0x07
    190e:	8e 83       	std	Y+6, r24	; 0x06
    1910:	0f c0       	rjmp	.+30     	; 0x1930 <LCD_SEND_Char+0x166>
    1912:	80 e9       	ldi	r24, 0x90	; 144
    1914:	91 e0       	ldi	r25, 0x01	; 1
    1916:	9d 83       	std	Y+5, r25	; 0x05
    1918:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	9d 81       	ldd	r25, Y+5	; 0x05
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <LCD_SEND_Char+0x154>
    1922:	9d 83       	std	Y+5, r25	; 0x05
    1924:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1926:	8e 81       	ldd	r24, Y+6	; 0x06
    1928:	9f 81       	ldd	r25, Y+7	; 0x07
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	9f 83       	std	Y+7, r25	; 0x07
    192e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1930:	8e 81       	ldd	r24, Y+6	; 0x06
    1932:	9f 81       	ldd	r25, Y+7	; 0x07
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	69 f7       	brne	.-38     	; 0x1912 <LCD_SEND_Char+0x148>
    1938:	24 c0       	rjmp	.+72     	; 0x1982 <LCD_SEND_Char+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193a:	68 85       	ldd	r22, Y+8	; 0x08
    193c:	79 85       	ldd	r23, Y+9	; 0x09
    193e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1940:	9b 85       	ldd	r25, Y+11	; 0x0b
    1942:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9f 83       	std	Y+7, r25	; 0x07
    194c:	8e 83       	std	Y+6, r24	; 0x06
    194e:	8e 81       	ldd	r24, Y+6	; 0x06
    1950:	9f 81       	ldd	r25, Y+7	; 0x07
    1952:	9b 83       	std	Y+3, r25	; 0x03
    1954:	8a 83       	std	Y+2, r24	; 0x02
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	9b 81       	ldd	r25, Y+3	; 0x03
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <LCD_SEND_Char+0x190>
    195e:	9b 83       	std	Y+3, r25	; 0x03
    1960:	8a 83       	std	Y+2, r24	; 0x02
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <LCD_SEND_Char+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1964:	69 89       	ldd	r22, Y+17	; 0x11
    1966:	7a 89       	ldd	r23, Y+18	; 0x12
    1968:	8b 89       	ldd	r24, Y+19	; 0x13
    196a:	9c 89       	ldd	r25, Y+20	; 0x14
    196c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	88 8b       	std	Y+16, r24	; 0x10
    1976:	88 89       	ldd	r24, Y+16	; 0x10
    1978:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	8a 95       	dec	r24
    197e:	f1 f7       	brne	.-4      	; 0x197c <LCD_SEND_Char+0x1b2>
    1980:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
	//_delay_us(1);

}
    198c:	69 96       	adiw	r28, 0x19	; 25
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <LCD_VidInit>:
void LCD_VidInit(void)
{
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	cc 54       	subi	r28, 0x4C	; 76
    19ac:	d0 40       	sbci	r29, 0x00	; 0
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(LCD_DATA_PORT,DIO_ALL_OUTPUT);
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	6f ef       	ldi	r22, 0xFF	; 255
    19bc:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_OUTPUT);
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	60 e0       	ldi	r22, 0x00	; 0
    19c4:	41 e0       	ldi	r20, 0x01	; 1
    19c6:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_OUTPUT);
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	62 e0       	ldi	r22, 0x02	; 2
    19ce:	41 e0       	ldi	r20, 0x01	; 1
    19d0:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_OUTPUT);
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	41 e0       	ldi	r20, 0x01	; 1
    19da:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
    19de:	fe 01       	movw	r30, r28
    19e0:	e7 5b       	subi	r30, 0xB7	; 183
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	ac e0       	ldi	r26, 0x0C	; 12
    19ea:	b2 e4       	ldi	r27, 0x42	; 66
    19ec:	80 83       	st	Z, r24
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	a2 83       	std	Z+2, r26	; 0x02
    19f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f4:	8e 01       	movw	r16, r28
    19f6:	0b 5b       	subi	r16, 0xBB	; 187
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	fe 01       	movw	r30, r28
    19fc:	e7 5b       	subi	r30, 0xB7	; 183
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	4a e7       	ldi	r20, 0x7A	; 122
    1a0e:	55 e4       	ldi	r21, 0x45	; 69
    1a10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	f8 01       	movw	r30, r16
    1a1a:	80 83       	st	Z, r24
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	a2 83       	std	Z+2, r26	; 0x02
    1a20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a22:	fe 01       	movw	r30, r28
    1a24:	eb 5b       	subi	r30, 0xBB	; 187
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	44 f4       	brge	.+16     	; 0x1a50 <LCD_VidInit+0xb2>
		__ticks = 1;
    1a40:	fe 01       	movw	r30, r28
    1a42:	ed 5b       	subi	r30, 0xBD	; 189
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24
    1a4e:	64 c0       	rjmp	.+200    	; 0x1b18 <LCD_VidInit+0x17a>
	else if (__tmp > 65535)
    1a50:	fe 01       	movw	r30, r28
    1a52:	eb 5b       	subi	r30, 0xBB	; 187
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	60 81       	ld	r22, Z
    1a58:	71 81       	ldd	r23, Z+1	; 0x01
    1a5a:	82 81       	ldd	r24, Z+2	; 0x02
    1a5c:	93 81       	ldd	r25, Z+3	; 0x03
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	3f ef       	ldi	r19, 0xFF	; 255
    1a62:	4f e7       	ldi	r20, 0x7F	; 127
    1a64:	57 e4       	ldi	r21, 0x47	; 71
    1a66:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a6a:	18 16       	cp	r1, r24
    1a6c:	0c f0       	brlt	.+2      	; 0x1a70 <LCD_VidInit+0xd2>
    1a6e:	43 c0       	rjmp	.+134    	; 0x1af6 <LCD_VidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a70:	fe 01       	movw	r30, r28
    1a72:	e7 5b       	subi	r30, 0xB7	; 183
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e2       	ldi	r20, 0x20	; 32
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8e 01       	movw	r16, r28
    1a90:	0d 5b       	subi	r16, 0xBD	; 189
    1a92:	1f 4f       	sbci	r17, 0xFF	; 255
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	f8 01       	movw	r30, r16
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
    1aa6:	1f c0       	rjmp	.+62     	; 0x1ae6 <LCD_VidInit+0x148>
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	ef 5b       	subi	r30, 0xBF	; 191
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 e9       	ldi	r24, 0x90	; 144
    1ab0:	91 e0       	ldi	r25, 0x01	; 1
    1ab2:	91 83       	std	Z+1, r25	; 0x01
    1ab4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	ef 5b       	subi	r30, 0xBF	; 191
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <LCD_VidInit+0x122>
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	ef 5b       	subi	r30, 0xBF	; 191
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ace:	de 01       	movw	r26, r28
    1ad0:	ad 5b       	subi	r26, 0xBD	; 189
    1ad2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	ed 5b       	subi	r30, 0xBD	; 189
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	11 96       	adiw	r26, 0x01	; 1
    1ae2:	9c 93       	st	X, r25
    1ae4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	ed 5b       	subi	r30, 0xBD	; 189
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 81       	ld	r24, Z
    1aee:	91 81       	ldd	r25, Z+1	; 0x01
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	d1 f6       	brne	.-76     	; 0x1aa8 <LCD_VidInit+0x10a>
    1af4:	24 c0       	rjmp	.+72     	; 0x1b3e <LCD_VidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	8e 01       	movw	r16, r28
    1af8:	0d 5b       	subi	r16, 0xBD	; 189
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	fe 01       	movw	r30, r28
    1afe:	eb 5b       	subi	r30, 0xBB	; 187
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	60 81       	ld	r22, Z
    1b04:	71 81       	ldd	r23, Z+1	; 0x01
    1b06:	82 81       	ldd	r24, Z+2	; 0x02
    1b08:	93 81       	ldd	r25, Z+3	; 0x03
    1b0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	f8 01       	movw	r30, r16
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	80 83       	st	Z, r24
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ed 5b       	subi	r30, 0xBD	; 189
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	80 81       	ld	r24, Z
    1b20:	91 81       	ldd	r25, Z+1	; 0x01
    1b22:	fe 01       	movw	r30, r28
    1b24:	ff 96       	adiw	r30, 0x3f	; 63
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	80 83       	st	Z, r24
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ff 96       	adiw	r30, 0x3f	; 63
    1b2e:	80 81       	ld	r24, Z
    1b30:	91 81       	ldd	r25, Z+1	; 0x01
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_VidInit+0x194>
    1b36:	fe 01       	movw	r30, r28
    1b38:	ff 96       	adiw	r30, 0x3f	; 63
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	80 83       	st	Z, r24
	//DELAY MORE THAN 30 MS
	_delay_ms(35);

	LCD_SEND_COMMAND(0b00111000); //0011NFXX ,    N=HOW MANY LINES YOU WANT TO USE(1)  ,   F= FONT SIZE(0=5*7)
    1b3e:	88 e3       	ldi	r24, 0x38	; 56
    1b40:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a8 e4       	ldi	r26, 0x48	; 72
    1b4a:	b2 e4       	ldi	r27, 0x42	; 66
    1b4c:	8b af       	std	Y+59, r24	; 0x3b
    1b4e:	9c af       	std	Y+60, r25	; 0x3c
    1b50:	ad af       	std	Y+61, r26	; 0x3d
    1b52:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b54:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b56:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b58:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b5c:	2b ea       	ldi	r18, 0xAB	; 171
    1b5e:	3a ea       	ldi	r19, 0xAA	; 170
    1b60:	4a ea       	ldi	r20, 0xAA	; 170
    1b62:	50 e4       	ldi	r21, 0x40	; 64
    1b64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	8f ab       	std	Y+55, r24	; 0x37
    1b6e:	98 af       	std	Y+56, r25	; 0x38
    1b70:	a9 af       	std	Y+57, r26	; 0x39
    1b72:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1b74:	6f a9       	ldd	r22, Y+55	; 0x37
    1b76:	78 ad       	ldd	r23, Y+56	; 0x38
    1b78:	89 ad       	ldd	r24, Y+57	; 0x39
    1b7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e8       	ldi	r20, 0x80	; 128
    1b82:	5f e3       	ldi	r21, 0x3F	; 63
    1b84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b88:	88 23       	and	r24, r24
    1b8a:	1c f4       	brge	.+6      	; 0x1b92 <LCD_VidInit+0x1f4>
		__ticks = 1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	8e ab       	std	Y+54, r24	; 0x36
    1b90:	91 c0       	rjmp	.+290    	; 0x1cb4 <LCD_VidInit+0x316>
	else if (__tmp > 255)
    1b92:	6f a9       	ldd	r22, Y+55	; 0x37
    1b94:	78 ad       	ldd	r23, Y+56	; 0x38
    1b96:	89 ad       	ldd	r24, Y+57	; 0x39
    1b98:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ba0:	53 e4       	ldi	r21, 0x43	; 67
    1ba2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ba6:	18 16       	cp	r1, r24
    1ba8:	0c f0       	brlt	.+2      	; 0x1bac <LCD_VidInit+0x20e>
    1baa:	7b c0       	rjmp	.+246    	; 0x1ca2 <LCD_VidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1bac:	6b ad       	ldd	r22, Y+59	; 0x3b
    1bae:	7c ad       	ldd	r23, Y+60	; 0x3c
    1bb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a e7       	ldi	r20, 0x7A	; 122
    1bba:	54 e4       	ldi	r21, 0x44	; 68
    1bbc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8a ab       	std	Y+50, r24	; 0x32
    1bc6:	9b ab       	std	Y+51, r25	; 0x33
    1bc8:	ac ab       	std	Y+52, r26	; 0x34
    1bca:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	6a a9       	ldd	r22, Y+50	; 0x32
    1bce:	7b a9       	ldd	r23, Y+51	; 0x33
    1bd0:	8c a9       	ldd	r24, Y+52	; 0x34
    1bd2:	9d a9       	ldd	r25, Y+53	; 0x35
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a e7       	ldi	r20, 0x7A	; 122
    1bda:	55 e4       	ldi	r21, 0x45	; 69
    1bdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	8e a7       	std	Y+46, r24	; 0x2e
    1be6:	9f a7       	std	Y+47, r25	; 0x2f
    1be8:	a8 ab       	std	Y+48, r26	; 0x30
    1bea:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1bec:	6e a5       	ldd	r22, Y+46	; 0x2e
    1bee:	7f a5       	ldd	r23, Y+47	; 0x2f
    1bf0:	88 a9       	ldd	r24, Y+48	; 0x30
    1bf2:	99 a9       	ldd	r25, Y+49	; 0x31
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <LCD_VidInit+0x270>
		__ticks = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9d a7       	std	Y+45, r25	; 0x2d
    1c0a:	8c a7       	std	Y+44, r24	; 0x2c
    1c0c:	3f c0       	rjmp	.+126    	; 0x1c8c <LCD_VidInit+0x2ee>
	else if (__tmp > 65535)
    1c0e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c10:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c12:	88 a9       	ldd	r24, Y+48	; 0x30
    1c14:	99 a9       	ldd	r25, Y+49	; 0x31
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	4c f5       	brge	.+82     	; 0x1c78 <LCD_VidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	6a a9       	ldd	r22, Y+50	; 0x32
    1c28:	7b a9       	ldd	r23, Y+51	; 0x33
    1c2a:	8c a9       	ldd	r24, Y+52	; 0x34
    1c2c:	9d a9       	ldd	r25, Y+53	; 0x35
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9d a7       	std	Y+45, r25	; 0x2d
    1c4c:	8c a7       	std	Y+44, r24	; 0x2c
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <LCD_VidInit+0x2d0>
    1c50:	80 e9       	ldi	r24, 0x90	; 144
    1c52:	91 e0       	ldi	r25, 0x01	; 1
    1c54:	9b a7       	std	Y+43, r25	; 0x2b
    1c56:	8a a7       	std	Y+42, r24	; 0x2a
    1c58:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c5a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LCD_VidInit+0x2be>
    1c60:	9b a7       	std	Y+43, r25	; 0x2b
    1c62:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c66:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	9d a7       	std	Y+45, r25	; 0x2d
    1c6c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c70:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	69 f7       	brne	.-38     	; 0x1c50 <LCD_VidInit+0x2b2>
    1c76:	24 c0       	rjmp	.+72     	; 0x1cc0 <LCD_VidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c78:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c7a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c7c:	88 a9       	ldd	r24, Y+48	; 0x30
    1c7e:	99 a9       	ldd	r25, Y+49	; 0x31
    1c80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9d a7       	std	Y+45, r25	; 0x2d
    1c8a:	8c a7       	std	Y+44, r24	; 0x2c
    1c8c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c8e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c90:	99 a7       	std	Y+41, r25	; 0x29
    1c92:	88 a7       	std	Y+40, r24	; 0x28
    1c94:	88 a5       	ldd	r24, Y+40	; 0x28
    1c96:	99 a5       	ldd	r25, Y+41	; 0x29
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <LCD_VidInit+0x2fa>
    1c9c:	99 a7       	std	Y+41, r25	; 0x29
    1c9e:	88 a7       	std	Y+40, r24	; 0x28
    1ca0:	0f c0       	rjmp	.+30     	; 0x1cc0 <LCD_VidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ca2:	6f a9       	ldd	r22, Y+55	; 0x37
    1ca4:	78 ad       	ldd	r23, Y+56	; 0x38
    1ca6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ca8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1caa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	8e ab       	std	Y+54, r24	; 0x36
    1cb4:	8e a9       	ldd	r24, Y+54	; 0x36
    1cb6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cb8:	8f a1       	ldd	r24, Y+39	; 0x27
    1cba:	8a 95       	dec	r24
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <LCD_VidInit+0x31c>
    1cbe:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50); // DELAY MORE THAN 39 MICRO SEC
	LCD_SEND_COMMAND(0b00001100);  //00001DCB , C = LIKE FLAF WHEN TO STOP(OFF) , B= BLANKING , D= DISPLAY
    1cc0:	8c e0       	ldi	r24, 0x0C	; 12
    1cc2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a8 e4       	ldi	r26, 0x48	; 72
    1ccc:	b2 e4       	ldi	r27, 0x42	; 66
    1cce:	8b a3       	std	Y+35, r24	; 0x23
    1cd0:	9c a3       	std	Y+36, r25	; 0x24
    1cd2:	ad a3       	std	Y+37, r26	; 0x25
    1cd4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cda:	8d a1       	ldd	r24, Y+37	; 0x25
    1cdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cde:	2b ea       	ldi	r18, 0xAB	; 171
    1ce0:	3a ea       	ldi	r19, 0xAA	; 170
    1ce2:	4a ea       	ldi	r20, 0xAA	; 170
    1ce4:	50 e4       	ldi	r21, 0x40	; 64
    1ce6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8f 8f       	std	Y+31, r24	; 0x1f
    1cf0:	98 a3       	std	Y+32, r25	; 0x20
    1cf2:	a9 a3       	std	Y+33, r26	; 0x21
    1cf4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1cf6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cf8:	78 a1       	ldd	r23, Y+32	; 0x20
    1cfa:	89 a1       	ldd	r24, Y+33	; 0x21
    1cfc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	1c f4       	brge	.+6      	; 0x1d14 <LCD_VidInit+0x376>
		__ticks = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	8e 8f       	std	Y+30, r24	; 0x1e
    1d12:	91 c0       	rjmp	.+290    	; 0x1e36 <LCD_VidInit+0x498>
	else if (__tmp > 255)
    1d14:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d16:	78 a1       	ldd	r23, Y+32	; 0x20
    1d18:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	53 e4       	ldi	r21, 0x43	; 67
    1d24:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	0c f0       	brlt	.+2      	; 0x1d2e <LCD_VidInit+0x390>
    1d2c:	7b c0       	rjmp	.+246    	; 0x1e24 <LCD_VidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    1d2e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d30:	7c a1       	ldd	r23, Y+36	; 0x24
    1d32:	8d a1       	ldd	r24, Y+37	; 0x25
    1d34:	9e a1       	ldd	r25, Y+38	; 0x26
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	4a e7       	ldi	r20, 0x7A	; 122
    1d3c:	54 e4       	ldi	r21, 0x44	; 68
    1d3e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	8a 8f       	std	Y+26, r24	; 0x1a
    1d48:	9b 8f       	std	Y+27, r25	; 0x1b
    1d4a:	ac 8f       	std	Y+28, r26	; 0x1c
    1d4c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d50:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d52:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d54:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a e7       	ldi	r20, 0x7A	; 122
    1d5c:	55 e4       	ldi	r21, 0x45	; 69
    1d5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	8e 8b       	std	Y+22, r24	; 0x16
    1d68:	9f 8b       	std	Y+23, r25	; 0x17
    1d6a:	a8 8f       	std	Y+24, r26	; 0x18
    1d6c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1d6e:	6e 89       	ldd	r22, Y+22	; 0x16
    1d70:	7f 89       	ldd	r23, Y+23	; 0x17
    1d72:	88 8d       	ldd	r24, Y+24	; 0x18
    1d74:	99 8d       	ldd	r25, Y+25	; 0x19
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e8       	ldi	r20, 0x80	; 128
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	2c f4       	brge	.+10     	; 0x1d90 <LCD_VidInit+0x3f2>
		__ticks = 1;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9d 8b       	std	Y+21, r25	; 0x15
    1d8c:	8c 8b       	std	Y+20, r24	; 0x14
    1d8e:	3f c0       	rjmp	.+126    	; 0x1e0e <LCD_VidInit+0x470>
	else if (__tmp > 65535)
    1d90:	6e 89       	ldd	r22, Y+22	; 0x16
    1d92:	7f 89       	ldd	r23, Y+23	; 0x17
    1d94:	88 8d       	ldd	r24, Y+24	; 0x18
    1d96:	99 8d       	ldd	r25, Y+25	; 0x19
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	4f e7       	ldi	r20, 0x7F	; 127
    1d9e:	57 e4       	ldi	r21, 0x47	; 71
    1da0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1da4:	18 16       	cp	r1, r24
    1da6:	4c f5       	brge	.+82     	; 0x1dfa <LCD_VidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1daa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1dac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e2       	ldi	r20, 0x20	; 32
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	9d 8b       	std	Y+21, r25	; 0x15
    1dce:	8c 8b       	std	Y+20, r24	; 0x14
    1dd0:	0f c0       	rjmp	.+30     	; 0x1df0 <LCD_VidInit+0x452>
    1dd2:	80 e9       	ldi	r24, 0x90	; 144
    1dd4:	91 e0       	ldi	r25, 0x01	; 1
    1dd6:	9b 8b       	std	Y+19, r25	; 0x13
    1dd8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dda:	8a 89       	ldd	r24, Y+18	; 0x12
    1ddc:	9b 89       	ldd	r25, Y+19	; 0x13
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <LCD_VidInit+0x440>
    1de2:	9b 8b       	std	Y+19, r25	; 0x13
    1de4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de6:	8c 89       	ldd	r24, Y+20	; 0x14
    1de8:	9d 89       	ldd	r25, Y+21	; 0x15
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	9d 8b       	std	Y+21, r25	; 0x15
    1dee:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df0:	8c 89       	ldd	r24, Y+20	; 0x14
    1df2:	9d 89       	ldd	r25, Y+21	; 0x15
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	69 f7       	brne	.-38     	; 0x1dd2 <LCD_VidInit+0x434>
    1df8:	24 c0       	rjmp	.+72     	; 0x1e42 <LCD_VidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfa:	6e 89       	ldd	r22, Y+22	; 0x16
    1dfc:	7f 89       	ldd	r23, Y+23	; 0x17
    1dfe:	88 8d       	ldd	r24, Y+24	; 0x18
    1e00:	99 8d       	ldd	r25, Y+25	; 0x19
    1e02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9d 8b       	std	Y+21, r25	; 0x15
    1e0c:	8c 8b       	std	Y+20, r24	; 0x14
    1e0e:	8c 89       	ldd	r24, Y+20	; 0x14
    1e10:	9d 89       	ldd	r25, Y+21	; 0x15
    1e12:	99 8b       	std	Y+17, r25	; 0x11
    1e14:	88 8b       	std	Y+16, r24	; 0x10
    1e16:	88 89       	ldd	r24, Y+16	; 0x10
    1e18:	99 89       	ldd	r25, Y+17	; 0x11
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_VidInit+0x47c>
    1e1e:	99 8b       	std	Y+17, r25	; 0x11
    1e20:	88 8b       	std	Y+16, r24	; 0x10
    1e22:	0f c0       	rjmp	.+30     	; 0x1e42 <LCD_VidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e24:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e26:	78 a1       	ldd	r23, Y+32	; 0x20
    1e28:	89 a1       	ldd	r24, Y+33	; 0x21
    1e2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	8e 8f       	std	Y+30, r24	; 0x1e
    1e36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e38:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e3c:	8a 95       	dec	r24
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <LCD_VidInit+0x49e>
    1e40:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_SEND_COMMAND(0b00000001);
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	a0 e0       	ldi	r26, 0x00	; 0
    1e4e:	b0 e4       	ldi	r27, 0x40	; 64
    1e50:	8b 87       	std	Y+11, r24	; 0x0b
    1e52:	9c 87       	std	Y+12, r25	; 0x0c
    1e54:	ad 87       	std	Y+13, r26	; 0x0d
    1e56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	4a e7       	ldi	r20, 0x7A	; 122
    1e66:	55 e4       	ldi	r21, 0x45	; 69
    1e68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	8f 83       	std	Y+7, r24	; 0x07
    1e72:	98 87       	std	Y+8, r25	; 0x08
    1e74:	a9 87       	std	Y+9, r26	; 0x09
    1e76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e78:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7a:	78 85       	ldd	r23, Y+8	; 0x08
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e8       	ldi	r20, 0x80	; 128
    1e86:	5f e3       	ldi	r21, 0x3F	; 63
    1e88:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e8c:	88 23       	and	r24, r24
    1e8e:	2c f4       	brge	.+10     	; 0x1e9a <LCD_VidInit+0x4fc>
		__ticks = 1;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	8d 83       	std	Y+5, r24	; 0x05
    1e98:	3f c0       	rjmp	.+126    	; 0x1f18 <LCD_VidInit+0x57a>
	else if (__tmp > 65535)
    1e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9c:	78 85       	ldd	r23, Y+8	; 0x08
    1e9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	3f ef       	ldi	r19, 0xFF	; 255
    1ea6:	4f e7       	ldi	r20, 0x7F	; 127
    1ea8:	57 e4       	ldi	r21, 0x47	; 71
    1eaa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1eae:	18 16       	cp	r1, r24
    1eb0:	4c f5       	brge	.+82     	; 0x1f04 <LCD_VidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e2       	ldi	r20, 0x20	; 32
    1ec0:	51 e4       	ldi	r21, 0x41	; 65
    1ec2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	9e 83       	std	Y+6, r25	; 0x06
    1ed8:	8d 83       	std	Y+5, r24	; 0x05
    1eda:	0f c0       	rjmp	.+30     	; 0x1efa <LCD_VidInit+0x55c>
    1edc:	80 e9       	ldi	r24, 0x90	; 144
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <LCD_VidInit+0x54a>
    1eec:	9c 83       	std	Y+4, r25	; 0x04
    1eee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efa:	8d 81       	ldd	r24, Y+5	; 0x05
    1efc:	9e 81       	ldd	r25, Y+6	; 0x06
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	69 f7       	brne	.-38     	; 0x1edc <LCD_VidInit+0x53e>
    1f02:	14 c0       	rjmp	.+40     	; 0x1f2c <LCD_VidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f04:	6f 81       	ldd	r22, Y+7	; 0x07
    1f06:	78 85       	ldd	r23, Y+8	; 0x08
    1f08:	89 85       	ldd	r24, Y+9	; 0x09
    1f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	9e 83       	std	Y+6, r25	; 0x06
    1f16:	8d 83       	std	Y+5, r24	; 0x05
    1f18:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <LCD_VidInit+0x586>
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // delay more than 1.5 ms
	LCD_SEND_COMMAND(0b00000110); //write from left to right
    1f2c:	86 e0       	ldi	r24, 0x06	; 6
    1f2e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>

}
    1f32:	c4 5b       	subi	r28, 0xB4	; 180
    1f34:	df 4f       	sbci	r29, 0xFF	; 255
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	de bf       	out	0x3e, r29	; 62
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	cd bf       	out	0x3d, r28	; 61
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	08 95       	ret

00001f4a <LCD_VidSendStrig>:

void LCD_VidSendStrig(u8 * Copy_Pu8String)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <LCD_VidSendStrig+0x6>
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	9a 83       	std	Y+2, r25	; 0x02
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	0a c0       	rjmp	.+20     	; 0x1f6e <LCD_VidSendStrig+0x24>

	while(*Copy_Pu8String != '\0' ) // \0 is the last element in the arrray
	{
		LCD_SEND_Char(*Copy_Pu8String);
    1f5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5e:	80 81       	ld	r24, Z
    1f60:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_SEND_Char>
		Copy_Pu8String++;
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	01 96       	adiw	r24, 0x01	; 1
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_VidSendStrig(u8 * Copy_Pu8String)
{

	while(*Copy_Pu8String != '\0' ) // \0 is the last element in the arrray
    1f6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f70:	fa 81       	ldd	r31, Y+2	; 0x02
    1f72:	80 81       	ld	r24, Z
    1f74:	88 23       	and	r24, r24
    1f76:	89 f7       	brne	.-30     	; 0x1f5a <LCD_VidSendStrig+0x10>
	{
		LCD_SEND_Char(*Copy_Pu8String);
		Copy_Pu8String++;

	}
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <LCD_VidGoTOLocation>:

void LCD_VidGoTOLocation(u8 Copy_U8RowNumber  , u8 Copy_U8ColNumber)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	62 97       	sbiw	r28, 0x12	; 18
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	8f 87       	std	Y+15, r24	; 0x0f
    1f98:	68 8b       	std	Y+16, r22	; 0x10
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	a0 e0       	ldi	r26, 0x00	; 0
    1fa0:	b0 e4       	ldi	r27, 0x40	; 64
    1fa2:	8b 87       	std	Y+11, r24	; 0x0b
    1fa4:	9c 87       	std	Y+12, r25	; 0x0c
    1fa6:	ad 87       	std	Y+13, r26	; 0x0d
    1fa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1faa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	4a e7       	ldi	r20, 0x7A	; 122
    1fb8:	55 e4       	ldi	r21, 0x45	; 69
    1fba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	8f 83       	std	Y+7, r24	; 0x07
    1fc4:	98 87       	std	Y+8, r25	; 0x08
    1fc6:	a9 87       	std	Y+9, r26	; 0x09
    1fc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e8       	ldi	r20, 0x80	; 128
    1fd8:	5f e3       	ldi	r21, 0x3F	; 63
    1fda:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fde:	88 23       	and	r24, r24
    1fe0:	2c f4       	brge	.+10     	; 0x1fec <LCD_VidGoTOLocation+0x6a>
		__ticks = 1;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
    1fea:	3f c0       	rjmp	.+126    	; 0x206a <LCD_VidGoTOLocation+0xe8>
	else if (__tmp > 65535)
    1fec:	6f 81       	ldd	r22, Y+7	; 0x07
    1fee:	78 85       	ldd	r23, Y+8	; 0x08
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	3f ef       	ldi	r19, 0xFF	; 255
    1ff8:	4f e7       	ldi	r20, 0x7F	; 127
    1ffa:	57 e4       	ldi	r21, 0x47	; 71
    1ffc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2000:	18 16       	cp	r1, r24
    2002:	4c f5       	brge	.+82     	; 0x2056 <LCD_VidGoTOLocation+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2004:	6b 85       	ldd	r22, Y+11	; 0x0b
    2006:	7c 85       	ldd	r23, Y+12	; 0x0c
    2008:	8d 85       	ldd	r24, Y+13	; 0x0d
    200a:	9e 85       	ldd	r25, Y+14	; 0x0e
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e2       	ldi	r20, 0x20	; 32
    2012:	51 e4       	ldi	r21, 0x41	; 65
    2014:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	bc 01       	movw	r22, r24
    201e:	cd 01       	movw	r24, r26
    2020:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	9e 83       	std	Y+6, r25	; 0x06
    202a:	8d 83       	std	Y+5, r24	; 0x05
    202c:	0f c0       	rjmp	.+30     	; 0x204c <LCD_VidGoTOLocation+0xca>
    202e:	80 e9       	ldi	r24, 0x90	; 144
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	9c 83       	std	Y+4, r25	; 0x04
    2034:	8b 83       	std	Y+3, r24	; 0x03
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <LCD_VidGoTOLocation+0xb8>
    203e:	9c 83       	std	Y+4, r25	; 0x04
    2040:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2042:	8d 81       	ldd	r24, Y+5	; 0x05
    2044:	9e 81       	ldd	r25, Y+6	; 0x06
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	9e 81       	ldd	r25, Y+6	; 0x06
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	69 f7       	brne	.-38     	; 0x202e <LCD_VidGoTOLocation+0xac>
    2054:	14 c0       	rjmp	.+40     	; 0x207e <LCD_VidGoTOLocation+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2056:	6f 81       	ldd	r22, Y+7	; 0x07
    2058:	78 85       	ldd	r23, Y+8	; 0x08
    205a:	89 85       	ldd	r24, Y+9	; 0x09
    205c:	9a 85       	ldd	r25, Y+10	; 0x0a
    205e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	9e 83       	std	Y+6, r25	; 0x06
    2068:	8d 83       	std	Y+5, r24	; 0x05
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	9a 83       	std	Y+2, r25	; 0x02
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	9a 81       	ldd	r25, Y+2	; 0x02
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <LCD_VidGoTOLocation+0xf4>
    207a:	9a 83       	std	Y+2, r25	; 0x02
    207c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	switch(Copy_U8RowNumber)
    207e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	3a 8b       	std	Y+18, r19	; 0x12
    2086:	29 8b       	std	Y+17, r18	; 0x11
    2088:	89 89       	ldd	r24, Y+17	; 0x11
    208a:	9a 89       	ldd	r25, Y+18	; 0x12
    208c:	81 30       	cpi	r24, 0x01	; 1
    208e:	91 05       	cpc	r25, r1
    2090:	31 f0       	breq	.+12     	; 0x209e <LCD_VidGoTOLocation+0x11c>
    2092:	29 89       	ldd	r18, Y+17	; 0x11
    2094:	3a 89       	ldd	r19, Y+18	; 0x12
    2096:	22 30       	cpi	r18, 0x02	; 2
    2098:	31 05       	cpc	r19, r1
    209a:	31 f0       	breq	.+12     	; 0x20a8 <LCD_VidGoTOLocation+0x126>
    209c:	09 c0       	rjmp	.+18     	; 0x20b0 <LCD_VidGoTOLocation+0x12e>
		{

		    case LCD_RowOne: LCD_SEND_COMMAND(LCD_RowOneStart+ Copy_U8ColNumber);
    209e:	88 89       	ldd	r24, Y+16	; 0x10
    20a0:	80 58       	subi	r24, 0x80	; 128
    20a2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
    20a6:	04 c0       	rjmp	.+8      	; 0x20b0 <LCD_VidGoTOLocation+0x12e>
		                     break;
		    case LCD_RowTwo: LCD_SEND_COMMAND(LCD_RowTwoStart + Copy_U8ColNumber);
    20a8:	88 89       	ldd	r24, Y+16	; 0x10
    20aa:	80 54       	subi	r24, 0x40	; 64
    20ac:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
		                     break;
		}

}
    20b0:	62 96       	adiw	r28, 0x12	; 18
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <LCD_VidSendNumber>:

void LCD_VidSendNumber(u32 Copy_U32Number)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	a4 97       	sbiw	r28, 0x24	; 36
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	69 a3       	std	Y+33, r22	; 0x21
    20d8:	7a a3       	std	Y+34, r23	; 0x22
    20da:	8b a3       	std	Y+35, r24	; 0x23
    20dc:	9c a3       	std	Y+36, r25	; 0x24
	u8 nums[32];
	itoa(Copy_U32Number, nums , 10);  //convert integer data type to string datatype ,10 (base-DEC)
    20de:	89 a1       	ldd	r24, Y+33	; 0x21
    20e0:	9a a1       	ldd	r25, Y+34	; 0x22
    20e2:	9e 01       	movw	r18, r28
    20e4:	2f 5f       	subi	r18, 0xFF	; 255
    20e6:	3f 4f       	sbci	r19, 0xFF	; 255
    20e8:	b9 01       	movw	r22, r18
    20ea:	4a e0       	ldi	r20, 0x0A	; 10
    20ec:	50 e0       	ldi	r21, 0x00	; 0
    20ee:	0e 94 98 29 	call	0x5330	; 0x5330 <itoa>
	LCD_VidSendStrig(nums);
    20f2:	ce 01       	movw	r24, r28
    20f4:	01 96       	adiw	r24, 0x01	; 1
    20f6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>

}
    20fa:	a4 96       	adiw	r28, 0x24	; 36
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <SPI_MasterInit>:
#include"STD_TYPES.h"
#include"DIO.h"
#include"SPI.h"

void SPI_MasterInit(void)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN5,DIO_OUTPUT); //MOSI
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	65 e0       	ldi	r22, 0x05	; 5
    2118:	41 e0       	ldi	r20, 0x01	; 1
    211a:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_INPUT); //MISO
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	66 e0       	ldi	r22, 0x06	; 6
    2122:	40 e0       	ldi	r20, 0x00	; 0
    2124:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>

DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN7,DIO_OUTPUT);//CLOCK
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	67 e0       	ldi	r22, 0x07	; 7
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN4,DIO_OUTPUT); //CS
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	64 e0       	ldi	r22, 0x04	; 4
    2136:	41 e0       	ldi	r20, 0x01	; 1
    2138:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
DIO_VidSetPinValue(DIO_PORTB,DIO_PIN4,DIO_HIGH);
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	64 e0       	ldi	r22, 0x04	; 4
    2140:	41 e0       	ldi	r20, 0x01	; 1
    2142:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>

SPCR=0b01011110;
    2146:	ed e2       	ldi	r30, 0x2D	; 45
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	8e e5       	ldi	r24, 0x5E	; 94
    214c:	80 83       	st	Z, r24
 * pin2-------cphase
 * pin1,pin0  -------  prescale  64
 * */


}
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <SPI_u8MasterTrancieve>:
u8 SPI_u8MasterTrancieve(u8 Data)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	0f 92       	push	r0
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	89 83       	std	Y+1, r24	; 0x01
	DIO_VidSetPinValue(DIO_PORTB,DIO_PIN4,DIO_LOW);
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	64 e0       	ldi	r22, 0x04	; 4
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
	SPDR= Data;
    216a:	ef e2       	ldi	r30, 0x2F	; 47
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,SPIF)==0);
    2172:	ee e2       	ldi	r30, 0x2E	; 46
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	88 23       	and	r24, r24
    217a:	dc f7       	brge	.-10     	; 0x2172 <SPI_u8MasterTrancieve+0x1e>
	DIO_VidSetPinValue(DIO_PORTB,DIO_PIN4,DIO_HIGH);
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	64 e0       	ldi	r22, 0x04	; 4
    2180:	41 e0       	ldi	r20, 0x01	; 1
    2182:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPinValue>
	return SPDR;
    2186:	ef e2       	ldi	r30, 0x2F	; 47
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
}
    218c:	0f 90       	pop	r0
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <SPT_SlaveInit>:
void SPT_SlaveInit(void)
{
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN5,DIO_INPUT);
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	65 e0       	ldi	r22, 0x05	; 5
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	66 e0       	ldi	r22, 0x06	; 6
    21aa:	41 e0       	ldi	r20, 0x01	; 1
    21ac:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>

	DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN7,DIO_INPUT);
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	67 e0       	ldi	r22, 0x07	; 7
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN4,DIO_INPUT);
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	64 e0       	ldi	r22, 0x04	; 4
    21be:	40 e0       	ldi	r20, 0x00	; 0
    21c0:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	SPCR=0b01001110;
    21c4:	ed e2       	ldi	r30, 0x2D	; 45
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	8e e4       	ldi	r24, 0x4E	; 78
    21ca:	80 83       	st	Z, r24
	 * pin4    ===  slave  =0
	 * pin3 -----cpol
	 * pin2-------cphase
	 * pin1,pin0  -------  prescale  64
	 * */
}
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <SPI_u8SlaveTrancieve>:

u8 SPI_u8SlaveTrancieve(u8 Data)
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	0f 92       	push	r0
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	89 83       	std	Y+1, r24	; 0x01

	SPDR= Data;
    21de:	ef e2       	ldi	r30, 0x2F	; 47
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,SPIF)==0);
    21e6:	ee e2       	ldi	r30, 0x2E	; 46
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	88 23       	and	r24, r24
    21ee:	dc f7       	brge	.-10     	; 0x21e6 <SPI_u8SlaveTrancieve+0x14>
	return SPDR;
    21f0:	ef e2       	ldi	r30, 0x2F	; 47
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
}
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <USART_VIDInit>:

#include"UART.h"


void USART_VIDInit()
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	00 d0       	rcall	.+0      	; 0x2204 <USART_VIDInit+0x6>
    2204:	0f 92       	push	r0
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_U8UCSRC_VALUE=0b10000000;
    220a:	80 e8       	ldi	r24, 0x80	; 128
    220c:	8b 83       	std	Y+3, r24	; 0x03

	u16 Loc_U16BaudRate=BAUD_RATE;
    220e:	87 e6       	ldi	r24, 0x67	; 103
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	9a 83       	std	Y+2, r25	; 0x02
    2214:	89 83       	std	Y+1, r24	; 0x01
	//TO SET UP THE BAUD RATE TO 9600 at frequency 16MHz
	UBRRL=(u8)Loc_U16BaudRate;
    2216:	e9 e2       	ldi	r30, 0x29	; 41
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	80 83       	st	Z, r24
	UBRRH=(u8)(Loc_U16BaudRate>>8);
    221e:	e0 e4       	ldi	r30, 0x40	; 64
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	9a 81       	ldd	r25, Y+2	; 0x02
    2226:	89 2f       	mov	r24, r25
    2228:	99 27       	eor	r25, r25
    222a:	80 83       	st	Z, r24

	//1-UCSRA REGISTER
	//normal speed NOT DOUBLE
	CLR_BIT(UCSRA,U2X);
    222c:	ab e2       	ldi	r26, 0x2B	; 43
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	eb e2       	ldi	r30, 0x2B	; 43
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	8d 7f       	andi	r24, 0xFD	; 253
    2238:	8c 93       	st	X, r24
	//DISABLE MULTI PROCESSOR MODE
	CLR_BIT(UCSRA,MPCM);
    223a:	ab e2       	ldi	r26, 0x2B	; 43
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	eb e2       	ldi	r30, 0x2B	; 43
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	8e 7f       	andi	r24, 0xFE	; 254
    2246:	8c 93       	st	X, r24
	                    //----------------------------
	//2-UCSRB  register
	//WE USE POLLING SYSTEM NOT INTERRUT (IN case of useage interrupt we need to use the GIA)
	//Rx and TX ENABLE
	SET_BIT(UCSRB,RXEN);
    2248:	aa e2       	ldi	r26, 0x2A	; 42
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	ea e2       	ldi	r30, 0x2A	; 42
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	80 61       	ori	r24, 0x10	; 16
    2254:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    2256:	aa e2       	ldi	r26, 0x2A	; 42
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	ea e2       	ldi	r30, 0x2A	; 42
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	88 60       	ori	r24, 0x08	; 8
    2262:	8c 93       	st	X, r24

	//TO SELECT CHAR SIZE (8 BIT)
	CLR_BIT(UCSRB,UCSZ2);
    2264:	aa e2       	ldi	r26, 0x2A	; 42
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	ea e2       	ldi	r30, 0x2A	; 42
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	8b 7f       	andi	r24, 0xFB	; 251
    2270:	8c 93       	st	X, r24
	SET_BIT(Loc_U8UCSRC_VALUE,UCSZ0);
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	82 60       	ori	r24, 0x02	; 2
    2276:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Loc_U8UCSRC_VALUE,UCSZ1);
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	84 60       	ori	r24, 0x04	; 4
    227c:	8b 83       	std	Y+3, r24	; 0x03
	           //------------------------------
	//3-UCSAC REGISTER VALUE
	//SELECT ASYNCH
	CLR_BIT(Loc_U8UCSRC_VALUE,UMSEL);
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	8f 7b       	andi	r24, 0xBF	; 191
    2282:	8b 83       	std	Y+3, r24	; 0x03
	//DISABLE PARITY
	CLR_BIT(Loc_U8UCSRC_VALUE,UPM0);
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	8f 7e       	andi	r24, 0xEF	; 239
    2288:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Loc_U8UCSRC_VALUE,UPM1);
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	8f 7d       	andi	r24, 0xDF	; 223
    228e:	8b 83       	std	Y+3, r24	; 0x03
	//TWO STOP BITS
	SET_BIT(Loc_U8UCSRC_VALUE,USBS);
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	88 60       	ori	r24, 0x08	; 8
    2294:	8b 83       	std	Y+3, r24	; 0x03

	//UPDATE UCSRC REGISTER
	UCSRC=Loc_U8UCSRC_VALUE;
    2296:	e0 e4       	ldi	r30, 0x40	; 64
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	80 83       	st	Z, r24

}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <USART_VIDSendChar>:

void USART_VIDSendChar(u8 copy_u8char)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	0f 92       	push	r0
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	89 83       	std	Y+1, r24	; 0x01
	//check if the UDR register is ready to send
	while(GET_BIT(UCSRA,UDRE)==0);  //POLLINR waiting for the flag the register is ready
    22b6:	eb e2       	ldi	r30, 0x2B	; 43
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	82 95       	swap	r24
    22be:	86 95       	lsr	r24
    22c0:	87 70       	andi	r24, 0x07	; 7
    22c2:	88 2f       	mov	r24, r24
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	81 70       	andi	r24, 0x01	; 1
    22c8:	90 70       	andi	r25, 0x00	; 0
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	a1 f3       	breq	.-24     	; 0x22b6 <USART_VIDSendChar+0xc>
	UDR=copy_u8char; //PUT THE 8BITS in the UDR register
    22ce:	ec e2       	ldi	r30, 0x2C	; 44
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	80 83       	st	Z, r24

}
    22d6:	0f 90       	pop	r0
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <USART_U8RECIEVEChar>:

u8 USART_U8RECIEVEChar()
{
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	0f 92       	push	r0
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_U8character;
	//check if the receive operation is complete (once the end bit reaches )
	while(GET_BIT(UCSRA,RXC)==0);  //POLLINR waiting for tHE receive OPERATION IS COMPLETE
    22e8:	eb e2       	ldi	r30, 0x2B	; 43
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	88 23       	and	r24, r24
    22f0:	dc f7       	brge	.-10     	; 0x22e8 <USART_U8RECIEVEChar+0xa>
	Loc_U8character=UDR;
    22f2:	ec e2       	ldi	r30, 0x2C	; 44
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	89 83       	std	Y+1, r24	; 0x01
	return Loc_U8character;
    22fa:	89 81       	ldd	r24, Y+1	; 0x01

}
    22fc:	0f 90       	pop	r0
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <main>:
#include"KPD.h"
#include"DIO.h"
#include"UART.h"
#include"SPI.h"
void main(void)
{
    2304:	0f 93       	push	r16
    2306:	1f 93       	push	r17
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	ce 52       	subi	r28, 0x2E	; 46
    2312:	d1 40       	sbci	r29, 0x01	; 1
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
	u8 masterR;
	u8 x=0 , FLAG=1,FLAG2=1,FLAG3=1 ,FLAG4=1,FLAG5=1;
    231e:	fe 01       	movw	r30, r28
    2320:	ed 5e       	subi	r30, 0xED	; 237
    2322:	fe 4f       	sbci	r31, 0xFE	; 254
    2324:	10 82       	st	Z, r1
    2326:	fe 01       	movw	r30, r28
    2328:	ee 5e       	subi	r30, 0xEE	; 238
    232a:	fe 4f       	sbci	r31, 0xFE	; 254
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	80 83       	st	Z, r24
    2330:	fe 01       	movw	r30, r28
    2332:	ef 5e       	subi	r30, 0xEF	; 239
    2334:	fe 4f       	sbci	r31, 0xFE	; 254
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	80 83       	st	Z, r24
    233a:	fe 01       	movw	r30, r28
    233c:	e0 5f       	subi	r30, 0xF0	; 240
    233e:	fe 4f       	sbci	r31, 0xFE	; 254
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	80 83       	st	Z, r24
    2344:	fe 01       	movw	r30, r28
    2346:	e1 5f       	subi	r30, 0xF1	; 241
    2348:	fe 4f       	sbci	r31, 0xFE	; 254
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	80 83       	st	Z, r24
    234e:	fe 01       	movw	r30, r28
    2350:	e2 5f       	subi	r30, 0xF2	; 242
    2352:	fe 4f       	sbci	r31, 0xFE	; 254
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	80 83       	st	Z, r24
	u8 read=0xFF , read2=0xFF,read3=0xFF;
    2358:	fe 01       	movw	r30, r28
    235a:	e3 5f       	subi	r30, 0xF3	; 243
    235c:	fe 4f       	sbci	r31, 0xFE	; 254
    235e:	8f ef       	ldi	r24, 0xFF	; 255
    2360:	80 83       	st	Z, r24
    2362:	fe 01       	movw	r30, r28
    2364:	e4 5f       	subi	r30, 0xF4	; 244
    2366:	fe 4f       	sbci	r31, 0xFE	; 254
    2368:	8f ef       	ldi	r24, 0xFF	; 255
    236a:	80 83       	st	Z, r24
    236c:	fe 01       	movw	r30, r28
    236e:	e5 5f       	subi	r30, 0xF5	; 245
    2370:	fe 4f       	sbci	r31, 0xFE	; 254
    2372:	8f ef       	ldi	r24, 0xFF	; 255
    2374:	80 83       	st	Z, r24
	USART_VIDInit();
    2376:	0e 94 ff 10 	call	0x21fe	; 0x21fe <USART_VIDInit>
	KPD_Init();
    237a:	0e 94 cf 09 	call	0x139e	; 0x139e <KPD_Init>
	LCD_VidInit();
    237e:	0e 94 cf 0c 	call	0x199e	; 0x199e <LCD_VidInit>
	SPI_MasterInit();
    2382:	0e 94 86 10 	call	0x210c	; 0x210c <SPI_MasterInit>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_INPUT); //UART RX
    2386:	83 e0       	ldi	r24, 0x03	; 3
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_OUTPUT); //UART  TX
    2390:	83 e0       	ldi	r24, 0x03	; 3
    2392:	61 e0       	ldi	r22, 0x01	; 1
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
    239a:	fe 01       	movw	r30, r28
    239c:	e9 5f       	subi	r30, 0xF9	; 249
    239e:	fe 4f       	sbci	r31, 0xFE	; 254
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e8       	ldi	r25, 0x80	; 128
    23a4:	ac ef       	ldi	r26, 0xFC	; 252
    23a6:	b3 e4       	ldi	r27, 0x43	; 67
    23a8:	80 83       	st	Z, r24
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	a2 83       	std	Z+2, r26	; 0x02
    23ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b0:	8e 01       	movw	r16, r28
    23b2:	0d 5f       	subi	r16, 0xFD	; 253
    23b4:	1e 4f       	sbci	r17, 0xFE	; 254
    23b6:	fe 01       	movw	r30, r28
    23b8:	e9 5f       	subi	r30, 0xF9	; 249
    23ba:	fe 4f       	sbci	r31, 0xFE	; 254
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	4a e7       	ldi	r20, 0x7A	; 122
    23ca:	55 e4       	ldi	r21, 0x45	; 69
    23cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	f8 01       	movw	r30, r16
    23d6:	80 83       	st	Z, r24
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	a2 83       	std	Z+2, r26	; 0x02
    23dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23de:	fe 01       	movw	r30, r28
    23e0:	ed 5f       	subi	r30, 0xFD	; 253
    23e2:	fe 4f       	sbci	r31, 0xFE	; 254
    23e4:	60 81       	ld	r22, Z
    23e6:	71 81       	ldd	r23, Z+1	; 0x01
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	93 81       	ldd	r25, Z+3	; 0x03
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e8       	ldi	r20, 0x80	; 128
    23f2:	5f e3       	ldi	r21, 0x3F	; 63
    23f4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23f8:	88 23       	and	r24, r24
    23fa:	44 f4       	brge	.+16     	; 0x240c <main+0x108>
		__ticks = 1;
    23fc:	fe 01       	movw	r30, r28
    23fe:	ef 5f       	subi	r30, 0xFF	; 255
    2400:	fe 4f       	sbci	r31, 0xFE	; 254
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	80 83       	st	Z, r24
    240a:	64 c0       	rjmp	.+200    	; 0x24d4 <main+0x1d0>
	else if (__tmp > 65535)
    240c:	fe 01       	movw	r30, r28
    240e:	ed 5f       	subi	r30, 0xFD	; 253
    2410:	fe 4f       	sbci	r31, 0xFE	; 254
    2412:	60 81       	ld	r22, Z
    2414:	71 81       	ldd	r23, Z+1	; 0x01
    2416:	82 81       	ldd	r24, Z+2	; 0x02
    2418:	93 81       	ldd	r25, Z+3	; 0x03
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	3f ef       	ldi	r19, 0xFF	; 255
    241e:	4f e7       	ldi	r20, 0x7F	; 127
    2420:	57 e4       	ldi	r21, 0x47	; 71
    2422:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2426:	18 16       	cp	r1, r24
    2428:	0c f0       	brlt	.+2      	; 0x242c <main+0x128>
    242a:	43 c0       	rjmp	.+134    	; 0x24b2 <main+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242c:	fe 01       	movw	r30, r28
    242e:	e9 5f       	subi	r30, 0xF9	; 249
    2430:	fe 4f       	sbci	r31, 0xFE	; 254
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e2       	ldi	r20, 0x20	; 32
    2440:	51 e4       	ldi	r21, 0x41	; 65
    2442:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	8e 01       	movw	r16, r28
    244c:	0f 5f       	subi	r16, 0xFF	; 255
    244e:	1e 4f       	sbci	r17, 0xFE	; 254
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	f8 01       	movw	r30, r16
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	80 83       	st	Z, r24
    2462:	1f c0       	rjmp	.+62     	; 0x24a2 <main+0x19e>
    2464:	fe 01       	movw	r30, r28
    2466:	e1 50       	subi	r30, 0x01	; 1
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 e9       	ldi	r24, 0x90	; 144
    246c:	91 e0       	ldi	r25, 0x01	; 1
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	80 83       	st	Z, r24
    2472:	fe 01       	movw	r30, r28
    2474:	e1 50       	subi	r30, 0x01	; 1
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 81       	ld	r24, Z
    247a:	91 81       	ldd	r25, Z+1	; 0x01
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <main+0x178>
    2480:	fe 01       	movw	r30, r28
    2482:	e1 50       	subi	r30, 0x01	; 1
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	91 83       	std	Z+1, r25	; 0x01
    2488:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248a:	de 01       	movw	r26, r28
    248c:	af 5f       	subi	r26, 0xFF	; 255
    248e:	be 4f       	sbci	r27, 0xFE	; 254
    2490:	fe 01       	movw	r30, r28
    2492:	ef 5f       	subi	r30, 0xFF	; 255
    2494:	fe 4f       	sbci	r31, 0xFE	; 254
    2496:	80 81       	ld	r24, Z
    2498:	91 81       	ldd	r25, Z+1	; 0x01
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	11 96       	adiw	r26, 0x01	; 1
    249e:	9c 93       	st	X, r25
    24a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a2:	fe 01       	movw	r30, r28
    24a4:	ef 5f       	subi	r30, 0xFF	; 255
    24a6:	fe 4f       	sbci	r31, 0xFE	; 254
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	d1 f6       	brne	.-76     	; 0x2464 <main+0x160>
    24b0:	27 c0       	rjmp	.+78     	; 0x2500 <main+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b2:	8e 01       	movw	r16, r28
    24b4:	0f 5f       	subi	r16, 0xFF	; 255
    24b6:	1e 4f       	sbci	r17, 0xFE	; 254
    24b8:	fe 01       	movw	r30, r28
    24ba:	ed 5f       	subi	r30, 0xFD	; 253
    24bc:	fe 4f       	sbci	r31, 0xFE	; 254
    24be:	60 81       	ld	r22, Z
    24c0:	71 81       	ldd	r23, Z+1	; 0x01
    24c2:	82 81       	ldd	r24, Z+2	; 0x02
    24c4:	93 81       	ldd	r25, Z+3	; 0x03
    24c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	f8 01       	movw	r30, r16
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	80 83       	st	Z, r24
    24d4:	de 01       	movw	r26, r28
    24d6:	a3 50       	subi	r26, 0x03	; 3
    24d8:	bf 4f       	sbci	r27, 0xFF	; 255
    24da:	fe 01       	movw	r30, r28
    24dc:	ef 5f       	subi	r30, 0xFF	; 255
    24de:	fe 4f       	sbci	r31, 0xFE	; 254
    24e0:	80 81       	ld	r24, Z
    24e2:	91 81       	ldd	r25, Z+1	; 0x01
    24e4:	8d 93       	st	X+, r24
    24e6:	9c 93       	st	X, r25
    24e8:	fe 01       	movw	r30, r28
    24ea:	e3 50       	subi	r30, 0x03	; 3
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 81       	ld	r24, Z
    24f0:	91 81       	ldd	r25, Z+1	; 0x01
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <main+0x1ee>
    24f6:	fe 01       	movw	r30, r28
    24f8:	e3 50       	subi	r30, 0x03	; 3
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
	while(1)
	{
		//RECIVING SIGNAL FROM DOOR MCU
		_delay_ms(505);
		x=USART_U8RECIEVEChar();
    2500:	0e 94 6f 11 	call	0x22de	; 0x22de <USART_U8RECIEVEChar>
    2504:	fe 01       	movw	r30, r28
    2506:	ed 5e       	subi	r30, 0xED	; 237
    2508:	fe 4f       	sbci	r31, 0xFE	; 254
    250a:	80 83       	st	Z, r24
        //WHEN ADMIN YASMEEN GET IN FROM THE DOOR TO THE HOME
		if(x==1)
    250c:	fe 01       	movw	r30, r28
    250e:	ed 5e       	subi	r30, 0xED	; 237
    2510:	fe 4f       	sbci	r31, 0xFE	; 254
    2512:	80 81       	ld	r24, Z
    2514:	81 30       	cpi	r24, 0x01	; 1
    2516:	81 f4       	brne	.+32     	; 0x2538 <main+0x234>
		{
			   LCD_SEND_COMMAND(0x01);
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
	           LCD_VidSendStrig(" Welcome Home");
    251e:	80 e6       	ldi	r24, 0x60	; 96
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
	           LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2526:	82 e0       	ldi	r24, 0x02	; 2
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
		       LCD_VidSendStrig("Admin Yasmeen ");
    252e:	8e e6       	ldi	r24, 0x6E	; 110
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    2536:	2f c0       	rjmp	.+94     	; 0x2596 <main+0x292>

		}
		else if(x==2) //WHEN ADMIN YOUSEF GET IN FROM THE DOOR TO THE HOME
    2538:	fe 01       	movw	r30, r28
    253a:	ed 5e       	subi	r30, 0xED	; 237
    253c:	fe 4f       	sbci	r31, 0xFE	; 254
    253e:	80 81       	ld	r24, Z
    2540:	82 30       	cpi	r24, 0x02	; 2
    2542:	81 f4       	brne	.+32     	; 0x2564 <main+0x260>
		{
			LCD_SEND_COMMAND(0x01);
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
			LCD_VidSendStrig(" Welcome Home");
    254a:	80 e6       	ldi	r24, 0x60	; 96
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
		    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2552:	82 e0       	ldi	r24, 0x02	; 2
    2554:	60 e0       	ldi	r22, 0x00	; 0
    2556:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
		    LCD_VidSendStrig("Admin Yousef ");
    255a:	8d e7       	ldi	r24, 0x7D	; 125
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    2562:	19 c0       	rjmp	.+50     	; 0x2596 <main+0x292>


		}
		else if(x==3)//WHEN GUEST YASSER GET IN FROM THE DOOR TO THE HOME
    2564:	fe 01       	movw	r30, r28
    2566:	ed 5e       	subi	r30, 0xED	; 237
    2568:	fe 4f       	sbci	r31, 0xFE	; 254
    256a:	80 81       	ld	r24, Z
    256c:	83 30       	cpi	r24, 0x03	; 3
    256e:	81 f4       	brne	.+32     	; 0x2590 <main+0x28c>
		{
	     LCD_SEND_COMMAND(0x01);
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
         LCD_VidSendStrig(" Guest Yasser  ");
    2576:	8b e8       	ldi	r24, 0x8B	; 139
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
         LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    257e:	82 e0       	ldi	r24, 0x02	; 2
    2580:	60 e0       	ldi	r22, 0x00	; 0
    2582:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
	     LCD_VidSendStrig(" outside!!!");
    2586:	8b e9       	ldi	r24, 0x9B	; 155
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    258e:	03 c0       	rjmp	.+6      	; 0x2596 <main+0x292>

		}
		else
		{
			LCD_SEND_COMMAND(0x01); //clear screen
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
		}
		//WAIT FOR THE USRT TO PRESS = TO SHOW HIM THE OPTIONS
		read=0xFF;
    2596:	fe 01       	movw	r30, r28
    2598:	e3 5f       	subi	r30, 0xF3	; 243
    259a:	fe 4f       	sbci	r31, 0xFE	; 254
    259c:	8f ef       	ldi	r24, 0xFF	; 255
    259e:	80 83       	st	Z, r24
    25a0:	06 c0       	rjmp	.+12     	; 0x25ae <main+0x2aa>
		while(read==0xFF)
		{
		 read= KPD_u8GetPressedKey();
    25a2:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    25a6:	fe 01       	movw	r30, r28
    25a8:	e3 5f       	subi	r30, 0xF3	; 243
    25aa:	fe 4f       	sbci	r31, 0xFE	; 254
    25ac:	80 83       	st	Z, r24
		{
			LCD_SEND_COMMAND(0x01); //clear screen
		}
		//WAIT FOR THE USRT TO PRESS = TO SHOW HIM THE OPTIONS
		read=0xFF;
		while(read==0xFF)
    25ae:	fe 01       	movw	r30, r28
    25b0:	e3 5f       	subi	r30, 0xF3	; 243
    25b2:	fe 4f       	sbci	r31, 0xFE	; 254
    25b4:	80 81       	ld	r24, Z
    25b6:	8f 3f       	cpi	r24, 0xFF	; 255
    25b8:	a1 f3       	breq	.-24     	; 0x25a2 <main+0x29e>
		{
		 read= KPD_u8GetPressedKey();
		}
		if(read!=0xFF)
    25ba:	fe 01       	movw	r30, r28
    25bc:	e3 5f       	subi	r30, 0xF3	; 243
    25be:	fe 4f       	sbci	r31, 0xFE	; 254
    25c0:	80 81       	ld	r24, Z
    25c2:	8f 3f       	cpi	r24, 0xFF	; 255
    25c4:	09 f4       	brne	.+2      	; 0x25c8 <main+0x2c4>
    25c6:	e9 ce       	rjmp	.-558    	; 0x239a <main+0x96>
		{
			//IF HE PRESSED = SO HE WANT TO CONTROL SOME THING
			if(read=='=')
    25c8:	fe 01       	movw	r30, r28
    25ca:	e3 5f       	subi	r30, 0xF3	; 243
    25cc:	fe 4f       	sbci	r31, 0xFE	; 254
    25ce:	80 81       	ld	r24, Z
    25d0:	8d 33       	cpi	r24, 0x3D	; 61
    25d2:	09 f0       	breq	.+2      	; 0x25d6 <main+0x2d2>
    25d4:	e2 ce       	rjmp	.-572    	; 0x239a <main+0x96>
			{
				//FIREST HE SHOULD SELECT THE MODE
				LCD_SEND_COMMAND(0x01);
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
			    LCD_VidSendStrig(" SELECT MODE");
    25dc:	87 ea       	ldi	r24, 0xA7	; 167
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
			    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    25e4:	82 e0       	ldi	r24, 0x02	; 2
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
				LCD_VidSendStrig("0:Admin 1:Guest ");
    25ec:	84 eb       	ldi	r24, 0xB4	; 180
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
				while(1)
				{
					read=0xFF;
    25f4:	fe 01       	movw	r30, r28
    25f6:	e3 5f       	subi	r30, 0xF3	; 243
    25f8:	fe 4f       	sbci	r31, 0xFE	; 254
    25fa:	8f ef       	ldi	r24, 0xFF	; 255
    25fc:	80 83       	st	Z, r24
    25fe:	06 c0       	rjmp	.+12     	; 0x260c <main+0x308>
					while(read==0xFF)
					{
						read= KPD_u8GetPressedKey();
    2600:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    2604:	fe 01       	movw	r30, r28
    2606:	e3 5f       	subi	r30, 0xF3	; 243
    2608:	fe 4f       	sbci	r31, 0xFE	; 254
    260a:	80 83       	st	Z, r24
			    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
				LCD_VidSendStrig("0:Admin 1:Guest ");
				while(1)
				{
					read=0xFF;
					while(read==0xFF)
    260c:	fe 01       	movw	r30, r28
    260e:	e3 5f       	subi	r30, 0xF3	; 243
    2610:	fe 4f       	sbci	r31, 0xFE	; 254
    2612:	80 81       	ld	r24, Z
    2614:	8f 3f       	cpi	r24, 0xFF	; 255
    2616:	a1 f3       	breq	.-24     	; 0x2600 <main+0x2fc>
					{
						read= KPD_u8GetPressedKey();
					}

					if(read!=0xFF)
    2618:	fe 01       	movw	r30, r28
    261a:	e3 5f       	subi	r30, 0xF3	; 243
    261c:	fe 4f       	sbci	r31, 0xFE	; 254
    261e:	80 81       	ld	r24, Z
    2620:	8f 3f       	cpi	r24, 0xFF	; 255
    2622:	11 f4       	brne	.+4      	; 0x2628 <main+0x324>
    2624:	0c 94 52 29 	jmp	0x52a4	; 0x52a4 <main+0x2fa0>
					{
						if(read=='0')
    2628:	fe 01       	movw	r30, r28
    262a:	e3 5f       	subi	r30, 0xF3	; 243
    262c:	fe 4f       	sbci	r31, 0xFE	; 254
    262e:	80 81       	ld	r24, Z
    2630:	80 33       	cpi	r24, 0x30	; 48
    2632:	11 f0       	breq	.+4      	; 0x2638 <main+0x334>
    2634:	0c 94 ff 21 	jmp	0x43fe	; 0x43fe <main+0x20fa>
						{
							//admin mode
							LCD_SEND_COMMAND(0x01);
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
						    LCD_VidSendStrig(" 1:Room1 2:Room2");
    263e:	85 ec       	ldi	r24, 0xC5	; 197
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
						    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2646:	82 e0       	ldi	r24, 0x02	; 2
    2648:	60 e0       	ldi	r22, 0x00	; 0
    264a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
							LCD_VidSendStrig("3:Room3 4:+ 0RET");
    264e:	86 ed       	ldi	r24, 0xD6	; 214
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
							while(1)
							{
								read2=0xFF;
    2656:	fe 01       	movw	r30, r28
    2658:	e4 5f       	subi	r30, 0xF4	; 244
    265a:	fe 4f       	sbci	r31, 0xFE	; 254
    265c:	8f ef       	ldi	r24, 0xFF	; 255
    265e:	80 83       	st	Z, r24
    2660:	06 c0       	rjmp	.+12     	; 0x266e <main+0x36a>
								while(read2==0xFF)
								{
									read2= KPD_u8GetPressedKey();
    2662:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    2666:	fe 01       	movw	r30, r28
    2668:	e4 5f       	subi	r30, 0xF4	; 244
    266a:	fe 4f       	sbci	r31, 0xFE	; 254
    266c:	80 83       	st	Z, r24
						    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
							LCD_VidSendStrig("3:Room3 4:+ 0RET");
							while(1)
							{
								read2=0xFF;
								while(read2==0xFF)
    266e:	fe 01       	movw	r30, r28
    2670:	e4 5f       	subi	r30, 0xF4	; 244
    2672:	fe 4f       	sbci	r31, 0xFE	; 254
    2674:	80 81       	ld	r24, Z
    2676:	8f 3f       	cpi	r24, 0xFF	; 255
    2678:	a1 f3       	breq	.-24     	; 0x2662 <main+0x35e>
								{
									read2= KPD_u8GetPressedKey();
								}
								if(read2!=0xFF)
    267a:	fe 01       	movw	r30, r28
    267c:	e4 5f       	subi	r30, 0xF4	; 244
    267e:	fe 4f       	sbci	r31, 0xFE	; 254
    2680:	80 81       	ld	r24, Z
    2682:	8f 3f       	cpi	r24, 0xFF	; 255
    2684:	11 f4       	brne	.+4      	; 0x268a <main+0x386>
    2686:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <main+0x20de>
								{
									switch(read2)
    268a:	fe 01       	movw	r30, r28
    268c:	e4 5f       	subi	r30, 0xF4	; 244
    268e:	fe 4f       	sbci	r31, 0xFE	; 254
    2690:	80 81       	ld	r24, Z
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	c3 5d       	subi	r28, 0xD3	; 211
    2698:	de 4f       	sbci	r29, 0xFE	; 254
    269a:	39 83       	std	Y+1, r19	; 0x01
    269c:	28 83       	st	Y, r18
    269e:	cd 52       	subi	r28, 0x2D	; 45
    26a0:	d1 40       	sbci	r29, 0x01	; 1
    26a2:	c3 5d       	subi	r28, 0xD3	; 211
    26a4:	de 4f       	sbci	r29, 0xFE	; 254
    26a6:	88 81       	ld	r24, Y
    26a8:	99 81       	ldd	r25, Y+1	; 0x01
    26aa:	cd 52       	subi	r28, 0x2D	; 45
    26ac:	d1 40       	sbci	r29, 0x01	; 1
    26ae:	83 30       	cpi	r24, 0x03	; 3
    26b0:	91 05       	cpc	r25, r1
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <main+0x3b2>
    26b4:	19 c6       	rjmp	.+3122   	; 0x32e8 <main+0xfe4>
    26b6:	c3 5d       	subi	r28, 0xD3	; 211
    26b8:	de 4f       	sbci	r29, 0xFE	; 254
    26ba:	e8 81       	ld	r30, Y
    26bc:	f9 81       	ldd	r31, Y+1	; 0x01
    26be:	cd 52       	subi	r28, 0x2D	; 45
    26c0:	d1 40       	sbci	r29, 0x01	; 1
    26c2:	e4 30       	cpi	r30, 0x04	; 4
    26c4:	f1 05       	cpc	r31, r1
    26c6:	ac f4       	brge	.+42     	; 0x26f2 <main+0x3ee>
    26c8:	c3 5d       	subi	r28, 0xD3	; 211
    26ca:	de 4f       	sbci	r29, 0xFE	; 254
    26cc:	28 81       	ld	r18, Y
    26ce:	39 81       	ldd	r19, Y+1	; 0x01
    26d0:	cd 52       	subi	r28, 0x2D	; 45
    26d2:	d1 40       	sbci	r29, 0x01	; 1
    26d4:	21 30       	cpi	r18, 0x01	; 1
    26d6:	31 05       	cpc	r19, r1
    26d8:	19 f1       	breq	.+70     	; 0x2720 <main+0x41c>
    26da:	c3 5d       	subi	r28, 0xD3	; 211
    26dc:	de 4f       	sbci	r29, 0xFE	; 254
    26de:	88 81       	ld	r24, Y
    26e0:	99 81       	ldd	r25, Y+1	; 0x01
    26e2:	cd 52       	subi	r28, 0x2D	; 45
    26e4:	d1 40       	sbci	r29, 0x01	; 1
    26e6:	82 30       	cpi	r24, 0x02	; 2
    26e8:	91 05       	cpc	r25, r1
    26ea:	09 f4       	brne	.+2      	; 0x26ee <main+0x3ea>
    26ec:	0b c3       	rjmp	.+1558   	; 0x2d04 <main+0xa00>
    26ee:	0c 94 20 21 	jmp	0x4240	; 0x4240 <main+0x1f3c>
    26f2:	c3 5d       	subi	r28, 0xD3	; 211
    26f4:	de 4f       	sbci	r29, 0xFE	; 254
    26f6:	e8 81       	ld	r30, Y
    26f8:	f9 81       	ldd	r31, Y+1	; 0x01
    26fa:	cd 52       	subi	r28, 0x2D	; 45
    26fc:	d1 40       	sbci	r29, 0x01	; 1
    26fe:	e4 30       	cpi	r30, 0x04	; 4
    2700:	f1 05       	cpc	r31, r1
    2702:	09 f4       	brne	.+2      	; 0x2706 <main+0x402>
    2704:	7c c7       	rjmp	.+3832   	; 0x35fe <main+0x12fa>
    2706:	c3 5d       	subi	r28, 0xD3	; 211
    2708:	de 4f       	sbci	r29, 0xFE	; 254
    270a:	28 81       	ld	r18, Y
    270c:	39 81       	ldd	r19, Y+1	; 0x01
    270e:	cd 52       	subi	r28, 0x2D	; 45
    2710:	d1 40       	sbci	r29, 0x01	; 1
    2712:	20 33       	cpi	r18, 0x30	; 48
    2714:	31 05       	cpc	r19, r1
    2716:	11 f4       	brne	.+4      	; 0x271c <main+0x418>
    2718:	0c 94 05 21 	jmp	0x420a	; 0x420a <main+0x1f06>
    271c:	0c 94 20 21 	jmp	0x4240	; 0x4240 <main+0x1f3c>
									{
									case 1 : // IF HE CHOOSE ROOM1
										    LCD_SEND_COMMAND(0x01);
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
								            LCD_VidSendStrig(" Room1 S:OFF");
    2726:	87 ee       	ldi	r24, 0xE7	; 231
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    272e:	82 e0       	ldi	r24, 0x02	; 2
    2730:	60 e0       	ldi	r22, 0x00	; 0
    2732:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
								           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    2736:	84 ef       	ldi	r24, 0xF4	; 244
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								           	while(1)
								           	{
									           	read3=0xFF;
    273e:	fe 01       	movw	r30, r28
    2740:	e5 5f       	subi	r30, 0xF5	; 245
    2742:	fe 4f       	sbci	r31, 0xFE	; 254
    2744:	8f ef       	ldi	r24, 0xFF	; 255
    2746:	80 83       	st	Z, r24
    2748:	06 c0       	rjmp	.+12     	; 0x2756 <main+0x452>
												while(read3==0xFF)
												{
													read3= KPD_u8GetPressedKey();
    274a:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    274e:	fe 01       	movw	r30, r28
    2750:	e5 5f       	subi	r30, 0xF5	; 245
    2752:	fe 4f       	sbci	r31, 0xFE	; 254
    2754:	80 83       	st	Z, r24
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
								           	LCD_VidSendStrig("1:on 2:off 3:RET ");
								           	while(1)
								           	{
									           	read3=0xFF;
												while(read3==0xFF)
    2756:	fe 01       	movw	r30, r28
    2758:	e5 5f       	subi	r30, 0xF5	; 245
    275a:	fe 4f       	sbci	r31, 0xFE	; 254
    275c:	80 81       	ld	r24, Z
    275e:	8f 3f       	cpi	r24, 0xFF	; 255
    2760:	a1 f3       	breq	.-24     	; 0x274a <main+0x446>
												{
													read3= KPD_u8GetPressedKey();
												}
									           	if(read3!=0xFF)
    2762:	fe 01       	movw	r30, r28
    2764:	e5 5f       	subi	r30, 0xF5	; 245
    2766:	fe 4f       	sbci	r31, 0xFE	; 254
    2768:	80 81       	ld	r24, Z
    276a:	8f 3f       	cpi	r24, 0xFF	; 255
    276c:	41 f3       	breq	.-48     	; 0x273e <main+0x43a>
									           	{
									           		switch(read3)
    276e:	fe 01       	movw	r30, r28
    2770:	e5 5f       	subi	r30, 0xF5	; 245
    2772:	fe 4f       	sbci	r31, 0xFE	; 254
    2774:	80 81       	ld	r24, Z
    2776:	e8 2f       	mov	r30, r24
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	c5 5d       	subi	r28, 0xD5	; 213
    277c:	de 4f       	sbci	r29, 0xFE	; 254
    277e:	f9 83       	std	Y+1, r31	; 0x01
    2780:	e8 83       	st	Y, r30
    2782:	cb 52       	subi	r28, 0x2B	; 43
    2784:	d1 40       	sbci	r29, 0x01	; 1
    2786:	c5 5d       	subi	r28, 0xD5	; 213
    2788:	de 4f       	sbci	r29, 0xFE	; 254
    278a:	28 81       	ld	r18, Y
    278c:	39 81       	ldd	r19, Y+1	; 0x01
    278e:	cb 52       	subi	r28, 0x2B	; 43
    2790:	d1 40       	sbci	r29, 0x01	; 1
    2792:	22 30       	cpi	r18, 0x02	; 2
    2794:	31 05       	cpc	r19, r1
    2796:	51 f1       	breq	.+84     	; 0x27ec <main+0x4e8>
    2798:	c5 5d       	subi	r28, 0xD5	; 213
    279a:	de 4f       	sbci	r29, 0xFE	; 254
    279c:	88 81       	ld	r24, Y
    279e:	99 81       	ldd	r25, Y+1	; 0x01
    27a0:	cb 52       	subi	r28, 0x2B	; 43
    27a2:	d1 40       	sbci	r29, 0x01	; 1
    27a4:	83 30       	cpi	r24, 0x03	; 3
    27a6:	91 05       	cpc	r25, r1
    27a8:	c1 f1       	breq	.+112    	; 0x281a <main+0x516>
    27aa:	c5 5d       	subi	r28, 0xD5	; 213
    27ac:	de 4f       	sbci	r29, 0xFE	; 254
    27ae:	e8 81       	ld	r30, Y
    27b0:	f9 81       	ldd	r31, Y+1	; 0x01
    27b2:	cb 52       	subi	r28, 0x2B	; 43
    27b4:	d1 40       	sbci	r29, 0x01	; 1
    27b6:	e1 30       	cpi	r30, 0x01	; 1
    27b8:	f1 05       	cpc	r31, r1
    27ba:	09 f0       	breq	.+2      	; 0x27be <main+0x4ba>
    27bc:	03 c1       	rjmp	.+518    	; 0x29c4 <main+0x6c0>
									           		{
									           		case 1: //IF HE CHOOSE ON
									           			    LCD_SEND_COMMAND(0x01);
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							           			            masterR=SPI_u8MasterTrancieve('O'); //room1 will turn on
    27c4:	8f e4       	ldi	r24, 0x4F	; 79
    27c6:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    27ca:	fe 01       	movw	r30, r28
    27cc:	ec 5e       	subi	r30, 0xEC	; 236
    27ce:	fe 4f       	sbci	r31, 0xFE	; 254
    27d0:	80 83       	st	Z, r24
									           			    LCD_VidSendStrig(" Room1 S:ON");
    27d2:	86 e0       	ldi	r24, 0x06	; 6
    27d4:	91 e0       	ldi	r25, 0x01	; 1
    27d6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    27da:	82 e0       	ldi	r24, 0x02	; 2
    27dc:	60 e0       	ldi	r22, 0x00	; 0
    27de:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    27e2:	84 ef       	ldi	r24, 0xF4	; 244
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    27ea:	7e c2       	rjmp	.+1276   	; 0x2ce8 <main+0x9e4>
									           	            //_delay_ms(400);
									           			   break;
									           		case 2: //IF HE CHOOSE OFF
									           			    LCD_SEND_COMMAND(0x01);
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							           			            masterR=SPI_u8MasterTrancieve('F'); //room1 will turn OFF
    27f2:	86 e4       	ldi	r24, 0x46	; 70
    27f4:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    27f8:	fe 01       	movw	r30, r28
    27fa:	ec 5e       	subi	r30, 0xEC	; 236
    27fc:	fe 4f       	sbci	r31, 0xFE	; 254
    27fe:	80 83       	st	Z, r24
									           			    LCD_VidSendStrig(" Room1 S:OFF");
    2800:	87 ee       	ldi	r24, 0xE7	; 231
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2808:	82 e0       	ldi	r24, 0x02	; 2
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    2810:	84 ef       	ldi	r24, 0xF4	; 244
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    2818:	67 c2       	rjmp	.+1230   	; 0x2ce8 <main+0x9e4>
									           	            //_delay_ms(400);
									           			   break;
									           		case 3: //IF HE WANT TO RETURN TO THE PRIVIOUS PAGE
									           			    LCD_SEND_COMMAND(0x01);
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												            LCD_VidSendStrig(" 1:Room1 2:Room2");
    2820:	85 ec       	ldi	r24, 0xC5	; 197
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2828:	82 e0       	ldi	r24, 0x02	; 2
    282a:	60 e0       	ldi	r22, 0x00	; 0
    282c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												            LCD_VidSendStrig("3:Room3 4:+ 0RET");
    2830:	86 ed       	ldi	r24, 0xD6	; 214
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												        	masterR=SPI_u8MasterTrancieve('F');
    2838:	86 e4       	ldi	r24, 0x46	; 70
    283a:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    283e:	fe 01       	movw	r30, r28
    2840:	ec 5e       	subi	r30, 0xEC	; 236
    2842:	fe 4f       	sbci	r31, 0xFE	; 254
    2844:	80 83       	st	Z, r24
    2846:	fe 01       	movw	r30, r28
    2848:	e7 50       	subi	r30, 0x07	; 7
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	a8 ec       	ldi	r26, 0xC8	; 200
    2852:	b2 e4       	ldi	r27, 0x42	; 66
    2854:	80 83       	st	Z, r24
    2856:	91 83       	std	Z+1, r25	; 0x01
    2858:	a2 83       	std	Z+2, r26	; 0x02
    285a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285c:	8e 01       	movw	r16, r28
    285e:	0b 50       	subi	r16, 0x0B	; 11
    2860:	1f 4f       	sbci	r17, 0xFF	; 255
    2862:	fe 01       	movw	r30, r28
    2864:	e7 50       	subi	r30, 0x07	; 7
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	60 81       	ld	r22, Z
    286a:	71 81       	ldd	r23, Z+1	; 0x01
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	4a e7       	ldi	r20, 0x7A	; 122
    2876:	55 e4       	ldi	r21, 0x45	; 69
    2878:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	f8 01       	movw	r30, r16
    2882:	80 83       	st	Z, r24
    2884:	91 83       	std	Z+1, r25	; 0x01
    2886:	a2 83       	std	Z+2, r26	; 0x02
    2888:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    288a:	fe 01       	movw	r30, r28
    288c:	eb 50       	subi	r30, 0x0B	; 11
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	60 81       	ld	r22, Z
    2892:	71 81       	ldd	r23, Z+1	; 0x01
    2894:	82 81       	ldd	r24, Z+2	; 0x02
    2896:	93 81       	ldd	r25, Z+3	; 0x03
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e8       	ldi	r20, 0x80	; 128
    289e:	5f e3       	ldi	r21, 0x3F	; 63
    28a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28a4:	88 23       	and	r24, r24
    28a6:	44 f4       	brge	.+16     	; 0x28b8 <main+0x5b4>
		__ticks = 1;
    28a8:	fe 01       	movw	r30, r28
    28aa:	ed 50       	subi	r30, 0x0D	; 13
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	91 83       	std	Z+1, r25	; 0x01
    28b4:	80 83       	st	Z, r24
    28b6:	64 c0       	rjmp	.+200    	; 0x2980 <main+0x67c>
	else if (__tmp > 65535)
    28b8:	fe 01       	movw	r30, r28
    28ba:	eb 50       	subi	r30, 0x0B	; 11
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	60 81       	ld	r22, Z
    28c0:	71 81       	ldd	r23, Z+1	; 0x01
    28c2:	82 81       	ldd	r24, Z+2	; 0x02
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	3f ef       	ldi	r19, 0xFF	; 255
    28ca:	4f e7       	ldi	r20, 0x7F	; 127
    28cc:	57 e4       	ldi	r21, 0x47	; 71
    28ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28d2:	18 16       	cp	r1, r24
    28d4:	0c f0       	brlt	.+2      	; 0x28d8 <main+0x5d4>
    28d6:	43 c0       	rjmp	.+134    	; 0x295e <main+0x65a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d8:	fe 01       	movw	r30, r28
    28da:	e7 50       	subi	r30, 0x07	; 7
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	60 81       	ld	r22, Z
    28e0:	71 81       	ldd	r23, Z+1	; 0x01
    28e2:	82 81       	ldd	r24, Z+2	; 0x02
    28e4:	93 81       	ldd	r25, Z+3	; 0x03
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	40 e2       	ldi	r20, 0x20	; 32
    28ec:	51 e4       	ldi	r21, 0x41	; 65
    28ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	8e 01       	movw	r16, r28
    28f8:	0d 50       	subi	r16, 0x0D	; 13
    28fa:	1f 4f       	sbci	r17, 0xFF	; 255
    28fc:	bc 01       	movw	r22, r24
    28fe:	cd 01       	movw	r24, r26
    2900:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	f8 01       	movw	r30, r16
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	80 83       	st	Z, r24
    290e:	1f c0       	rjmp	.+62     	; 0x294e <main+0x64a>
    2910:	fe 01       	movw	r30, r28
    2912:	ef 50       	subi	r30, 0x0F	; 15
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	80 e9       	ldi	r24, 0x90	; 144
    2918:	91 e0       	ldi	r25, 0x01	; 1
    291a:	91 83       	std	Z+1, r25	; 0x01
    291c:	80 83       	st	Z, r24
    291e:	fe 01       	movw	r30, r28
    2920:	ef 50       	subi	r30, 0x0F	; 15
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	80 81       	ld	r24, Z
    2926:	91 81       	ldd	r25, Z+1	; 0x01
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <main+0x624>
    292c:	fe 01       	movw	r30, r28
    292e:	ef 50       	subi	r30, 0x0F	; 15
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	91 83       	std	Z+1, r25	; 0x01
    2934:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2936:	de 01       	movw	r26, r28
    2938:	ad 50       	subi	r26, 0x0D	; 13
    293a:	bf 4f       	sbci	r27, 0xFF	; 255
    293c:	fe 01       	movw	r30, r28
    293e:	ed 50       	subi	r30, 0x0D	; 13
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	80 81       	ld	r24, Z
    2944:	91 81       	ldd	r25, Z+1	; 0x01
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	11 96       	adiw	r26, 0x01	; 1
    294a:	9c 93       	st	X, r25
    294c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294e:	fe 01       	movw	r30, r28
    2950:	ed 50       	subi	r30, 0x0D	; 13
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	80 81       	ld	r24, Z
    2956:	91 81       	ldd	r25, Z+1	; 0x01
    2958:	00 97       	sbiw	r24, 0x00	; 0
    295a:	d1 f6       	brne	.-76     	; 0x2910 <main+0x60c>
    295c:	27 c0       	rjmp	.+78     	; 0x29ac <main+0x6a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    295e:	8e 01       	movw	r16, r28
    2960:	0d 50       	subi	r16, 0x0D	; 13
    2962:	1f 4f       	sbci	r17, 0xFF	; 255
    2964:	fe 01       	movw	r30, r28
    2966:	eb 50       	subi	r30, 0x0B	; 11
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	60 81       	ld	r22, Z
    296c:	71 81       	ldd	r23, Z+1	; 0x01
    296e:	82 81       	ldd	r24, Z+2	; 0x02
    2970:	93 81       	ldd	r25, Z+3	; 0x03
    2972:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	f8 01       	movw	r30, r16
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	80 83       	st	Z, r24
    2980:	de 01       	movw	r26, r28
    2982:	a1 51       	subi	r26, 0x11	; 17
    2984:	bf 4f       	sbci	r27, 0xFF	; 255
    2986:	fe 01       	movw	r30, r28
    2988:	ed 50       	subi	r30, 0x0D	; 13
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	80 81       	ld	r24, Z
    298e:	91 81       	ldd	r25, Z+1	; 0x01
    2990:	8d 93       	st	X+, r24
    2992:	9c 93       	st	X, r25
    2994:	fe 01       	movw	r30, r28
    2996:	e1 51       	subi	r30, 0x11	; 17
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	80 81       	ld	r24, Z
    299c:	91 81       	ldd	r25, Z+1	; 0x01
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	f1 f7       	brne	.-4      	; 0x299e <main+0x69a>
    29a2:	fe 01       	movw	r30, r28
    29a4:	e1 51       	subi	r30, 0x11	; 17
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	80 83       	st	Z, r24
												        	_delay_ms(100);
												        	masterR=SPI_u8MasterTrancieve('*');
    29ac:	8a e2       	ldi	r24, 0x2A	; 42
    29ae:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    29b2:	fe 01       	movw	r30, r28
    29b4:	ec 5e       	subi	r30, 0xEC	; 236
    29b6:	fe 4f       	sbci	r31, 0xFE	; 254
    29b8:	80 83       	st	Z, r24
												        	FLAG=0;
    29ba:	fe 01       	movw	r30, r28
    29bc:	ee 5e       	subi	r30, 0xEE	; 238
    29be:	fe 4f       	sbci	r31, 0xFE	; 254
    29c0:	10 82       	st	Z, r1
    29c2:	92 c1       	rjmp	.+804    	; 0x2ce8 <main+0x9e4>
									           			   break;
													default://WRONG ENTERY
														LCD_SEND_COMMAND(0x01);
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
														LCD_VidSendStrig(" wrong choice");
    29ca:	82 e1       	ldi	r24, 0x12	; 18
    29cc:	91 e0       	ldi	r25, 0x01	; 1
    29ce:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    29d2:	82 e0       	ldi	r24, 0x02	; 2
    29d4:	60 e0       	ldi	r22, 0x00	; 0
    29d6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
														LCD_VidSendStrig("choose again");
    29da:	80 e2       	ldi	r24, 0x20	; 32
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    29e2:	fe 01       	movw	r30, r28
    29e4:	e5 51       	subi	r30, 0x15	; 21
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	aa ef       	ldi	r26, 0xFA	; 250
    29ee:	b3 e4       	ldi	r27, 0x43	; 67
    29f0:	80 83       	st	Z, r24
    29f2:	91 83       	std	Z+1, r25	; 0x01
    29f4:	a2 83       	std	Z+2, r26	; 0x02
    29f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f8:	8e 01       	movw	r16, r28
    29fa:	09 51       	subi	r16, 0x19	; 25
    29fc:	1f 4f       	sbci	r17, 0xFF	; 255
    29fe:	fe 01       	movw	r30, r28
    2a00:	e5 51       	subi	r30, 0x15	; 21
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	60 81       	ld	r22, Z
    2a06:	71 81       	ldd	r23, Z+1	; 0x01
    2a08:	82 81       	ldd	r24, Z+2	; 0x02
    2a0a:	93 81       	ldd	r25, Z+3	; 0x03
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	4a e7       	ldi	r20, 0x7A	; 122
    2a12:	55 e4       	ldi	r21, 0x45	; 69
    2a14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	f8 01       	movw	r30, r16
    2a1e:	80 83       	st	Z, r24
    2a20:	91 83       	std	Z+1, r25	; 0x01
    2a22:	a2 83       	std	Z+2, r26	; 0x02
    2a24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a26:	fe 01       	movw	r30, r28
    2a28:	e9 51       	subi	r30, 0x19	; 25
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	60 81       	ld	r22, Z
    2a2e:	71 81       	ldd	r23, Z+1	; 0x01
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	93 81       	ldd	r25, Z+3	; 0x03
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e8       	ldi	r20, 0x80	; 128
    2a3a:	5f e3       	ldi	r21, 0x3F	; 63
    2a3c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a40:	88 23       	and	r24, r24
    2a42:	44 f4       	brge	.+16     	; 0x2a54 <main+0x750>
		__ticks = 1;
    2a44:	fe 01       	movw	r30, r28
    2a46:	eb 51       	subi	r30, 0x1B	; 27
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24
    2a52:	64 c0       	rjmp	.+200    	; 0x2b1c <main+0x818>
	else if (__tmp > 65535)
    2a54:	fe 01       	movw	r30, r28
    2a56:	e9 51       	subi	r30, 0x19	; 25
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	60 81       	ld	r22, Z
    2a5c:	71 81       	ldd	r23, Z+1	; 0x01
    2a5e:	82 81       	ldd	r24, Z+2	; 0x02
    2a60:	93 81       	ldd	r25, Z+3	; 0x03
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	3f ef       	ldi	r19, 0xFF	; 255
    2a66:	4f e7       	ldi	r20, 0x7F	; 127
    2a68:	57 e4       	ldi	r21, 0x47	; 71
    2a6a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a6e:	18 16       	cp	r1, r24
    2a70:	0c f0       	brlt	.+2      	; 0x2a74 <main+0x770>
    2a72:	43 c0       	rjmp	.+134    	; 0x2afa <main+0x7f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a74:	fe 01       	movw	r30, r28
    2a76:	e5 51       	subi	r30, 0x15	; 21
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	60 81       	ld	r22, Z
    2a7c:	71 81       	ldd	r23, Z+1	; 0x01
    2a7e:	82 81       	ldd	r24, Z+2	; 0x02
    2a80:	93 81       	ldd	r25, Z+3	; 0x03
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e2       	ldi	r20, 0x20	; 32
    2a88:	51 e4       	ldi	r21, 0x41	; 65
    2a8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	8e 01       	movw	r16, r28
    2a94:	0b 51       	subi	r16, 0x1B	; 27
    2a96:	1f 4f       	sbci	r17, 0xFF	; 255
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	f8 01       	movw	r30, r16
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	80 83       	st	Z, r24
    2aaa:	1f c0       	rjmp	.+62     	; 0x2aea <main+0x7e6>
    2aac:	fe 01       	movw	r30, r28
    2aae:	ed 51       	subi	r30, 0x1D	; 29
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 e9       	ldi	r24, 0x90	; 144
    2ab4:	91 e0       	ldi	r25, 0x01	; 1
    2ab6:	91 83       	std	Z+1, r25	; 0x01
    2ab8:	80 83       	st	Z, r24
    2aba:	fe 01       	movw	r30, r28
    2abc:	ed 51       	subi	r30, 0x1D	; 29
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	80 81       	ld	r24, Z
    2ac2:	91 81       	ldd	r25, Z+1	; 0x01
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <main+0x7c0>
    2ac8:	fe 01       	movw	r30, r28
    2aca:	ed 51       	subi	r30, 0x1D	; 29
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad2:	de 01       	movw	r26, r28
    2ad4:	ab 51       	subi	r26, 0x1B	; 27
    2ad6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ad8:	fe 01       	movw	r30, r28
    2ada:	eb 51       	subi	r30, 0x1B	; 27
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	11 96       	adiw	r26, 0x01	; 1
    2ae6:	9c 93       	st	X, r25
    2ae8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aea:	fe 01       	movw	r30, r28
    2aec:	eb 51       	subi	r30, 0x1B	; 27
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	80 81       	ld	r24, Z
    2af2:	91 81       	ldd	r25, Z+1	; 0x01
    2af4:	00 97       	sbiw	r24, 0x00	; 0
    2af6:	d1 f6       	brne	.-76     	; 0x2aac <main+0x7a8>
    2af8:	27 c0       	rjmp	.+78     	; 0x2b48 <main+0x844>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afa:	8e 01       	movw	r16, r28
    2afc:	0b 51       	subi	r16, 0x1B	; 27
    2afe:	1f 4f       	sbci	r17, 0xFF	; 255
    2b00:	fe 01       	movw	r30, r28
    2b02:	e9 51       	subi	r30, 0x19	; 25
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	60 81       	ld	r22, Z
    2b08:	71 81       	ldd	r23, Z+1	; 0x01
    2b0a:	82 81       	ldd	r24, Z+2	; 0x02
    2b0c:	93 81       	ldd	r25, Z+3	; 0x03
    2b0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	f8 01       	movw	r30, r16
    2b18:	91 83       	std	Z+1, r25	; 0x01
    2b1a:	80 83       	st	Z, r24
    2b1c:	de 01       	movw	r26, r28
    2b1e:	af 51       	subi	r26, 0x1F	; 31
    2b20:	bf 4f       	sbci	r27, 0xFF	; 255
    2b22:	fe 01       	movw	r30, r28
    2b24:	eb 51       	subi	r30, 0x1B	; 27
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	80 81       	ld	r24, Z
    2b2a:	91 81       	ldd	r25, Z+1	; 0x01
    2b2c:	8d 93       	st	X+, r24
    2b2e:	9c 93       	st	X, r25
    2b30:	fe 01       	movw	r30, r28
    2b32:	ef 51       	subi	r30, 0x1F	; 31
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 81       	ld	r24, Z
    2b38:	91 81       	ldd	r25, Z+1	; 0x01
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <main+0x836>
    2b3e:	fe 01       	movw	r30, r28
    2b40:	ef 51       	subi	r30, 0x1F	; 31
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	91 83       	std	Z+1, r25	; 0x01
    2b46:	80 83       	st	Z, r24
														_delay_ms(500);
														LCD_SEND_COMMAND(0x01);
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
														masterR=SPI_u8MasterTrancieve('F');
    2b4e:	86 e4       	ldi	r24, 0x46	; 70
    2b50:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    2b54:	fe 01       	movw	r30, r28
    2b56:	ec 5e       	subi	r30, 0xEC	; 236
    2b58:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5a:	80 83       	st	Z, r24
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e3 52       	subi	r30, 0x23	; 35
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	a8 ec       	ldi	r26, 0xC8	; 200
    2b68:	b2 e4       	ldi	r27, 0x42	; 66
    2b6a:	80 83       	st	Z, r24
    2b6c:	91 83       	std	Z+1, r25	; 0x01
    2b6e:	a2 83       	std	Z+2, r26	; 0x02
    2b70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b72:	8e 01       	movw	r16, r28
    2b74:	07 52       	subi	r16, 0x27	; 39
    2b76:	1f 4f       	sbci	r17, 0xFF	; 255
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e3 52       	subi	r30, 0x23	; 35
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	60 81       	ld	r22, Z
    2b80:	71 81       	ldd	r23, Z+1	; 0x01
    2b82:	82 81       	ldd	r24, Z+2	; 0x02
    2b84:	93 81       	ldd	r25, Z+3	; 0x03
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	4a e7       	ldi	r20, 0x7A	; 122
    2b8c:	55 e4       	ldi	r21, 0x45	; 69
    2b8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	f8 01       	movw	r30, r16
    2b98:	80 83       	st	Z, r24
    2b9a:	91 83       	std	Z+1, r25	; 0x01
    2b9c:	a2 83       	std	Z+2, r26	; 0x02
    2b9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e7 52       	subi	r30, 0x27	; 39
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	60 81       	ld	r22, Z
    2ba8:	71 81       	ldd	r23, Z+1	; 0x01
    2baa:	82 81       	ldd	r24, Z+2	; 0x02
    2bac:	93 81       	ldd	r25, Z+3	; 0x03
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e8       	ldi	r20, 0x80	; 128
    2bb4:	5f e3       	ldi	r21, 0x3F	; 63
    2bb6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bba:	88 23       	and	r24, r24
    2bbc:	44 f4       	brge	.+16     	; 0x2bce <main+0x8ca>
		__ticks = 1;
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e9 52       	subi	r30, 0x29	; 41
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	80 83       	st	Z, r24
    2bcc:	64 c0       	rjmp	.+200    	; 0x2c96 <main+0x992>
	else if (__tmp > 65535)
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e7 52       	subi	r30, 0x27	; 39
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	60 81       	ld	r22, Z
    2bd6:	71 81       	ldd	r23, Z+1	; 0x01
    2bd8:	82 81       	ldd	r24, Z+2	; 0x02
    2bda:	93 81       	ldd	r25, Z+3	; 0x03
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	3f ef       	ldi	r19, 0xFF	; 255
    2be0:	4f e7       	ldi	r20, 0x7F	; 127
    2be2:	57 e4       	ldi	r21, 0x47	; 71
    2be4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2be8:	18 16       	cp	r1, r24
    2bea:	0c f0       	brlt	.+2      	; 0x2bee <main+0x8ea>
    2bec:	43 c0       	rjmp	.+134    	; 0x2c74 <main+0x970>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e3 52       	subi	r30, 0x23	; 35
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	60 81       	ld	r22, Z
    2bf6:	71 81       	ldd	r23, Z+1	; 0x01
    2bf8:	82 81       	ldd	r24, Z+2	; 0x02
    2bfa:	93 81       	ldd	r25, Z+3	; 0x03
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	40 e2       	ldi	r20, 0x20	; 32
    2c02:	51 e4       	ldi	r21, 0x41	; 65
    2c04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	8e 01       	movw	r16, r28
    2c0e:	09 52       	subi	r16, 0x29	; 41
    2c10:	1f 4f       	sbci	r17, 0xFF	; 255
    2c12:	bc 01       	movw	r22, r24
    2c14:	cd 01       	movw	r24, r26
    2c16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	f8 01       	movw	r30, r16
    2c20:	91 83       	std	Z+1, r25	; 0x01
    2c22:	80 83       	st	Z, r24
    2c24:	1f c0       	rjmp	.+62     	; 0x2c64 <main+0x960>
    2c26:	fe 01       	movw	r30, r28
    2c28:	eb 52       	subi	r30, 0x2B	; 43
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	80 e9       	ldi	r24, 0x90	; 144
    2c2e:	91 e0       	ldi	r25, 0x01	; 1
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	80 83       	st	Z, r24
    2c34:	fe 01       	movw	r30, r28
    2c36:	eb 52       	subi	r30, 0x2B	; 43
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	91 81       	ldd	r25, Z+1	; 0x01
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	f1 f7       	brne	.-4      	; 0x2c3e <main+0x93a>
    2c42:	fe 01       	movw	r30, r28
    2c44:	eb 52       	subi	r30, 0x2B	; 43
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	91 83       	std	Z+1, r25	; 0x01
    2c4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4c:	de 01       	movw	r26, r28
    2c4e:	a9 52       	subi	r26, 0x29	; 41
    2c50:	bf 4f       	sbci	r27, 0xFF	; 255
    2c52:	fe 01       	movw	r30, r28
    2c54:	e9 52       	subi	r30, 0x29	; 41
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	80 81       	ld	r24, Z
    2c5a:	91 81       	ldd	r25, Z+1	; 0x01
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	11 96       	adiw	r26, 0x01	; 1
    2c60:	9c 93       	st	X, r25
    2c62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c64:	fe 01       	movw	r30, r28
    2c66:	e9 52       	subi	r30, 0x29	; 41
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	80 81       	ld	r24, Z
    2c6c:	91 81       	ldd	r25, Z+1	; 0x01
    2c6e:	00 97       	sbiw	r24, 0x00	; 0
    2c70:	d1 f6       	brne	.-76     	; 0x2c26 <main+0x922>
    2c72:	27 c0       	rjmp	.+78     	; 0x2cc2 <main+0x9be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c74:	8e 01       	movw	r16, r28
    2c76:	09 52       	subi	r16, 0x29	; 41
    2c78:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	e7 52       	subi	r30, 0x27	; 39
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	60 81       	ld	r22, Z
    2c82:	71 81       	ldd	r23, Z+1	; 0x01
    2c84:	82 81       	ldd	r24, Z+2	; 0x02
    2c86:	93 81       	ldd	r25, Z+3	; 0x03
    2c88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	f8 01       	movw	r30, r16
    2c92:	91 83       	std	Z+1, r25	; 0x01
    2c94:	80 83       	st	Z, r24
    2c96:	de 01       	movw	r26, r28
    2c98:	ad 52       	subi	r26, 0x2D	; 45
    2c9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e9 52       	subi	r30, 0x29	; 41
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	80 81       	ld	r24, Z
    2ca4:	91 81       	ldd	r25, Z+1	; 0x01
    2ca6:	8d 93       	st	X+, r24
    2ca8:	9c 93       	st	X, r25
    2caa:	fe 01       	movw	r30, r28
    2cac:	ed 52       	subi	r30, 0x2D	; 45
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	80 81       	ld	r24, Z
    2cb2:	91 81       	ldd	r25, Z+1	; 0x01
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <main+0x9b0>
    2cb8:	fe 01       	movw	r30, r28
    2cba:	ed 52       	subi	r30, 0x2D	; 45
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	91 83       	std	Z+1, r25	; 0x01
    2cc0:	80 83       	st	Z, r24
											        	_delay_ms(100);
											        	masterR=SPI_u8MasterTrancieve('*');
    2cc2:	8a e2       	ldi	r24, 0x2A	; 42
    2cc4:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    2cc8:	fe 01       	movw	r30, r28
    2cca:	ec 5e       	subi	r30, 0xEC	; 236
    2ccc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cce:	80 83       	st	Z, r24
											            LCD_VidSendStrig(" Room1 S:OFF");
    2cd0:	87 ee       	ldi	r24, 0xE7	; 231
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
											            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2cd8:	82 e0       	ldi	r24, 0x02	; 2
    2cda:	60 e0       	ldi	r22, 0x00	; 0
    2cdc:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
											           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    2ce0:	84 ef       	ldi	r24, 0xF4	; 244
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
														break;



									           		}
									           		if(FLAG==0)
    2ce8:	fe 01       	movw	r30, r28
    2cea:	ee 5e       	subi	r30, 0xEE	; 238
    2cec:	fe 4f       	sbci	r31, 0xFE	; 254
    2cee:	80 81       	ld	r24, Z
    2cf0:	88 23       	and	r24, r24
    2cf2:	09 f0       	breq	.+2      	; 0x2cf6 <main+0x9f2>
    2cf4:	24 cd       	rjmp	.-1464   	; 0x273e <main+0x43a>
									           		{
									           			//FLAG TO RETURN TO PRIVIOUSE PAGE AND CHOOSE ANOTHER OPTION
									           			FLAG=1;
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	ee 5e       	subi	r30, 0xEE	; 238
    2cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	80 83       	st	Z, r24
    2d00:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <main+0x20de>
									           	}

								           	}
								           	break;
									case 2 ://IF USER CHOOSE ROOM2
										    LCD_SEND_COMMAND(0x01);
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
								            LCD_VidSendStrig(" Room2 S:OFF");
    2d0a:	8d e2       	ldi	r24, 0x2D	; 45
    2d0c:	91 e0       	ldi	r25, 0x01	; 1
    2d0e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2d12:	82 e0       	ldi	r24, 0x02	; 2
    2d14:	60 e0       	ldi	r22, 0x00	; 0
    2d16:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
								           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    2d1a:	84 ef       	ldi	r24, 0xF4	; 244
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								           	while(1)
								           	{
									           	read3=0xFF;
    2d22:	fe 01       	movw	r30, r28
    2d24:	e5 5f       	subi	r30, 0xF5	; 245
    2d26:	fe 4f       	sbci	r31, 0xFE	; 254
    2d28:	8f ef       	ldi	r24, 0xFF	; 255
    2d2a:	80 83       	st	Z, r24
    2d2c:	06 c0       	rjmp	.+12     	; 0x2d3a <main+0xa36>
												while(read3==0xFF)
												{
													read3= KPD_u8GetPressedKey();
    2d2e:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    2d32:	fe 01       	movw	r30, r28
    2d34:	e5 5f       	subi	r30, 0xF5	; 245
    2d36:	fe 4f       	sbci	r31, 0xFE	; 254
    2d38:	80 83       	st	Z, r24
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
								           	LCD_VidSendStrig("1:on 2:off 3:RET ");
								           	while(1)
								           	{
									           	read3=0xFF;
												while(read3==0xFF)
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e5 5f       	subi	r30, 0xF5	; 245
    2d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d40:	80 81       	ld	r24, Z
    2d42:	8f 3f       	cpi	r24, 0xFF	; 255
    2d44:	a1 f3       	breq	.-24     	; 0x2d2e <main+0xa2a>
												{
													read3= KPD_u8GetPressedKey();
												}
									           	if(read3!=0xFF)
    2d46:	fe 01       	movw	r30, r28
    2d48:	e5 5f       	subi	r30, 0xF5	; 245
    2d4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d4c:	80 81       	ld	r24, Z
    2d4e:	8f 3f       	cpi	r24, 0xFF	; 255
    2d50:	41 f3       	breq	.-48     	; 0x2d22 <main+0xa1e>
									           	{
									           		switch(read3)
    2d52:	fe 01       	movw	r30, r28
    2d54:	e5 5f       	subi	r30, 0xF5	; 245
    2d56:	fe 4f       	sbci	r31, 0xFE	; 254
    2d58:	80 81       	ld	r24, Z
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	c7 5d       	subi	r28, 0xD7	; 215
    2d60:	de 4f       	sbci	r29, 0xFE	; 254
    2d62:	39 83       	std	Y+1, r19	; 0x01
    2d64:	28 83       	st	Y, r18
    2d66:	c9 52       	subi	r28, 0x29	; 41
    2d68:	d1 40       	sbci	r29, 0x01	; 1
    2d6a:	c7 5d       	subi	r28, 0xD7	; 215
    2d6c:	de 4f       	sbci	r29, 0xFE	; 254
    2d6e:	88 81       	ld	r24, Y
    2d70:	99 81       	ldd	r25, Y+1	; 0x01
    2d72:	c9 52       	subi	r28, 0x29	; 41
    2d74:	d1 40       	sbci	r29, 0x01	; 1
    2d76:	82 30       	cpi	r24, 0x02	; 2
    2d78:	91 05       	cpc	r25, r1
    2d7a:	51 f1       	breq	.+84     	; 0x2dd0 <main+0xacc>
    2d7c:	c7 5d       	subi	r28, 0xD7	; 215
    2d7e:	de 4f       	sbci	r29, 0xFE	; 254
    2d80:	e8 81       	ld	r30, Y
    2d82:	f9 81       	ldd	r31, Y+1	; 0x01
    2d84:	c9 52       	subi	r28, 0x29	; 41
    2d86:	d1 40       	sbci	r29, 0x01	; 1
    2d88:	e3 30       	cpi	r30, 0x03	; 3
    2d8a:	f1 05       	cpc	r31, r1
    2d8c:	c1 f1       	breq	.+112    	; 0x2dfe <main+0xafa>
    2d8e:	c7 5d       	subi	r28, 0xD7	; 215
    2d90:	de 4f       	sbci	r29, 0xFE	; 254
    2d92:	28 81       	ld	r18, Y
    2d94:	39 81       	ldd	r19, Y+1	; 0x01
    2d96:	c9 52       	subi	r28, 0x29	; 41
    2d98:	d1 40       	sbci	r29, 0x01	; 1
    2d9a:	21 30       	cpi	r18, 0x01	; 1
    2d9c:	31 05       	cpc	r19, r1
    2d9e:	09 f0       	breq	.+2      	; 0x2da2 <main+0xa9e>
    2da0:	03 c1       	rjmp	.+518    	; 0x2fa8 <main+0xca4>
									           		{
									           		case 1: //IF USER CHOOSE ON
									           			    LCD_SEND_COMMAND(0x01);
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							           			            masterR=SPI_u8MasterTrancieve('2'); //room2 will turn on
    2da8:	82 e3       	ldi	r24, 0x32	; 50
    2daa:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    2dae:	fe 01       	movw	r30, r28
    2db0:	ec 5e       	subi	r30, 0xEC	; 236
    2db2:	fe 4f       	sbci	r31, 0xFE	; 254
    2db4:	80 83       	st	Z, r24
									           			    LCD_VidSendStrig(" Room2 S:ON");
    2db6:	8a e3       	ldi	r24, 0x3A	; 58
    2db8:	91 e0       	ldi	r25, 0x01	; 1
    2dba:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2dbe:	82 e0       	ldi	r24, 0x02	; 2
    2dc0:	60 e0       	ldi	r22, 0x00	; 0
    2dc2:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    2dc6:	84 ef       	ldi	r24, 0xF4	; 244
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    2dce:	7e c2       	rjmp	.+1276   	; 0x32cc <main+0xfc8>
									           	            //_delay_ms(400);
									           			   break;
									           		case 2://IF HE CHOOSE OFF
									           			    LCD_SEND_COMMAND(0x01);
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							           			            masterR=SPI_u8MasterTrancieve('3'); //room2 will turn off
    2dd6:	83 e3       	ldi	r24, 0x33	; 51
    2dd8:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    2ddc:	fe 01       	movw	r30, r28
    2dde:	ec 5e       	subi	r30, 0xEC	; 236
    2de0:	fe 4f       	sbci	r31, 0xFE	; 254
    2de2:	80 83       	st	Z, r24
									           			    LCD_VidSendStrig(" Room2 S:OFF");
    2de4:	8d e2       	ldi	r24, 0x2D	; 45
    2de6:	91 e0       	ldi	r25, 0x01	; 1
    2de8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2dec:	82 e0       	ldi	r24, 0x02	; 2
    2dee:	60 e0       	ldi	r22, 0x00	; 0
    2df0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    2df4:	84 ef       	ldi	r24, 0xF4	; 244
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    2dfc:	67 c2       	rjmp	.+1230   	; 0x32cc <main+0xfc8>
									           	            //_delay_ms(400);
									           			   break;
									           		case 3: //IF HE CHOOSE TO RETURN TO THE PRIVIOSE PAGE
									           			    LCD_SEND_COMMAND(0x01);
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												            LCD_VidSendStrig(" 1:Room1 2:Room2");
    2e04:	85 ec       	ldi	r24, 0xC5	; 197
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2e0c:	82 e0       	ldi	r24, 0x02	; 2
    2e0e:	60 e0       	ldi	r22, 0x00	; 0
    2e10:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												            LCD_VidSendStrig("3:Room3 4:+ 0RET");
    2e14:	86 ed       	ldi	r24, 0xD6	; 214
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												        	masterR=SPI_u8MasterTrancieve('3');
    2e1c:	83 e3       	ldi	r24, 0x33	; 51
    2e1e:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    2e22:	fe 01       	movw	r30, r28
    2e24:	ec 5e       	subi	r30, 0xEC	; 236
    2e26:	fe 4f       	sbci	r31, 0xFE	; 254
    2e28:	80 83       	st	Z, r24
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	e1 53       	subi	r30, 0x31	; 49
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	a8 ec       	ldi	r26, 0xC8	; 200
    2e36:	b2 e4       	ldi	r27, 0x42	; 66
    2e38:	80 83       	st	Z, r24
    2e3a:	91 83       	std	Z+1, r25	; 0x01
    2e3c:	a2 83       	std	Z+2, r26	; 0x02
    2e3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e40:	8e 01       	movw	r16, r28
    2e42:	05 53       	subi	r16, 0x35	; 53
    2e44:	1f 4f       	sbci	r17, 0xFF	; 255
    2e46:	fe 01       	movw	r30, r28
    2e48:	e1 53       	subi	r30, 0x31	; 49
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	60 81       	ld	r22, Z
    2e4e:	71 81       	ldd	r23, Z+1	; 0x01
    2e50:	82 81       	ldd	r24, Z+2	; 0x02
    2e52:	93 81       	ldd	r25, Z+3	; 0x03
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	4a e7       	ldi	r20, 0x7A	; 122
    2e5a:	55 e4       	ldi	r21, 0x45	; 69
    2e5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	f8 01       	movw	r30, r16
    2e66:	80 83       	st	Z, r24
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	a2 83       	std	Z+2, r26	; 0x02
    2e6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e6e:	fe 01       	movw	r30, r28
    2e70:	e5 53       	subi	r30, 0x35	; 53
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	60 81       	ld	r22, Z
    2e76:	71 81       	ldd	r23, Z+1	; 0x01
    2e78:	82 81       	ldd	r24, Z+2	; 0x02
    2e7a:	93 81       	ldd	r25, Z+3	; 0x03
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	40 e8       	ldi	r20, 0x80	; 128
    2e82:	5f e3       	ldi	r21, 0x3F	; 63
    2e84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e88:	88 23       	and	r24, r24
    2e8a:	44 f4       	brge	.+16     	; 0x2e9c <main+0xb98>
		__ticks = 1;
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e7 53       	subi	r30, 0x37	; 55
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	91 83       	std	Z+1, r25	; 0x01
    2e98:	80 83       	st	Z, r24
    2e9a:	64 c0       	rjmp	.+200    	; 0x2f64 <main+0xc60>
	else if (__tmp > 65535)
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e5 53       	subi	r30, 0x35	; 53
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	60 81       	ld	r22, Z
    2ea4:	71 81       	ldd	r23, Z+1	; 0x01
    2ea6:	82 81       	ldd	r24, Z+2	; 0x02
    2ea8:	93 81       	ldd	r25, Z+3	; 0x03
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	3f ef       	ldi	r19, 0xFF	; 255
    2eae:	4f e7       	ldi	r20, 0x7F	; 127
    2eb0:	57 e4       	ldi	r21, 0x47	; 71
    2eb2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2eb6:	18 16       	cp	r1, r24
    2eb8:	0c f0       	brlt	.+2      	; 0x2ebc <main+0xbb8>
    2eba:	43 c0       	rjmp	.+134    	; 0x2f42 <main+0xc3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e1 53       	subi	r30, 0x31	; 49
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	60 81       	ld	r22, Z
    2ec4:	71 81       	ldd	r23, Z+1	; 0x01
    2ec6:	82 81       	ldd	r24, Z+2	; 0x02
    2ec8:	93 81       	ldd	r25, Z+3	; 0x03
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e2       	ldi	r20, 0x20	; 32
    2ed0:	51 e4       	ldi	r21, 0x41	; 65
    2ed2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	8e 01       	movw	r16, r28
    2edc:	07 53       	subi	r16, 0x37	; 55
    2ede:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee0:	bc 01       	movw	r22, r24
    2ee2:	cd 01       	movw	r24, r26
    2ee4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	f8 01       	movw	r30, r16
    2eee:	91 83       	std	Z+1, r25	; 0x01
    2ef0:	80 83       	st	Z, r24
    2ef2:	1f c0       	rjmp	.+62     	; 0x2f32 <main+0xc2e>
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	e9 53       	subi	r30, 0x39	; 57
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	80 e9       	ldi	r24, 0x90	; 144
    2efc:	91 e0       	ldi	r25, 0x01	; 1
    2efe:	91 83       	std	Z+1, r25	; 0x01
    2f00:	80 83       	st	Z, r24
    2f02:	fe 01       	movw	r30, r28
    2f04:	e9 53       	subi	r30, 0x39	; 57
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	80 81       	ld	r24, Z
    2f0a:	91 81       	ldd	r25, Z+1	; 0x01
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <main+0xc08>
    2f10:	fe 01       	movw	r30, r28
    2f12:	e9 53       	subi	r30, 0x39	; 57
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	91 83       	std	Z+1, r25	; 0x01
    2f18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1a:	de 01       	movw	r26, r28
    2f1c:	a7 53       	subi	r26, 0x37	; 55
    2f1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f20:	fe 01       	movw	r30, r28
    2f22:	e7 53       	subi	r30, 0x37	; 55
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	80 81       	ld	r24, Z
    2f28:	91 81       	ldd	r25, Z+1	; 0x01
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	11 96       	adiw	r26, 0x01	; 1
    2f2e:	9c 93       	st	X, r25
    2f30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f32:	fe 01       	movw	r30, r28
    2f34:	e7 53       	subi	r30, 0x37	; 55
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	80 81       	ld	r24, Z
    2f3a:	91 81       	ldd	r25, Z+1	; 0x01
    2f3c:	00 97       	sbiw	r24, 0x00	; 0
    2f3e:	d1 f6       	brne	.-76     	; 0x2ef4 <main+0xbf0>
    2f40:	27 c0       	rjmp	.+78     	; 0x2f90 <main+0xc8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f42:	8e 01       	movw	r16, r28
    2f44:	07 53       	subi	r16, 0x37	; 55
    2f46:	1f 4f       	sbci	r17, 0xFF	; 255
    2f48:	fe 01       	movw	r30, r28
    2f4a:	e5 53       	subi	r30, 0x35	; 53
    2f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4e:	60 81       	ld	r22, Z
    2f50:	71 81       	ldd	r23, Z+1	; 0x01
    2f52:	82 81       	ldd	r24, Z+2	; 0x02
    2f54:	93 81       	ldd	r25, Z+3	; 0x03
    2f56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	f8 01       	movw	r30, r16
    2f60:	91 83       	std	Z+1, r25	; 0x01
    2f62:	80 83       	st	Z, r24
    2f64:	de 01       	movw	r26, r28
    2f66:	ab 53       	subi	r26, 0x3B	; 59
    2f68:	bf 4f       	sbci	r27, 0xFF	; 255
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	e7 53       	subi	r30, 0x37	; 55
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	80 81       	ld	r24, Z
    2f72:	91 81       	ldd	r25, Z+1	; 0x01
    2f74:	8d 93       	st	X+, r24
    2f76:	9c 93       	st	X, r25
    2f78:	fe 01       	movw	r30, r28
    2f7a:	eb 53       	subi	r30, 0x3B	; 59
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	80 81       	ld	r24, Z
    2f80:	91 81       	ldd	r25, Z+1	; 0x01
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	f1 f7       	brne	.-4      	; 0x2f82 <main+0xc7e>
    2f86:	fe 01       	movw	r30, r28
    2f88:	eb 53       	subi	r30, 0x3B	; 59
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	91 83       	std	Z+1, r25	; 0x01
    2f8e:	80 83       	st	Z, r24
												        	_delay_ms(100);
												        	masterR=SPI_u8MasterTrancieve('*');
    2f90:	8a e2       	ldi	r24, 0x2A	; 42
    2f92:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    2f96:	fe 01       	movw	r30, r28
    2f98:	ec 5e       	subi	r30, 0xEC	; 236
    2f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f9c:	80 83       	st	Z, r24
												        	FLAG=0;
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	ee 5e       	subi	r30, 0xEE	; 238
    2fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa4:	10 82       	st	Z, r1
    2fa6:	92 c1       	rjmp	.+804    	; 0x32cc <main+0xfc8>
									           			   break;
													default: //WRONG ENTERY
														LCD_SEND_COMMAND(0x01);
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
														LCD_VidSendStrig(" wrong choice");
    2fae:	82 e1       	ldi	r24, 0x12	; 18
    2fb0:	91 e0       	ldi	r25, 0x01	; 1
    2fb2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2fb6:	82 e0       	ldi	r24, 0x02	; 2
    2fb8:	60 e0       	ldi	r22, 0x00	; 0
    2fba:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
														LCD_VidSendStrig("choose again");
    2fbe:	80 e2       	ldi	r24, 0x20	; 32
    2fc0:	91 e0       	ldi	r25, 0x01	; 1
    2fc2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	ef 53       	subi	r30, 0x3F	; 63
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	aa ef       	ldi	r26, 0xFA	; 250
    2fd2:	b3 e4       	ldi	r27, 0x43	; 67
    2fd4:	80 83       	st	Z, r24
    2fd6:	91 83       	std	Z+1, r25	; 0x01
    2fd8:	a2 83       	std	Z+2, r26	; 0x02
    2fda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fdc:	8e 01       	movw	r16, r28
    2fde:	03 54       	subi	r16, 0x43	; 67
    2fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	ef 53       	subi	r30, 0x3F	; 63
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	60 81       	ld	r22, Z
    2fea:	71 81       	ldd	r23, Z+1	; 0x01
    2fec:	82 81       	ldd	r24, Z+2	; 0x02
    2fee:	93 81       	ldd	r25, Z+3	; 0x03
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	4a e7       	ldi	r20, 0x7A	; 122
    2ff6:	55 e4       	ldi	r21, 0x45	; 69
    2ff8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	f8 01       	movw	r30, r16
    3002:	80 83       	st	Z, r24
    3004:	91 83       	std	Z+1, r25	; 0x01
    3006:	a2 83       	std	Z+2, r26	; 0x02
    3008:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    300a:	fe 01       	movw	r30, r28
    300c:	e3 54       	subi	r30, 0x43	; 67
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	60 81       	ld	r22, Z
    3012:	71 81       	ldd	r23, Z+1	; 0x01
    3014:	82 81       	ldd	r24, Z+2	; 0x02
    3016:	93 81       	ldd	r25, Z+3	; 0x03
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	40 e8       	ldi	r20, 0x80	; 128
    301e:	5f e3       	ldi	r21, 0x3F	; 63
    3020:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3024:	88 23       	and	r24, r24
    3026:	44 f4       	brge	.+16     	; 0x3038 <main+0xd34>
		__ticks = 1;
    3028:	fe 01       	movw	r30, r28
    302a:	e5 54       	subi	r30, 0x45	; 69
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	91 83       	std	Z+1, r25	; 0x01
    3034:	80 83       	st	Z, r24
    3036:	64 c0       	rjmp	.+200    	; 0x3100 <main+0xdfc>
	else if (__tmp > 65535)
    3038:	fe 01       	movw	r30, r28
    303a:	e3 54       	subi	r30, 0x43	; 67
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	60 81       	ld	r22, Z
    3040:	71 81       	ldd	r23, Z+1	; 0x01
    3042:	82 81       	ldd	r24, Z+2	; 0x02
    3044:	93 81       	ldd	r25, Z+3	; 0x03
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	3f ef       	ldi	r19, 0xFF	; 255
    304a:	4f e7       	ldi	r20, 0x7F	; 127
    304c:	57 e4       	ldi	r21, 0x47	; 71
    304e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3052:	18 16       	cp	r1, r24
    3054:	0c f0       	brlt	.+2      	; 0x3058 <main+0xd54>
    3056:	43 c0       	rjmp	.+134    	; 0x30de <main+0xdda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3058:	fe 01       	movw	r30, r28
    305a:	ef 53       	subi	r30, 0x3F	; 63
    305c:	ff 4f       	sbci	r31, 0xFF	; 255
    305e:	60 81       	ld	r22, Z
    3060:	71 81       	ldd	r23, Z+1	; 0x01
    3062:	82 81       	ldd	r24, Z+2	; 0x02
    3064:	93 81       	ldd	r25, Z+3	; 0x03
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	40 e2       	ldi	r20, 0x20	; 32
    306c:	51 e4       	ldi	r21, 0x41	; 65
    306e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	8e 01       	movw	r16, r28
    3078:	05 54       	subi	r16, 0x45	; 69
    307a:	1f 4f       	sbci	r17, 0xFF	; 255
    307c:	bc 01       	movw	r22, r24
    307e:	cd 01       	movw	r24, r26
    3080:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	f8 01       	movw	r30, r16
    308a:	91 83       	std	Z+1, r25	; 0x01
    308c:	80 83       	st	Z, r24
    308e:	1f c0       	rjmp	.+62     	; 0x30ce <main+0xdca>
    3090:	fe 01       	movw	r30, r28
    3092:	e7 54       	subi	r30, 0x47	; 71
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	80 e9       	ldi	r24, 0x90	; 144
    3098:	91 e0       	ldi	r25, 0x01	; 1
    309a:	91 83       	std	Z+1, r25	; 0x01
    309c:	80 83       	st	Z, r24
    309e:	fe 01       	movw	r30, r28
    30a0:	e7 54       	subi	r30, 0x47	; 71
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	80 81       	ld	r24, Z
    30a6:	91 81       	ldd	r25, Z+1	; 0x01
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	f1 f7       	brne	.-4      	; 0x30a8 <main+0xda4>
    30ac:	fe 01       	movw	r30, r28
    30ae:	e7 54       	subi	r30, 0x47	; 71
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	91 83       	std	Z+1, r25	; 0x01
    30b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b6:	de 01       	movw	r26, r28
    30b8:	a5 54       	subi	r26, 0x45	; 69
    30ba:	bf 4f       	sbci	r27, 0xFF	; 255
    30bc:	fe 01       	movw	r30, r28
    30be:	e5 54       	subi	r30, 0x45	; 69
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	80 81       	ld	r24, Z
    30c4:	91 81       	ldd	r25, Z+1	; 0x01
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	11 96       	adiw	r26, 0x01	; 1
    30ca:	9c 93       	st	X, r25
    30cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ce:	fe 01       	movw	r30, r28
    30d0:	e5 54       	subi	r30, 0x45	; 69
    30d2:	ff 4f       	sbci	r31, 0xFF	; 255
    30d4:	80 81       	ld	r24, Z
    30d6:	91 81       	ldd	r25, Z+1	; 0x01
    30d8:	00 97       	sbiw	r24, 0x00	; 0
    30da:	d1 f6       	brne	.-76     	; 0x3090 <main+0xd8c>
    30dc:	27 c0       	rjmp	.+78     	; 0x312c <main+0xe28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30de:	8e 01       	movw	r16, r28
    30e0:	05 54       	subi	r16, 0x45	; 69
    30e2:	1f 4f       	sbci	r17, 0xFF	; 255
    30e4:	fe 01       	movw	r30, r28
    30e6:	e3 54       	subi	r30, 0x43	; 67
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	60 81       	ld	r22, Z
    30ec:	71 81       	ldd	r23, Z+1	; 0x01
    30ee:	82 81       	ldd	r24, Z+2	; 0x02
    30f0:	93 81       	ldd	r25, Z+3	; 0x03
    30f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	f8 01       	movw	r30, r16
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	80 83       	st	Z, r24
    3100:	de 01       	movw	r26, r28
    3102:	a9 54       	subi	r26, 0x49	; 73
    3104:	bf 4f       	sbci	r27, 0xFF	; 255
    3106:	fe 01       	movw	r30, r28
    3108:	e5 54       	subi	r30, 0x45	; 69
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	80 81       	ld	r24, Z
    310e:	91 81       	ldd	r25, Z+1	; 0x01
    3110:	8d 93       	st	X+, r24
    3112:	9c 93       	st	X, r25
    3114:	fe 01       	movw	r30, r28
    3116:	e9 54       	subi	r30, 0x49	; 73
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	80 81       	ld	r24, Z
    311c:	91 81       	ldd	r25, Z+1	; 0x01
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	f1 f7       	brne	.-4      	; 0x311e <main+0xe1a>
    3122:	fe 01       	movw	r30, r28
    3124:	e9 54       	subi	r30, 0x49	; 73
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	91 83       	std	Z+1, r25	; 0x01
    312a:	80 83       	st	Z, r24
														_delay_ms(500);
														LCD_SEND_COMMAND(0x01);
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
														masterR=SPI_u8MasterTrancieve('3');
    3132:	83 e3       	ldi	r24, 0x33	; 51
    3134:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3138:	fe 01       	movw	r30, r28
    313a:	ec 5e       	subi	r30, 0xEC	; 236
    313c:	fe 4f       	sbci	r31, 0xFE	; 254
    313e:	80 83       	st	Z, r24
    3140:	fe 01       	movw	r30, r28
    3142:	ed 54       	subi	r30, 0x4D	; 77
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	a8 ec       	ldi	r26, 0xC8	; 200
    314c:	b2 e4       	ldi	r27, 0x42	; 66
    314e:	80 83       	st	Z, r24
    3150:	91 83       	std	Z+1, r25	; 0x01
    3152:	a2 83       	std	Z+2, r26	; 0x02
    3154:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3156:	8e 01       	movw	r16, r28
    3158:	01 55       	subi	r16, 0x51	; 81
    315a:	1f 4f       	sbci	r17, 0xFF	; 255
    315c:	fe 01       	movw	r30, r28
    315e:	ed 54       	subi	r30, 0x4D	; 77
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	60 81       	ld	r22, Z
    3164:	71 81       	ldd	r23, Z+1	; 0x01
    3166:	82 81       	ldd	r24, Z+2	; 0x02
    3168:	93 81       	ldd	r25, Z+3	; 0x03
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	4a e7       	ldi	r20, 0x7A	; 122
    3170:	55 e4       	ldi	r21, 0x45	; 69
    3172:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	f8 01       	movw	r30, r16
    317c:	80 83       	st	Z, r24
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	a2 83       	std	Z+2, r26	; 0x02
    3182:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3184:	fe 01       	movw	r30, r28
    3186:	e1 55       	subi	r30, 0x51	; 81
    3188:	ff 4f       	sbci	r31, 0xFF	; 255
    318a:	60 81       	ld	r22, Z
    318c:	71 81       	ldd	r23, Z+1	; 0x01
    318e:	82 81       	ldd	r24, Z+2	; 0x02
    3190:	93 81       	ldd	r25, Z+3	; 0x03
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	40 e8       	ldi	r20, 0x80	; 128
    3198:	5f e3       	ldi	r21, 0x3F	; 63
    319a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    319e:	88 23       	and	r24, r24
    31a0:	44 f4       	brge	.+16     	; 0x31b2 <main+0xeae>
		__ticks = 1;
    31a2:	fe 01       	movw	r30, r28
    31a4:	e3 55       	subi	r30, 0x53	; 83
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	91 83       	std	Z+1, r25	; 0x01
    31ae:	80 83       	st	Z, r24
    31b0:	64 c0       	rjmp	.+200    	; 0x327a <main+0xf76>
	else if (__tmp > 65535)
    31b2:	fe 01       	movw	r30, r28
    31b4:	e1 55       	subi	r30, 0x51	; 81
    31b6:	ff 4f       	sbci	r31, 0xFF	; 255
    31b8:	60 81       	ld	r22, Z
    31ba:	71 81       	ldd	r23, Z+1	; 0x01
    31bc:	82 81       	ldd	r24, Z+2	; 0x02
    31be:	93 81       	ldd	r25, Z+3	; 0x03
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	3f ef       	ldi	r19, 0xFF	; 255
    31c4:	4f e7       	ldi	r20, 0x7F	; 127
    31c6:	57 e4       	ldi	r21, 0x47	; 71
    31c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    31cc:	18 16       	cp	r1, r24
    31ce:	0c f0       	brlt	.+2      	; 0x31d2 <main+0xece>
    31d0:	43 c0       	rjmp	.+134    	; 0x3258 <main+0xf54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d2:	fe 01       	movw	r30, r28
    31d4:	ed 54       	subi	r30, 0x4D	; 77
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	60 81       	ld	r22, Z
    31da:	71 81       	ldd	r23, Z+1	; 0x01
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e2       	ldi	r20, 0x20	; 32
    31e6:	51 e4       	ldi	r21, 0x41	; 65
    31e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	8e 01       	movw	r16, r28
    31f2:	03 55       	subi	r16, 0x53	; 83
    31f4:	1f 4f       	sbci	r17, 0xFF	; 255
    31f6:	bc 01       	movw	r22, r24
    31f8:	cd 01       	movw	r24, r26
    31fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	f8 01       	movw	r30, r16
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	80 83       	st	Z, r24
    3208:	1f c0       	rjmp	.+62     	; 0x3248 <main+0xf44>
    320a:	fe 01       	movw	r30, r28
    320c:	e5 55       	subi	r30, 0x55	; 85
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	80 e9       	ldi	r24, 0x90	; 144
    3212:	91 e0       	ldi	r25, 0x01	; 1
    3214:	91 83       	std	Z+1, r25	; 0x01
    3216:	80 83       	st	Z, r24
    3218:	fe 01       	movw	r30, r28
    321a:	e5 55       	subi	r30, 0x55	; 85
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	80 81       	ld	r24, Z
    3220:	91 81       	ldd	r25, Z+1	; 0x01
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	f1 f7       	brne	.-4      	; 0x3222 <main+0xf1e>
    3226:	fe 01       	movw	r30, r28
    3228:	e5 55       	subi	r30, 0x55	; 85
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	91 83       	std	Z+1, r25	; 0x01
    322e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3230:	de 01       	movw	r26, r28
    3232:	a3 55       	subi	r26, 0x53	; 83
    3234:	bf 4f       	sbci	r27, 0xFF	; 255
    3236:	fe 01       	movw	r30, r28
    3238:	e3 55       	subi	r30, 0x53	; 83
    323a:	ff 4f       	sbci	r31, 0xFF	; 255
    323c:	80 81       	ld	r24, Z
    323e:	91 81       	ldd	r25, Z+1	; 0x01
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	11 96       	adiw	r26, 0x01	; 1
    3244:	9c 93       	st	X, r25
    3246:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3248:	fe 01       	movw	r30, r28
    324a:	e3 55       	subi	r30, 0x53	; 83
    324c:	ff 4f       	sbci	r31, 0xFF	; 255
    324e:	80 81       	ld	r24, Z
    3250:	91 81       	ldd	r25, Z+1	; 0x01
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	d1 f6       	brne	.-76     	; 0x320a <main+0xf06>
    3256:	27 c0       	rjmp	.+78     	; 0x32a6 <main+0xfa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3258:	8e 01       	movw	r16, r28
    325a:	03 55       	subi	r16, 0x53	; 83
    325c:	1f 4f       	sbci	r17, 0xFF	; 255
    325e:	fe 01       	movw	r30, r28
    3260:	e1 55       	subi	r30, 0x51	; 81
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	60 81       	ld	r22, Z
    3266:	71 81       	ldd	r23, Z+1	; 0x01
    3268:	82 81       	ldd	r24, Z+2	; 0x02
    326a:	93 81       	ldd	r25, Z+3	; 0x03
    326c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	f8 01       	movw	r30, r16
    3276:	91 83       	std	Z+1, r25	; 0x01
    3278:	80 83       	st	Z, r24
    327a:	de 01       	movw	r26, r28
    327c:	a7 55       	subi	r26, 0x57	; 87
    327e:	bf 4f       	sbci	r27, 0xFF	; 255
    3280:	fe 01       	movw	r30, r28
    3282:	e3 55       	subi	r30, 0x53	; 83
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	80 81       	ld	r24, Z
    3288:	91 81       	ldd	r25, Z+1	; 0x01
    328a:	8d 93       	st	X+, r24
    328c:	9c 93       	st	X, r25
    328e:	fe 01       	movw	r30, r28
    3290:	e7 55       	subi	r30, 0x57	; 87
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 81       	ld	r24, Z
    3296:	91 81       	ldd	r25, Z+1	; 0x01
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <main+0xf94>
    329c:	fe 01       	movw	r30, r28
    329e:	e7 55       	subi	r30, 0x57	; 87
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	91 83       	std	Z+1, r25	; 0x01
    32a4:	80 83       	st	Z, r24
											        	_delay_ms(100);
											        	masterR=SPI_u8MasterTrancieve('*');
    32a6:	8a e2       	ldi	r24, 0x2A	; 42
    32a8:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    32ac:	fe 01       	movw	r30, r28
    32ae:	ec 5e       	subi	r30, 0xEC	; 236
    32b0:	fe 4f       	sbci	r31, 0xFE	; 254
    32b2:	80 83       	st	Z, r24
											            LCD_VidSendStrig(" Room2 S:OFF");
    32b4:	8d e2       	ldi	r24, 0x2D	; 45
    32b6:	91 e0       	ldi	r25, 0x01	; 1
    32b8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
											            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    32bc:	82 e0       	ldi	r24, 0x02	; 2
    32be:	60 e0       	ldi	r22, 0x00	; 0
    32c0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
											           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    32c4:	84 ef       	ldi	r24, 0xF4	; 244
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>




									           		}
									           		if(FLAG==0)
    32cc:	fe 01       	movw	r30, r28
    32ce:	ee 5e       	subi	r30, 0xEE	; 238
    32d0:	fe 4f       	sbci	r31, 0xFE	; 254
    32d2:	80 81       	ld	r24, Z
    32d4:	88 23       	and	r24, r24
    32d6:	09 f0       	breq	.+2      	; 0x32da <main+0xfd6>
    32d8:	24 cd       	rjmp	.-1464   	; 0x2d22 <main+0xa1e>
									           		{
									           			//FLAG TO RETURN
									           			FLAG=1;
    32da:	fe 01       	movw	r30, r28
    32dc:	ee 5e       	subi	r30, 0xEE	; 238
    32de:	fe 4f       	sbci	r31, 0xFE	; 254
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	80 83       	st	Z, r24
    32e4:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <main+0x20de>
									           	}

								           	}
								           	break;
									case 3 ://I USER CHOOSE ROOM3
										    LCD_SEND_COMMAND(0x01);
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
								            LCD_VidSendStrig(" Room3 S:OFF");
    32ee:	86 e4       	ldi	r24, 0x46	; 70
    32f0:	91 e0       	ldi	r25, 0x01	; 1
    32f2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    32f6:	82 e0       	ldi	r24, 0x02	; 2
    32f8:	60 e0       	ldi	r22, 0x00	; 0
    32fa:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
								           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    32fe:	84 ef       	ldi	r24, 0xF4	; 244
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								           	while(1)
								           	{
									           	read3=0xFF;
    3306:	fe 01       	movw	r30, r28
    3308:	e5 5f       	subi	r30, 0xF5	; 245
    330a:	fe 4f       	sbci	r31, 0xFE	; 254
    330c:	8f ef       	ldi	r24, 0xFF	; 255
    330e:	80 83       	st	Z, r24
    3310:	06 c0       	rjmp	.+12     	; 0x331e <main+0x101a>
												while(read3==0xFF)
												{
													read3= KPD_u8GetPressedKey();
    3312:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    3316:	fe 01       	movw	r30, r28
    3318:	e5 5f       	subi	r30, 0xF5	; 245
    331a:	fe 4f       	sbci	r31, 0xFE	; 254
    331c:	80 83       	st	Z, r24
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
								           	LCD_VidSendStrig("1:on 2:off 3:RET ");
								           	while(1)
								           	{
									           	read3=0xFF;
												while(read3==0xFF)
    331e:	fe 01       	movw	r30, r28
    3320:	e5 5f       	subi	r30, 0xF5	; 245
    3322:	fe 4f       	sbci	r31, 0xFE	; 254
    3324:	80 81       	ld	r24, Z
    3326:	8f 3f       	cpi	r24, 0xFF	; 255
    3328:	a1 f3       	breq	.-24     	; 0x3312 <main+0x100e>
												{
													read3= KPD_u8GetPressedKey();
												}
									           	if(read3!=0xFF)
    332a:	fe 01       	movw	r30, r28
    332c:	e5 5f       	subi	r30, 0xF5	; 245
    332e:	fe 4f       	sbci	r31, 0xFE	; 254
    3330:	80 81       	ld	r24, Z
    3332:	8f 3f       	cpi	r24, 0xFF	; 255
    3334:	41 f3       	breq	.-48     	; 0x3306 <main+0x1002>
									           	{
									           		switch(read3)
    3336:	fe 01       	movw	r30, r28
    3338:	e5 5f       	subi	r30, 0xF5	; 245
    333a:	fe 4f       	sbci	r31, 0xFE	; 254
    333c:	80 81       	ld	r24, Z
    333e:	28 2f       	mov	r18, r24
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	c9 5d       	subi	r28, 0xD9	; 217
    3344:	de 4f       	sbci	r29, 0xFE	; 254
    3346:	39 83       	std	Y+1, r19	; 0x01
    3348:	28 83       	st	Y, r18
    334a:	c7 52       	subi	r28, 0x27	; 39
    334c:	d1 40       	sbci	r29, 0x01	; 1
    334e:	c9 5d       	subi	r28, 0xD9	; 217
    3350:	de 4f       	sbci	r29, 0xFE	; 254
    3352:	88 81       	ld	r24, Y
    3354:	99 81       	ldd	r25, Y+1	; 0x01
    3356:	c7 52       	subi	r28, 0x27	; 39
    3358:	d1 40       	sbci	r29, 0x01	; 1
    335a:	82 30       	cpi	r24, 0x02	; 2
    335c:	91 05       	cpc	r25, r1
    335e:	51 f1       	breq	.+84     	; 0x33b4 <main+0x10b0>
    3360:	c9 5d       	subi	r28, 0xD9	; 217
    3362:	de 4f       	sbci	r29, 0xFE	; 254
    3364:	e8 81       	ld	r30, Y
    3366:	f9 81       	ldd	r31, Y+1	; 0x01
    3368:	c7 52       	subi	r28, 0x27	; 39
    336a:	d1 40       	sbci	r29, 0x01	; 1
    336c:	e3 30       	cpi	r30, 0x03	; 3
    336e:	f1 05       	cpc	r31, r1
    3370:	c1 f1       	breq	.+112    	; 0x33e2 <main+0x10de>
    3372:	c9 5d       	subi	r28, 0xD9	; 217
    3374:	de 4f       	sbci	r29, 0xFE	; 254
    3376:	28 81       	ld	r18, Y
    3378:	39 81       	ldd	r19, Y+1	; 0x01
    337a:	c7 52       	subi	r28, 0x27	; 39
    337c:	d1 40       	sbci	r29, 0x01	; 1
    337e:	21 30       	cpi	r18, 0x01	; 1
    3380:	31 05       	cpc	r19, r1
    3382:	09 f0       	breq	.+2      	; 0x3386 <main+0x1082>
    3384:	50 c0       	rjmp	.+160    	; 0x3426 <main+0x1122>
									           		{
									           		case 1: //IF HE WANT TO TURN ROOM3 ON
									           			    LCD_SEND_COMMAND(0x01);
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							           			            masterR=SPI_u8MasterTrancieve('4'); //room3 will turn on
    338c:	84 e3       	ldi	r24, 0x34	; 52
    338e:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3392:	fe 01       	movw	r30, r28
    3394:	ec 5e       	subi	r30, 0xEC	; 236
    3396:	fe 4f       	sbci	r31, 0xFE	; 254
    3398:	80 83       	st	Z, r24
									           			    LCD_VidSendStrig(" Room3 S:ON");
    339a:	83 e5       	ldi	r24, 0x53	; 83
    339c:	91 e0       	ldi	r25, 0x01	; 1
    339e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    33a2:	82 e0       	ldi	r24, 0x02	; 2
    33a4:	60 e0       	ldi	r22, 0x00	; 0
    33a6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    33aa:	84 ef       	ldi	r24, 0xF4	; 244
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    33b2:	18 c1       	rjmp	.+560    	; 0x35e4 <main+0x12e0>
									           	            //_delay_ms(400);
									           			   break;
									           		case 2: //IF HE CHOOSE TO TURN ROOM3 OFF
									           			    LCD_SEND_COMMAND(0x01);
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							           			            masterR=SPI_u8MasterTrancieve('5'); //room3 will turn off
    33ba:	85 e3       	ldi	r24, 0x35	; 53
    33bc:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    33c0:	fe 01       	movw	r30, r28
    33c2:	ec 5e       	subi	r30, 0xEC	; 236
    33c4:	fe 4f       	sbci	r31, 0xFE	; 254
    33c6:	80 83       	st	Z, r24
									           			    LCD_VidSendStrig(" Room3 S:OFF");
    33c8:	86 e4       	ldi	r24, 0x46	; 70
    33ca:	91 e0       	ldi	r25, 0x01	; 1
    33cc:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    33d0:	82 e0       	ldi	r24, 0x02	; 2
    33d2:	60 e0       	ldi	r22, 0x00	; 0
    33d4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    33d8:	84 ef       	ldi	r24, 0xF4	; 244
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    33e0:	01 c1       	rjmp	.+514    	; 0x35e4 <main+0x12e0>
									           	           // _delay_ms(400);
									           			   break;
									           		case 3: //IF HE WANT TO RETURN TO PRIVIOUSE PAGE
									           			    LCD_SEND_COMMAND(0x01);
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												            LCD_VidSendStrig(" 1:Room1 2:Room2");
    33e8:	85 ec       	ldi	r24, 0xC5	; 197
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    33f0:	82 e0       	ldi	r24, 0x02	; 2
    33f2:	60 e0       	ldi	r22, 0x00	; 0
    33f4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												            LCD_VidSendStrig("3:Room3 4:+ 0RET");
    33f8:	86 ed       	ldi	r24, 0xD6	; 214
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												        	masterR=SPI_u8MasterTrancieve('5');
    3400:	85 e3       	ldi	r24, 0x35	; 53
    3402:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3406:	fe 01       	movw	r30, r28
    3408:	ec 5e       	subi	r30, 0xEC	; 236
    340a:	fe 4f       	sbci	r31, 0xFE	; 254
    340c:	80 83       	st	Z, r24
												        	masterR=SPI_u8MasterTrancieve('*');
    340e:	8a e2       	ldi	r24, 0x2A	; 42
    3410:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3414:	fe 01       	movw	r30, r28
    3416:	ec 5e       	subi	r30, 0xEC	; 236
    3418:	fe 4f       	sbci	r31, 0xFE	; 254
    341a:	80 83       	st	Z, r24
												        	FLAG=0;
    341c:	fe 01       	movw	r30, r28
    341e:	ee 5e       	subi	r30, 0xEE	; 238
    3420:	fe 4f       	sbci	r31, 0xFE	; 254
    3422:	10 82       	st	Z, r1
    3424:	df c0       	rjmp	.+446    	; 0x35e4 <main+0x12e0>
									           			   break;
													default: //WRONG ENTERY
														LCD_SEND_COMMAND(0x01);
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
														LCD_VidSendStrig(" wrong choice");
    342c:	82 e1       	ldi	r24, 0x12	; 18
    342e:	91 e0       	ldi	r25, 0x01	; 1
    3430:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3434:	82 e0       	ldi	r24, 0x02	; 2
    3436:	60 e0       	ldi	r22, 0x00	; 0
    3438:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
														LCD_VidSendStrig("choose again");
    343c:	80 e2       	ldi	r24, 0x20	; 32
    343e:	91 e0       	ldi	r25, 0x01	; 1
    3440:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    3444:	fe 01       	movw	r30, r28
    3446:	eb 55       	subi	r30, 0x5B	; 91
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	aa ef       	ldi	r26, 0xFA	; 250
    3450:	b3 e4       	ldi	r27, 0x43	; 67
    3452:	80 83       	st	Z, r24
    3454:	91 83       	std	Z+1, r25	; 0x01
    3456:	a2 83       	std	Z+2, r26	; 0x02
    3458:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    345a:	8e 01       	movw	r16, r28
    345c:	0f 55       	subi	r16, 0x5F	; 95
    345e:	1f 4f       	sbci	r17, 0xFF	; 255
    3460:	fe 01       	movw	r30, r28
    3462:	eb 55       	subi	r30, 0x5B	; 91
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	60 81       	ld	r22, Z
    3468:	71 81       	ldd	r23, Z+1	; 0x01
    346a:	82 81       	ldd	r24, Z+2	; 0x02
    346c:	93 81       	ldd	r25, Z+3	; 0x03
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	4a e7       	ldi	r20, 0x7A	; 122
    3474:	55 e4       	ldi	r21, 0x45	; 69
    3476:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	f8 01       	movw	r30, r16
    3480:	80 83       	st	Z, r24
    3482:	91 83       	std	Z+1, r25	; 0x01
    3484:	a2 83       	std	Z+2, r26	; 0x02
    3486:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3488:	fe 01       	movw	r30, r28
    348a:	ef 55       	subi	r30, 0x5F	; 95
    348c:	ff 4f       	sbci	r31, 0xFF	; 255
    348e:	60 81       	ld	r22, Z
    3490:	71 81       	ldd	r23, Z+1	; 0x01
    3492:	82 81       	ldd	r24, Z+2	; 0x02
    3494:	93 81       	ldd	r25, Z+3	; 0x03
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	40 e8       	ldi	r20, 0x80	; 128
    349c:	5f e3       	ldi	r21, 0x3F	; 63
    349e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    34a2:	88 23       	and	r24, r24
    34a4:	44 f4       	brge	.+16     	; 0x34b6 <main+0x11b2>
		__ticks = 1;
    34a6:	fe 01       	movw	r30, r28
    34a8:	e1 56       	subi	r30, 0x61	; 97
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	91 83       	std	Z+1, r25	; 0x01
    34b2:	80 83       	st	Z, r24
    34b4:	64 c0       	rjmp	.+200    	; 0x357e <main+0x127a>
	else if (__tmp > 65535)
    34b6:	fe 01       	movw	r30, r28
    34b8:	ef 55       	subi	r30, 0x5F	; 95
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	60 81       	ld	r22, Z
    34be:	71 81       	ldd	r23, Z+1	; 0x01
    34c0:	82 81       	ldd	r24, Z+2	; 0x02
    34c2:	93 81       	ldd	r25, Z+3	; 0x03
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	3f ef       	ldi	r19, 0xFF	; 255
    34c8:	4f e7       	ldi	r20, 0x7F	; 127
    34ca:	57 e4       	ldi	r21, 0x47	; 71
    34cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    34d0:	18 16       	cp	r1, r24
    34d2:	0c f0       	brlt	.+2      	; 0x34d6 <main+0x11d2>
    34d4:	43 c0       	rjmp	.+134    	; 0x355c <main+0x1258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d6:	fe 01       	movw	r30, r28
    34d8:	eb 55       	subi	r30, 0x5B	; 91
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	60 81       	ld	r22, Z
    34de:	71 81       	ldd	r23, Z+1	; 0x01
    34e0:	82 81       	ldd	r24, Z+2	; 0x02
    34e2:	93 81       	ldd	r25, Z+3	; 0x03
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	40 e2       	ldi	r20, 0x20	; 32
    34ea:	51 e4       	ldi	r21, 0x41	; 65
    34ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	8e 01       	movw	r16, r28
    34f6:	01 56       	subi	r16, 0x61	; 97
    34f8:	1f 4f       	sbci	r17, 0xFF	; 255
    34fa:	bc 01       	movw	r22, r24
    34fc:	cd 01       	movw	r24, r26
    34fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	f8 01       	movw	r30, r16
    3508:	91 83       	std	Z+1, r25	; 0x01
    350a:	80 83       	st	Z, r24
    350c:	1f c0       	rjmp	.+62     	; 0x354c <main+0x1248>
    350e:	fe 01       	movw	r30, r28
    3510:	e3 56       	subi	r30, 0x63	; 99
    3512:	ff 4f       	sbci	r31, 0xFF	; 255
    3514:	80 e9       	ldi	r24, 0x90	; 144
    3516:	91 e0       	ldi	r25, 0x01	; 1
    3518:	91 83       	std	Z+1, r25	; 0x01
    351a:	80 83       	st	Z, r24
    351c:	fe 01       	movw	r30, r28
    351e:	e3 56       	subi	r30, 0x63	; 99
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	80 81       	ld	r24, Z
    3524:	91 81       	ldd	r25, Z+1	; 0x01
    3526:	01 97       	sbiw	r24, 0x01	; 1
    3528:	f1 f7       	brne	.-4      	; 0x3526 <main+0x1222>
    352a:	fe 01       	movw	r30, r28
    352c:	e3 56       	subi	r30, 0x63	; 99
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	91 83       	std	Z+1, r25	; 0x01
    3532:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3534:	de 01       	movw	r26, r28
    3536:	a1 56       	subi	r26, 0x61	; 97
    3538:	bf 4f       	sbci	r27, 0xFF	; 255
    353a:	fe 01       	movw	r30, r28
    353c:	e1 56       	subi	r30, 0x61	; 97
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	80 81       	ld	r24, Z
    3542:	91 81       	ldd	r25, Z+1	; 0x01
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	11 96       	adiw	r26, 0x01	; 1
    3548:	9c 93       	st	X, r25
    354a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354c:	fe 01       	movw	r30, r28
    354e:	e1 56       	subi	r30, 0x61	; 97
    3550:	ff 4f       	sbci	r31, 0xFF	; 255
    3552:	80 81       	ld	r24, Z
    3554:	91 81       	ldd	r25, Z+1	; 0x01
    3556:	00 97       	sbiw	r24, 0x00	; 0
    3558:	d1 f6       	brne	.-76     	; 0x350e <main+0x120a>
    355a:	27 c0       	rjmp	.+78     	; 0x35aa <main+0x12a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    355c:	8e 01       	movw	r16, r28
    355e:	01 56       	subi	r16, 0x61	; 97
    3560:	1f 4f       	sbci	r17, 0xFF	; 255
    3562:	fe 01       	movw	r30, r28
    3564:	ef 55       	subi	r30, 0x5F	; 95
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	60 81       	ld	r22, Z
    356a:	71 81       	ldd	r23, Z+1	; 0x01
    356c:	82 81       	ldd	r24, Z+2	; 0x02
    356e:	93 81       	ldd	r25, Z+3	; 0x03
    3570:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	f8 01       	movw	r30, r16
    357a:	91 83       	std	Z+1, r25	; 0x01
    357c:	80 83       	st	Z, r24
    357e:	de 01       	movw	r26, r28
    3580:	a5 56       	subi	r26, 0x65	; 101
    3582:	bf 4f       	sbci	r27, 0xFF	; 255
    3584:	fe 01       	movw	r30, r28
    3586:	e1 56       	subi	r30, 0x61	; 97
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	80 81       	ld	r24, Z
    358c:	91 81       	ldd	r25, Z+1	; 0x01
    358e:	8d 93       	st	X+, r24
    3590:	9c 93       	st	X, r25
    3592:	fe 01       	movw	r30, r28
    3594:	e5 56       	subi	r30, 0x65	; 101
    3596:	ff 4f       	sbci	r31, 0xFF	; 255
    3598:	80 81       	ld	r24, Z
    359a:	91 81       	ldd	r25, Z+1	; 0x01
    359c:	01 97       	sbiw	r24, 0x01	; 1
    359e:	f1 f7       	brne	.-4      	; 0x359c <main+0x1298>
    35a0:	fe 01       	movw	r30, r28
    35a2:	e5 56       	subi	r30, 0x65	; 101
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	80 83       	st	Z, r24
														_delay_ms(500);
														LCD_SEND_COMMAND(0x01);
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
														masterR=SPI_u8MasterTrancieve('5');
    35b0:	85 e3       	ldi	r24, 0x35	; 53
    35b2:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    35b6:	fe 01       	movw	r30, r28
    35b8:	ec 5e       	subi	r30, 0xEC	; 236
    35ba:	fe 4f       	sbci	r31, 0xFE	; 254
    35bc:	80 83       	st	Z, r24
											        	//_delay_ms(100);
											        	masterR=SPI_u8MasterTrancieve('*');
    35be:	8a e2       	ldi	r24, 0x2A	; 42
    35c0:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    35c4:	fe 01       	movw	r30, r28
    35c6:	ec 5e       	subi	r30, 0xEC	; 236
    35c8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ca:	80 83       	st	Z, r24
											            LCD_VidSendStrig(" Room3 S:OFF");
    35cc:	86 e4       	ldi	r24, 0x46	; 70
    35ce:	91 e0       	ldi	r25, 0x01	; 1
    35d0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
											            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    35d4:	82 e0       	ldi	r24, 0x02	; 2
    35d6:	60 e0       	ldi	r22, 0x00	; 0
    35d8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
											           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    35dc:	84 ef       	ldi	r24, 0xF4	; 244
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>




									           		}
									           		if(FLAG==0)
    35e4:	fe 01       	movw	r30, r28
    35e6:	ee 5e       	subi	r30, 0xEE	; 238
    35e8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ea:	80 81       	ld	r24, Z
    35ec:	88 23       	and	r24, r24
    35ee:	09 f0       	breq	.+2      	; 0x35f2 <main+0x12ee>
    35f0:	8a ce       	rjmp	.-748    	; 0x3306 <main+0x1002>
									           		{
									           			//FLAG TO RETURN TO PRAVIOUSE PAGE
									           			FLAG=1;
    35f2:	fe 01       	movw	r30, r28
    35f4:	ee 5e       	subi	r30, 0xEE	; 238
    35f6:	fe 4f       	sbci	r31, 0xFE	; 254
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	80 83       	st	Z, r24
    35fc:	f2 c6       	rjmp	.+3556   	; 0x43e2 <main+0x20de>
									           	}

								           	}
								           	break;
									case 4 :// IF HE CHOOSE + FOR MORE OPTIONS
										    LCD_SEND_COMMAND(0x01);
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
								            LCD_VidSendStrig(" 1:Room4 2:TV");
    3604:	8f e5       	ldi	r24, 0x5F	; 95
    3606:	91 e0       	ldi	r25, 0x01	; 1
    3608:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    360c:	82 e0       	ldi	r24, 0x02	; 2
    360e:	60 e0       	ldi	r22, 0x00	; 0
    3610:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
								           	LCD_VidSendStrig("3:Air_COND 4:RET");
    3614:	8d e6       	ldi	r24, 0x6D	; 109
    3616:	91 e0       	ldi	r25, 0x01	; 1
    3618:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
											while(1)
											{
												read2=0xFF;
    361c:	fe 01       	movw	r30, r28
    361e:	e4 5f       	subi	r30, 0xF4	; 244
    3620:	fe 4f       	sbci	r31, 0xFE	; 254
    3622:	8f ef       	ldi	r24, 0xFF	; 255
    3624:	80 83       	st	Z, r24
    3626:	06 c0       	rjmp	.+12     	; 0x3634 <main+0x1330>
												while(read2==0xFF)
												{
													read2= KPD_u8GetPressedKey();
    3628:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    362c:	fe 01       	movw	r30, r28
    362e:	e4 5f       	subi	r30, 0xF4	; 244
    3630:	fe 4f       	sbci	r31, 0xFE	; 254
    3632:	80 83       	st	Z, r24
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
								           	LCD_VidSendStrig("3:Air_COND 4:RET");
											while(1)
											{
												read2=0xFF;
												while(read2==0xFF)
    3634:	fe 01       	movw	r30, r28
    3636:	e4 5f       	subi	r30, 0xF4	; 244
    3638:	fe 4f       	sbci	r31, 0xFE	; 254
    363a:	80 81       	ld	r24, Z
    363c:	8f 3f       	cpi	r24, 0xFF	; 255
    363e:	a1 f3       	breq	.-24     	; 0x3628 <main+0x1324>
												{
													read2= KPD_u8GetPressedKey();
												}
												if(read2!=0xFF)
    3640:	fe 01       	movw	r30, r28
    3642:	e4 5f       	subi	r30, 0xF4	; 244
    3644:	fe 4f       	sbci	r31, 0xFE	; 254
    3646:	80 81       	ld	r24, Z
    3648:	8f 3f       	cpi	r24, 0xFF	; 255
    364a:	41 f3       	breq	.-48     	; 0x361c <main+0x1318>
												{
													switch(read2)
    364c:	fe 01       	movw	r30, r28
    364e:	e4 5f       	subi	r30, 0xF4	; 244
    3650:	fe 4f       	sbci	r31, 0xFE	; 254
    3652:	80 81       	ld	r24, Z
    3654:	28 2f       	mov	r18, r24
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	cb 5d       	subi	r28, 0xDB	; 219
    365a:	de 4f       	sbci	r29, 0xFE	; 254
    365c:	39 83       	std	Y+1, r19	; 0x01
    365e:	28 83       	st	Y, r18
    3660:	c5 52       	subi	r28, 0x25	; 37
    3662:	d1 40       	sbci	r29, 0x01	; 1
    3664:	cb 5d       	subi	r28, 0xDB	; 219
    3666:	de 4f       	sbci	r29, 0xFE	; 254
    3668:	88 81       	ld	r24, Y
    366a:	99 81       	ldd	r25, Y+1	; 0x01
    366c:	c5 52       	subi	r28, 0x25	; 37
    366e:	d1 40       	sbci	r29, 0x01	; 1
    3670:	82 30       	cpi	r24, 0x02	; 2
    3672:	91 05       	cpc	r25, r1
    3674:	09 f4       	brne	.+2      	; 0x3678 <main+0x1374>
    3676:	b3 c1       	rjmp	.+870    	; 0x39de <main+0x16da>
    3678:	cb 5d       	subi	r28, 0xDB	; 219
    367a:	de 4f       	sbci	r29, 0xFE	; 254
    367c:	e8 81       	ld	r30, Y
    367e:	f9 81       	ldd	r31, Y+1	; 0x01
    3680:	c5 52       	subi	r28, 0x25	; 37
    3682:	d1 40       	sbci	r29, 0x01	; 1
    3684:	e3 30       	cpi	r30, 0x03	; 3
    3686:	f1 05       	cpc	r31, r1
    3688:	54 f4       	brge	.+20     	; 0x369e <main+0x139a>
    368a:	cb 5d       	subi	r28, 0xDB	; 219
    368c:	de 4f       	sbci	r29, 0xFE	; 254
    368e:	28 81       	ld	r18, Y
    3690:	39 81       	ldd	r19, Y+1	; 0x01
    3692:	c5 52       	subi	r28, 0x25	; 37
    3694:	d1 40       	sbci	r29, 0x01	; 1
    3696:	21 30       	cpi	r18, 0x01	; 1
    3698:	31 05       	cpc	r19, r1
    369a:	b1 f0       	breq	.+44     	; 0x36c8 <main+0x13c4>
    369c:	d1 c4       	rjmp	.+2466   	; 0x4040 <main+0x1d3c>
    369e:	cb 5d       	subi	r28, 0xDB	; 219
    36a0:	de 4f       	sbci	r29, 0xFE	; 254
    36a2:	88 81       	ld	r24, Y
    36a4:	99 81       	ldd	r25, Y+1	; 0x01
    36a6:	c5 52       	subi	r28, 0x25	; 37
    36a8:	d1 40       	sbci	r29, 0x01	; 1
    36aa:	83 30       	cpi	r24, 0x03	; 3
    36ac:	91 05       	cpc	r25, r1
    36ae:	09 f4       	brne	.+2      	; 0x36b2 <main+0x13ae>
    36b0:	21 c3       	rjmp	.+1602   	; 0x3cf4 <main+0x19f0>
    36b2:	cb 5d       	subi	r28, 0xDB	; 219
    36b4:	de 4f       	sbci	r29, 0xFE	; 254
    36b6:	e8 81       	ld	r30, Y
    36b8:	f9 81       	ldd	r31, Y+1	; 0x01
    36ba:	c5 52       	subi	r28, 0x25	; 37
    36bc:	d1 40       	sbci	r29, 0x01	; 1
    36be:	e4 30       	cpi	r30, 0x04	; 4
    36c0:	f1 05       	cpc	r31, r1
    36c2:	09 f4       	brne	.+2      	; 0x36c6 <main+0x13c2>
    36c4:	a2 c4       	rjmp	.+2372   	; 0x400a <main+0x1d06>
    36c6:	bc c4       	rjmp	.+2424   	; 0x4040 <main+0x1d3c>
													{
													case 1 ://ROOM4
														    LCD_SEND_COMMAND(0x01);
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												            LCD_VidSendStrig(" Room4 S:OFF");
    36ce:	8e e7       	ldi	r24, 0x7E	; 126
    36d0:	91 e0       	ldi	r25, 0x01	; 1
    36d2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    36d6:	82 e0       	ldi	r24, 0x02	; 2
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    36de:	84 ef       	ldi	r24, 0xF4	; 244
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												           	while(1)
												           	{
													           	read3=0xFF;
    36e6:	fe 01       	movw	r30, r28
    36e8:	e5 5f       	subi	r30, 0xF5	; 245
    36ea:	fe 4f       	sbci	r31, 0xFE	; 254
    36ec:	8f ef       	ldi	r24, 0xFF	; 255
    36ee:	80 83       	st	Z, r24
    36f0:	06 c0       	rjmp	.+12     	; 0x36fe <main+0x13fa>
																while(read3==0xFF)
																{
																	read3= KPD_u8GetPressedKey();
    36f2:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    36f6:	fe 01       	movw	r30, r28
    36f8:	e5 5f       	subi	r30, 0xF5	; 245
    36fa:	fe 4f       	sbci	r31, 0xFE	; 254
    36fc:	80 83       	st	Z, r24
												            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
												           	LCD_VidSendStrig("1:on 2:off 3:RET ");
												           	while(1)
												           	{
													           	read3=0xFF;
																while(read3==0xFF)
    36fe:	fe 01       	movw	r30, r28
    3700:	e5 5f       	subi	r30, 0xF5	; 245
    3702:	fe 4f       	sbci	r31, 0xFE	; 254
    3704:	80 81       	ld	r24, Z
    3706:	8f 3f       	cpi	r24, 0xFF	; 255
    3708:	a1 f3       	breq	.-24     	; 0x36f2 <main+0x13ee>
																{
																	read3= KPD_u8GetPressedKey();
																}
													           	if(read3!=0xFF)
    370a:	fe 01       	movw	r30, r28
    370c:	e5 5f       	subi	r30, 0xF5	; 245
    370e:	fe 4f       	sbci	r31, 0xFE	; 254
    3710:	80 81       	ld	r24, Z
    3712:	8f 3f       	cpi	r24, 0xFF	; 255
    3714:	41 f3       	breq	.-48     	; 0x36e6 <main+0x13e2>
													           	{
													           		switch(read3)
    3716:	fe 01       	movw	r30, r28
    3718:	e5 5f       	subi	r30, 0xF5	; 245
    371a:	fe 4f       	sbci	r31, 0xFE	; 254
    371c:	80 81       	ld	r24, Z
    371e:	28 2f       	mov	r18, r24
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	cd 5d       	subi	r28, 0xDD	; 221
    3724:	de 4f       	sbci	r29, 0xFE	; 254
    3726:	39 83       	std	Y+1, r19	; 0x01
    3728:	28 83       	st	Y, r18
    372a:	c3 52       	subi	r28, 0x23	; 35
    372c:	d1 40       	sbci	r29, 0x01	; 1
    372e:	cd 5d       	subi	r28, 0xDD	; 221
    3730:	de 4f       	sbci	r29, 0xFE	; 254
    3732:	88 81       	ld	r24, Y
    3734:	99 81       	ldd	r25, Y+1	; 0x01
    3736:	c3 52       	subi	r28, 0x23	; 35
    3738:	d1 40       	sbci	r29, 0x01	; 1
    373a:	82 30       	cpi	r24, 0x02	; 2
    373c:	91 05       	cpc	r25, r1
    373e:	51 f1       	breq	.+84     	; 0x3794 <main+0x1490>
    3740:	cd 5d       	subi	r28, 0xDD	; 221
    3742:	de 4f       	sbci	r29, 0xFE	; 254
    3744:	e8 81       	ld	r30, Y
    3746:	f9 81       	ldd	r31, Y+1	; 0x01
    3748:	c3 52       	subi	r28, 0x23	; 35
    374a:	d1 40       	sbci	r29, 0x01	; 1
    374c:	e3 30       	cpi	r30, 0x03	; 3
    374e:	f1 05       	cpc	r31, r1
    3750:	c1 f1       	breq	.+112    	; 0x37c2 <main+0x14be>
    3752:	cd 5d       	subi	r28, 0xDD	; 221
    3754:	de 4f       	sbci	r29, 0xFE	; 254
    3756:	28 81       	ld	r18, Y
    3758:	39 81       	ldd	r19, Y+1	; 0x01
    375a:	c3 52       	subi	r28, 0x23	; 35
    375c:	d1 40       	sbci	r29, 0x01	; 1
    375e:	21 30       	cpi	r18, 0x01	; 1
    3760:	31 05       	cpc	r19, r1
    3762:	09 f0       	breq	.+2      	; 0x3766 <main+0x1462>
    3764:	50 c0       	rjmp	.+160    	; 0x3806 <main+0x1502>
													           		{
													           		case 1: //TURN IT ON
													           			    LCD_SEND_COMMAND(0x01);
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
											           			            masterR=SPI_u8MasterTrancieve('6'); //room4 will turn on
    376c:	86 e3       	ldi	r24, 0x36	; 54
    376e:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3772:	fe 01       	movw	r30, r28
    3774:	ec 5e       	subi	r30, 0xEC	; 236
    3776:	fe 4f       	sbci	r31, 0xFE	; 254
    3778:	80 83       	st	Z, r24
													           			    LCD_VidSendStrig(" Room4 S:ON");
    377a:	8b e8       	ldi	r24, 0x8B	; 139
    377c:	91 e0       	ldi	r25, 0x01	; 1
    377e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3782:	82 e0       	ldi	r24, 0x02	; 2
    3784:	60 e0       	ldi	r22, 0x00	; 0
    3786:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
													           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    378a:	84 ef       	ldi	r24, 0xF4	; 244
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    3792:	18 c1       	rjmp	.+560    	; 0x39c4 <main+0x16c0>
													           	            //_delay_ms(400);
													           			   break;
													           		case 2://TURN IT OFF
													           			    LCD_SEND_COMMAND(0x01);
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
											           			            masterR=SPI_u8MasterTrancieve('7'); //room4 will turn oFF
    379a:	87 e3       	ldi	r24, 0x37	; 55
    379c:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    37a0:	fe 01       	movw	r30, r28
    37a2:	ec 5e       	subi	r30, 0xEC	; 236
    37a4:	fe 4f       	sbci	r31, 0xFE	; 254
    37a6:	80 83       	st	Z, r24
											           		                //_delay_ms(1000);
													           			    LCD_VidSendStrig(" Room4 S:OFF");
    37a8:	8e e7       	ldi	r24, 0x7E	; 126
    37aa:	91 e0       	ldi	r25, 0x01	; 1
    37ac:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    37b0:	82 e0       	ldi	r24, 0x02	; 2
    37b2:	60 e0       	ldi	r22, 0x00	; 0
    37b4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
													           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    37b8:	84 ef       	ldi	r24, 0xF4	; 244
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    37c0:	01 c1       	rjmp	.+514    	; 0x39c4 <main+0x16c0>
													           	           // _delay_ms(400);
													           			   break;
													           		case 3: //TO RETURN TO THE PRIVIOUS PAGE
													           			    LCD_SEND_COMMAND(0x01);
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
													           			    masterR=SPI_u8MasterTrancieve('7');
    37c8:	87 e3       	ldi	r24, 0x37	; 55
    37ca:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    37ce:	fe 01       	movw	r30, r28
    37d0:	ec 5e       	subi	r30, 0xEC	; 236
    37d2:	fe 4f       	sbci	r31, 0xFE	; 254
    37d4:	80 83       	st	Z, r24
														                    LCD_VidSendStrig(" 1:Room4 2:TV");
    37d6:	8f e5       	ldi	r24, 0x5F	; 95
    37d8:	91 e0       	ldi	r25, 0x01	; 1
    37da:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
														                    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    37de:	82 e0       	ldi	r24, 0x02	; 2
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
														                	LCD_VidSendStrig("3:Air_COND 4:RET");
    37e6:	8d e6       	ldi	r24, 0x6D	; 109
    37e8:	91 e0       	ldi	r25, 0x01	; 1
    37ea:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
																        	masterR=SPI_u8MasterTrancieve('*');
    37ee:	8a e2       	ldi	r24, 0x2A	; 42
    37f0:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    37f4:	fe 01       	movw	r30, r28
    37f6:	ec 5e       	subi	r30, 0xEC	; 236
    37f8:	fe 4f       	sbci	r31, 0xFE	; 254
    37fa:	80 83       	st	Z, r24
																        	FLAG2=0;
    37fc:	fe 01       	movw	r30, r28
    37fe:	ef 5e       	subi	r30, 0xEF	; 239
    3800:	fe 4f       	sbci	r31, 0xFE	; 254
    3802:	10 82       	st	Z, r1
    3804:	df c0       	rjmp	.+446    	; 0x39c4 <main+0x16c0>
													           			   break;
																	default: // WRONG ENTERY
																		LCD_SEND_COMMAND(0x01);
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
																		masterR=SPI_u8MasterTrancieve('7');
    380c:	87 e3       	ldi	r24, 0x37	; 55
    380e:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3812:	fe 01       	movw	r30, r28
    3814:	ec 5e       	subi	r30, 0xEC	; 236
    3816:	fe 4f       	sbci	r31, 0xFE	; 254
    3818:	80 83       	st	Z, r24
																		LCD_VidSendStrig(" wrong choice");
    381a:	82 e1       	ldi	r24, 0x12	; 18
    381c:	91 e0       	ldi	r25, 0x01	; 1
    381e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
																	    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3822:	82 e0       	ldi	r24, 0x02	; 2
    3824:	60 e0       	ldi	r22, 0x00	; 0
    3826:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
																		LCD_VidSendStrig("choose again");
    382a:	80 e2       	ldi	r24, 0x20	; 32
    382c:	91 e0       	ldi	r25, 0x01	; 1
    382e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    3832:	fe 01       	movw	r30, r28
    3834:	e9 56       	subi	r30, 0x69	; 105
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	80 e0       	ldi	r24, 0x00	; 0
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	aa ef       	ldi	r26, 0xFA	; 250
    383e:	b3 e4       	ldi	r27, 0x43	; 67
    3840:	80 83       	st	Z, r24
    3842:	91 83       	std	Z+1, r25	; 0x01
    3844:	a2 83       	std	Z+2, r26	; 0x02
    3846:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3848:	8e 01       	movw	r16, r28
    384a:	0d 56       	subi	r16, 0x6D	; 109
    384c:	1f 4f       	sbci	r17, 0xFF	; 255
    384e:	fe 01       	movw	r30, r28
    3850:	e9 56       	subi	r30, 0x69	; 105
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	60 81       	ld	r22, Z
    3856:	71 81       	ldd	r23, Z+1	; 0x01
    3858:	82 81       	ldd	r24, Z+2	; 0x02
    385a:	93 81       	ldd	r25, Z+3	; 0x03
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	4a e7       	ldi	r20, 0x7A	; 122
    3862:	55 e4       	ldi	r21, 0x45	; 69
    3864:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	f8 01       	movw	r30, r16
    386e:	80 83       	st	Z, r24
    3870:	91 83       	std	Z+1, r25	; 0x01
    3872:	a2 83       	std	Z+2, r26	; 0x02
    3874:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3876:	fe 01       	movw	r30, r28
    3878:	ed 56       	subi	r30, 0x6D	; 109
    387a:	ff 4f       	sbci	r31, 0xFF	; 255
    387c:	60 81       	ld	r22, Z
    387e:	71 81       	ldd	r23, Z+1	; 0x01
    3880:	82 81       	ldd	r24, Z+2	; 0x02
    3882:	93 81       	ldd	r25, Z+3	; 0x03
    3884:	20 e0       	ldi	r18, 0x00	; 0
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	40 e8       	ldi	r20, 0x80	; 128
    388a:	5f e3       	ldi	r21, 0x3F	; 63
    388c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3890:	88 23       	and	r24, r24
    3892:	44 f4       	brge	.+16     	; 0x38a4 <main+0x15a0>
		__ticks = 1;
    3894:	fe 01       	movw	r30, r28
    3896:	ef 56       	subi	r30, 0x6F	; 111
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	91 83       	std	Z+1, r25	; 0x01
    38a0:	80 83       	st	Z, r24
    38a2:	64 c0       	rjmp	.+200    	; 0x396c <main+0x1668>
	else if (__tmp > 65535)
    38a4:	fe 01       	movw	r30, r28
    38a6:	ed 56       	subi	r30, 0x6D	; 109
    38a8:	ff 4f       	sbci	r31, 0xFF	; 255
    38aa:	60 81       	ld	r22, Z
    38ac:	71 81       	ldd	r23, Z+1	; 0x01
    38ae:	82 81       	ldd	r24, Z+2	; 0x02
    38b0:	93 81       	ldd	r25, Z+3	; 0x03
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	3f ef       	ldi	r19, 0xFF	; 255
    38b6:	4f e7       	ldi	r20, 0x7F	; 127
    38b8:	57 e4       	ldi	r21, 0x47	; 71
    38ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    38be:	18 16       	cp	r1, r24
    38c0:	0c f0       	brlt	.+2      	; 0x38c4 <main+0x15c0>
    38c2:	43 c0       	rjmp	.+134    	; 0x394a <main+0x1646>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c4:	fe 01       	movw	r30, r28
    38c6:	e9 56       	subi	r30, 0x69	; 105
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	60 81       	ld	r22, Z
    38cc:	71 81       	ldd	r23, Z+1	; 0x01
    38ce:	82 81       	ldd	r24, Z+2	; 0x02
    38d0:	93 81       	ldd	r25, Z+3	; 0x03
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	40 e2       	ldi	r20, 0x20	; 32
    38d8:	51 e4       	ldi	r21, 0x41	; 65
    38da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	8e 01       	movw	r16, r28
    38e4:	0f 56       	subi	r16, 0x6F	; 111
    38e6:	1f 4f       	sbci	r17, 0xFF	; 255
    38e8:	bc 01       	movw	r22, r24
    38ea:	cd 01       	movw	r24, r26
    38ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	f8 01       	movw	r30, r16
    38f6:	91 83       	std	Z+1, r25	; 0x01
    38f8:	80 83       	st	Z, r24
    38fa:	1f c0       	rjmp	.+62     	; 0x393a <main+0x1636>
    38fc:	fe 01       	movw	r30, r28
    38fe:	e1 57       	subi	r30, 0x71	; 113
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	80 e9       	ldi	r24, 0x90	; 144
    3904:	91 e0       	ldi	r25, 0x01	; 1
    3906:	91 83       	std	Z+1, r25	; 0x01
    3908:	80 83       	st	Z, r24
    390a:	fe 01       	movw	r30, r28
    390c:	e1 57       	subi	r30, 0x71	; 113
    390e:	ff 4f       	sbci	r31, 0xFF	; 255
    3910:	80 81       	ld	r24, Z
    3912:	91 81       	ldd	r25, Z+1	; 0x01
    3914:	01 97       	sbiw	r24, 0x01	; 1
    3916:	f1 f7       	brne	.-4      	; 0x3914 <main+0x1610>
    3918:	fe 01       	movw	r30, r28
    391a:	e1 57       	subi	r30, 0x71	; 113
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	91 83       	std	Z+1, r25	; 0x01
    3920:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3922:	de 01       	movw	r26, r28
    3924:	af 56       	subi	r26, 0x6F	; 111
    3926:	bf 4f       	sbci	r27, 0xFF	; 255
    3928:	fe 01       	movw	r30, r28
    392a:	ef 56       	subi	r30, 0x6F	; 111
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	80 81       	ld	r24, Z
    3930:	91 81       	ldd	r25, Z+1	; 0x01
    3932:	01 97       	sbiw	r24, 0x01	; 1
    3934:	11 96       	adiw	r26, 0x01	; 1
    3936:	9c 93       	st	X, r25
    3938:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    393a:	fe 01       	movw	r30, r28
    393c:	ef 56       	subi	r30, 0x6F	; 111
    393e:	ff 4f       	sbci	r31, 0xFF	; 255
    3940:	80 81       	ld	r24, Z
    3942:	91 81       	ldd	r25, Z+1	; 0x01
    3944:	00 97       	sbiw	r24, 0x00	; 0
    3946:	d1 f6       	brne	.-76     	; 0x38fc <main+0x15f8>
    3948:	27 c0       	rjmp	.+78     	; 0x3998 <main+0x1694>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    394a:	8e 01       	movw	r16, r28
    394c:	0f 56       	subi	r16, 0x6F	; 111
    394e:	1f 4f       	sbci	r17, 0xFF	; 255
    3950:	fe 01       	movw	r30, r28
    3952:	ed 56       	subi	r30, 0x6D	; 109
    3954:	ff 4f       	sbci	r31, 0xFF	; 255
    3956:	60 81       	ld	r22, Z
    3958:	71 81       	ldd	r23, Z+1	; 0x01
    395a:	82 81       	ldd	r24, Z+2	; 0x02
    395c:	93 81       	ldd	r25, Z+3	; 0x03
    395e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	f8 01       	movw	r30, r16
    3968:	91 83       	std	Z+1, r25	; 0x01
    396a:	80 83       	st	Z, r24
    396c:	de 01       	movw	r26, r28
    396e:	a3 57       	subi	r26, 0x73	; 115
    3970:	bf 4f       	sbci	r27, 0xFF	; 255
    3972:	fe 01       	movw	r30, r28
    3974:	ef 56       	subi	r30, 0x6F	; 111
    3976:	ff 4f       	sbci	r31, 0xFF	; 255
    3978:	80 81       	ld	r24, Z
    397a:	91 81       	ldd	r25, Z+1	; 0x01
    397c:	8d 93       	st	X+, r24
    397e:	9c 93       	st	X, r25
    3980:	fe 01       	movw	r30, r28
    3982:	e3 57       	subi	r30, 0x73	; 115
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	80 81       	ld	r24, Z
    3988:	91 81       	ldd	r25, Z+1	; 0x01
    398a:	01 97       	sbiw	r24, 0x01	; 1
    398c:	f1 f7       	brne	.-4      	; 0x398a <main+0x1686>
    398e:	fe 01       	movw	r30, r28
    3990:	e3 57       	subi	r30, 0x73	; 115
    3992:	ff 4f       	sbci	r31, 0xFF	; 255
    3994:	91 83       	std	Z+1, r25	; 0x01
    3996:	80 83       	st	Z, r24
																		_delay_ms(500);
																		LCD_SEND_COMMAND(0x01);
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
															        	masterR=SPI_u8MasterTrancieve('*');
    399e:	8a e2       	ldi	r24, 0x2A	; 42
    39a0:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    39a4:	fe 01       	movw	r30, r28
    39a6:	ec 5e       	subi	r30, 0xEC	; 236
    39a8:	fe 4f       	sbci	r31, 0xFE	; 254
    39aa:	80 83       	st	Z, r24
															            LCD_VidSendStrig(" Room4 S:OFF");
    39ac:	8e e7       	ldi	r24, 0x7E	; 126
    39ae:	91 e0       	ldi	r25, 0x01	; 1
    39b0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
															            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    39b4:	82 e0       	ldi	r24, 0x02	; 2
    39b6:	60 e0       	ldi	r22, 0x00	; 0
    39b8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
															           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    39bc:	84 ef       	ldi	r24, 0xF4	; 244
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
																		break;
													           		}
													           		if(FLAG2==0)
    39c4:	fe 01       	movw	r30, r28
    39c6:	ef 5e       	subi	r30, 0xEF	; 239
    39c8:	fe 4f       	sbci	r31, 0xFE	; 254
    39ca:	80 81       	ld	r24, Z
    39cc:	88 23       	and	r24, r24
    39ce:	09 f0       	breq	.+2      	; 0x39d2 <main+0x16ce>
    39d0:	8a ce       	rjmp	.-748    	; 0x36e6 <main+0x13e2>
													           		{
													           			//FLAG TO RETURN TO PRIVIOSE PAGE
													           			FLAG2=1;
    39d2:	fe 01       	movw	r30, r28
    39d4:	ef 5e       	subi	r30, 0xEF	; 239
    39d6:	fe 4f       	sbci	r31, 0xFE	; 254
    39d8:	81 e0       	ldi	r24, 0x01	; 1
    39da:	80 83       	st	Z, r24
    39dc:	09 c4       	rjmp	.+2066   	; 0x41f0 <main+0x1eec>
													           	}

												           	}
												           	break;
													case 2 ://TV
														    LCD_SEND_COMMAND(0x01);
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												            LCD_VidSendStrig(" TV S:OFF");
    39e4:	87 e9       	ldi	r24, 0x97	; 151
    39e6:	91 e0       	ldi	r25, 0x01	; 1
    39e8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    39ec:	82 e0       	ldi	r24, 0x02	; 2
    39ee:	60 e0       	ldi	r22, 0x00	; 0
    39f0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    39f4:	84 ef       	ldi	r24, 0xF4	; 244
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												           	while(1)
												           	{
													           	read3=0xFF;
    39fc:	fe 01       	movw	r30, r28
    39fe:	e5 5f       	subi	r30, 0xF5	; 245
    3a00:	fe 4f       	sbci	r31, 0xFE	; 254
    3a02:	8f ef       	ldi	r24, 0xFF	; 255
    3a04:	80 83       	st	Z, r24
    3a06:	06 c0       	rjmp	.+12     	; 0x3a14 <main+0x1710>
																while(read3==0xFF)
																{
																	read3= KPD_u8GetPressedKey();
    3a08:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	e5 5f       	subi	r30, 0xF5	; 245
    3a10:	fe 4f       	sbci	r31, 0xFE	; 254
    3a12:	80 83       	st	Z, r24
												            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
												           	LCD_VidSendStrig("1:on 2:off 3:RET ");
												           	while(1)
												           	{
													           	read3=0xFF;
																while(read3==0xFF)
    3a14:	fe 01       	movw	r30, r28
    3a16:	e5 5f       	subi	r30, 0xF5	; 245
    3a18:	fe 4f       	sbci	r31, 0xFE	; 254
    3a1a:	80 81       	ld	r24, Z
    3a1c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a1e:	a1 f3       	breq	.-24     	; 0x3a08 <main+0x1704>
																{
																	read3= KPD_u8GetPressedKey();
																}
													           	if(read3!=0xFF)
    3a20:	fe 01       	movw	r30, r28
    3a22:	e5 5f       	subi	r30, 0xF5	; 245
    3a24:	fe 4f       	sbci	r31, 0xFE	; 254
    3a26:	80 81       	ld	r24, Z
    3a28:	8f 3f       	cpi	r24, 0xFF	; 255
    3a2a:	41 f3       	breq	.-48     	; 0x39fc <main+0x16f8>
													           	{
													           		switch(read3)
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	e5 5f       	subi	r30, 0xF5	; 245
    3a30:	fe 4f       	sbci	r31, 0xFE	; 254
    3a32:	80 81       	ld	r24, Z
    3a34:	28 2f       	mov	r18, r24
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	cf 5d       	subi	r28, 0xDF	; 223
    3a3a:	de 4f       	sbci	r29, 0xFE	; 254
    3a3c:	39 83       	std	Y+1, r19	; 0x01
    3a3e:	28 83       	st	Y, r18
    3a40:	c1 52       	subi	r28, 0x21	; 33
    3a42:	d1 40       	sbci	r29, 0x01	; 1
    3a44:	cf 5d       	subi	r28, 0xDF	; 223
    3a46:	de 4f       	sbci	r29, 0xFE	; 254
    3a48:	88 81       	ld	r24, Y
    3a4a:	99 81       	ldd	r25, Y+1	; 0x01
    3a4c:	c1 52       	subi	r28, 0x21	; 33
    3a4e:	d1 40       	sbci	r29, 0x01	; 1
    3a50:	82 30       	cpi	r24, 0x02	; 2
    3a52:	91 05       	cpc	r25, r1
    3a54:	51 f1       	breq	.+84     	; 0x3aaa <main+0x17a6>
    3a56:	cf 5d       	subi	r28, 0xDF	; 223
    3a58:	de 4f       	sbci	r29, 0xFE	; 254
    3a5a:	e8 81       	ld	r30, Y
    3a5c:	f9 81       	ldd	r31, Y+1	; 0x01
    3a5e:	c1 52       	subi	r28, 0x21	; 33
    3a60:	d1 40       	sbci	r29, 0x01	; 1
    3a62:	e3 30       	cpi	r30, 0x03	; 3
    3a64:	f1 05       	cpc	r31, r1
    3a66:	c1 f1       	breq	.+112    	; 0x3ad8 <main+0x17d4>
    3a68:	cf 5d       	subi	r28, 0xDF	; 223
    3a6a:	de 4f       	sbci	r29, 0xFE	; 254
    3a6c:	28 81       	ld	r18, Y
    3a6e:	39 81       	ldd	r19, Y+1	; 0x01
    3a70:	c1 52       	subi	r28, 0x21	; 33
    3a72:	d1 40       	sbci	r29, 0x01	; 1
    3a74:	21 30       	cpi	r18, 0x01	; 1
    3a76:	31 05       	cpc	r19, r1
    3a78:	09 f0       	breq	.+2      	; 0x3a7c <main+0x1778>
    3a7a:	50 c0       	rjmp	.+160    	; 0x3b1c <main+0x1818>
													           		{
													           		case 1://TURN TV ON
													           			    LCD_SEND_COMMAND(0x01);
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
											           			            masterR=SPI_u8MasterTrancieve('8'); //TV will turn on
    3a82:	88 e3       	ldi	r24, 0x38	; 56
    3a84:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3a88:	fe 01       	movw	r30, r28
    3a8a:	ec 5e       	subi	r30, 0xEC	; 236
    3a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a8e:	80 83       	st	Z, r24
													           			    LCD_VidSendStrig(" TV S:ON");
    3a90:	81 ea       	ldi	r24, 0xA1	; 161
    3a92:	91 e0       	ldi	r25, 0x01	; 1
    3a94:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3a98:	82 e0       	ldi	r24, 0x02	; 2
    3a9a:	60 e0       	ldi	r22, 0x00	; 0
    3a9c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
													           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    3aa0:	84 ef       	ldi	r24, 0xF4	; 244
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    3aa8:	18 c1       	rjmp	.+560    	; 0x3cda <main+0x19d6>
													           	           // _delay_ms(400);
													           			   break;
													           		case 2:  //TURN TV OFF
													           			    LCD_SEND_COMMAND(0x01);
    3aaa:	81 e0       	ldi	r24, 0x01	; 1
    3aac:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
											           			            masterR=SPI_u8MasterTrancieve('9'); //TV will turn oFF
    3ab0:	89 e3       	ldi	r24, 0x39	; 57
    3ab2:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	ec 5e       	subi	r30, 0xEC	; 236
    3aba:	fe 4f       	sbci	r31, 0xFE	; 254
    3abc:	80 83       	st	Z, r24
													           			    LCD_VidSendStrig(" TV S:OFF");
    3abe:	87 e9       	ldi	r24, 0x97	; 151
    3ac0:	91 e0       	ldi	r25, 0x01	; 1
    3ac2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3ac6:	82 e0       	ldi	r24, 0x02	; 2
    3ac8:	60 e0       	ldi	r22, 0x00	; 0
    3aca:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
													           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    3ace:	84 ef       	ldi	r24, 0xF4	; 244
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    3ad6:	01 c1       	rjmp	.+514    	; 0x3cda <main+0x19d6>
													           	            //_delay_ms(400);
													           			   break;
													           		case 3: //TO RETURN TO PRIVIOS PAGE
													           			    LCD_SEND_COMMAND(0x01);
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
													           		        masterR=SPI_u8MasterTrancieve('9');
    3ade:	89 e3       	ldi	r24, 0x39	; 57
    3ae0:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	ec 5e       	subi	r30, 0xEC	; 236
    3ae8:	fe 4f       	sbci	r31, 0xFE	; 254
    3aea:	80 83       	st	Z, r24
														                    LCD_VidSendStrig(" 1:Room4 2:TV");
    3aec:	8f e5       	ldi	r24, 0x5F	; 95
    3aee:	91 e0       	ldi	r25, 0x01	; 1
    3af0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
														                    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3af4:	82 e0       	ldi	r24, 0x02	; 2
    3af6:	60 e0       	ldi	r22, 0x00	; 0
    3af8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
														                	LCD_VidSendStrig("3:Air_COND 4:RET");
    3afc:	8d e6       	ldi	r24, 0x6D	; 109
    3afe:	91 e0       	ldi	r25, 0x01	; 1
    3b00:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
																        	masterR=SPI_u8MasterTrancieve('*');
    3b04:	8a e2       	ldi	r24, 0x2A	; 42
    3b06:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	ec 5e       	subi	r30, 0xEC	; 236
    3b0e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b10:	80 83       	st	Z, r24
																        	FLAG2=0;
    3b12:	fe 01       	movw	r30, r28
    3b14:	ef 5e       	subi	r30, 0xEF	; 239
    3b16:	fe 4f       	sbci	r31, 0xFE	; 254
    3b18:	10 82       	st	Z, r1
    3b1a:	df c0       	rjmp	.+446    	; 0x3cda <main+0x19d6>
													           			   break;
																	default: //WRONG ENTERY
																		LCD_SEND_COMMAND(0x01);
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
																		LCD_VidSendStrig(" wrong choice");
    3b22:	82 e1       	ldi	r24, 0x12	; 18
    3b24:	91 e0       	ldi	r25, 0x01	; 1
    3b26:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
																	    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3b2a:	82 e0       	ldi	r24, 0x02	; 2
    3b2c:	60 e0       	ldi	r22, 0x00	; 0
    3b2e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
																		LCD_VidSendStrig("choose again");
    3b32:	80 e2       	ldi	r24, 0x20	; 32
    3b34:	91 e0       	ldi	r25, 0x01	; 1
    3b36:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    3b3a:	fe 01       	movw	r30, r28
    3b3c:	e7 57       	subi	r30, 0x77	; 119
    3b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b40:	80 e0       	ldi	r24, 0x00	; 0
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	aa ef       	ldi	r26, 0xFA	; 250
    3b46:	b3 e4       	ldi	r27, 0x43	; 67
    3b48:	80 83       	st	Z, r24
    3b4a:	91 83       	std	Z+1, r25	; 0x01
    3b4c:	a2 83       	std	Z+2, r26	; 0x02
    3b4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b50:	8e 01       	movw	r16, r28
    3b52:	0b 57       	subi	r16, 0x7B	; 123
    3b54:	1f 4f       	sbci	r17, 0xFF	; 255
    3b56:	fe 01       	movw	r30, r28
    3b58:	e7 57       	subi	r30, 0x77	; 119
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	60 81       	ld	r22, Z
    3b5e:	71 81       	ldd	r23, Z+1	; 0x01
    3b60:	82 81       	ldd	r24, Z+2	; 0x02
    3b62:	93 81       	ldd	r25, Z+3	; 0x03
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	4a e7       	ldi	r20, 0x7A	; 122
    3b6a:	55 e4       	ldi	r21, 0x45	; 69
    3b6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b70:	dc 01       	movw	r26, r24
    3b72:	cb 01       	movw	r24, r22
    3b74:	f8 01       	movw	r30, r16
    3b76:	80 83       	st	Z, r24
    3b78:	91 83       	std	Z+1, r25	; 0x01
    3b7a:	a2 83       	std	Z+2, r26	; 0x02
    3b7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b7e:	fe 01       	movw	r30, r28
    3b80:	eb 57       	subi	r30, 0x7B	; 123
    3b82:	ff 4f       	sbci	r31, 0xFF	; 255
    3b84:	60 81       	ld	r22, Z
    3b86:	71 81       	ldd	r23, Z+1	; 0x01
    3b88:	82 81       	ldd	r24, Z+2	; 0x02
    3b8a:	93 81       	ldd	r25, Z+3	; 0x03
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	40 e8       	ldi	r20, 0x80	; 128
    3b92:	5f e3       	ldi	r21, 0x3F	; 63
    3b94:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3b98:	88 23       	and	r24, r24
    3b9a:	44 f4       	brge	.+16     	; 0x3bac <main+0x18a8>
		__ticks = 1;
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	ed 57       	subi	r30, 0x7D	; 125
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	91 83       	std	Z+1, r25	; 0x01
    3ba8:	80 83       	st	Z, r24
    3baa:	64 c0       	rjmp	.+200    	; 0x3c74 <main+0x1970>
	else if (__tmp > 65535)
    3bac:	fe 01       	movw	r30, r28
    3bae:	eb 57       	subi	r30, 0x7B	; 123
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	60 81       	ld	r22, Z
    3bb4:	71 81       	ldd	r23, Z+1	; 0x01
    3bb6:	82 81       	ldd	r24, Z+2	; 0x02
    3bb8:	93 81       	ldd	r25, Z+3	; 0x03
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	3f ef       	ldi	r19, 0xFF	; 255
    3bbe:	4f e7       	ldi	r20, 0x7F	; 127
    3bc0:	57 e4       	ldi	r21, 0x47	; 71
    3bc2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3bc6:	18 16       	cp	r1, r24
    3bc8:	0c f0       	brlt	.+2      	; 0x3bcc <main+0x18c8>
    3bca:	43 c0       	rjmp	.+134    	; 0x3c52 <main+0x194e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bcc:	fe 01       	movw	r30, r28
    3bce:	e7 57       	subi	r30, 0x77	; 119
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	60 81       	ld	r22, Z
    3bd4:	71 81       	ldd	r23, Z+1	; 0x01
    3bd6:	82 81       	ldd	r24, Z+2	; 0x02
    3bd8:	93 81       	ldd	r25, Z+3	; 0x03
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	40 e2       	ldi	r20, 0x20	; 32
    3be0:	51 e4       	ldi	r21, 0x41	; 65
    3be2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	8e 01       	movw	r16, r28
    3bec:	0d 57       	subi	r16, 0x7D	; 125
    3bee:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf0:	bc 01       	movw	r22, r24
    3bf2:	cd 01       	movw	r24, r26
    3bf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	f8 01       	movw	r30, r16
    3bfe:	91 83       	std	Z+1, r25	; 0x01
    3c00:	80 83       	st	Z, r24
    3c02:	1f c0       	rjmp	.+62     	; 0x3c42 <main+0x193e>
    3c04:	fe 01       	movw	r30, r28
    3c06:	ef 57       	subi	r30, 0x7F	; 127
    3c08:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0a:	80 e9       	ldi	r24, 0x90	; 144
    3c0c:	91 e0       	ldi	r25, 0x01	; 1
    3c0e:	91 83       	std	Z+1, r25	; 0x01
    3c10:	80 83       	st	Z, r24
    3c12:	fe 01       	movw	r30, r28
    3c14:	ef 57       	subi	r30, 0x7F	; 127
    3c16:	ff 4f       	sbci	r31, 0xFF	; 255
    3c18:	80 81       	ld	r24, Z
    3c1a:	91 81       	ldd	r25, Z+1	; 0x01
    3c1c:	01 97       	sbiw	r24, 0x01	; 1
    3c1e:	f1 f7       	brne	.-4      	; 0x3c1c <main+0x1918>
    3c20:	fe 01       	movw	r30, r28
    3c22:	ef 57       	subi	r30, 0x7F	; 127
    3c24:	ff 4f       	sbci	r31, 0xFF	; 255
    3c26:	91 83       	std	Z+1, r25	; 0x01
    3c28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2a:	de 01       	movw	r26, r28
    3c2c:	ad 57       	subi	r26, 0x7D	; 125
    3c2e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c30:	fe 01       	movw	r30, r28
    3c32:	ed 57       	subi	r30, 0x7D	; 125
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	80 81       	ld	r24, Z
    3c38:	91 81       	ldd	r25, Z+1	; 0x01
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	11 96       	adiw	r26, 0x01	; 1
    3c3e:	9c 93       	st	X, r25
    3c40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c42:	fe 01       	movw	r30, r28
    3c44:	ed 57       	subi	r30, 0x7D	; 125
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	80 81       	ld	r24, Z
    3c4a:	91 81       	ldd	r25, Z+1	; 0x01
    3c4c:	00 97       	sbiw	r24, 0x00	; 0
    3c4e:	d1 f6       	brne	.-76     	; 0x3c04 <main+0x1900>
    3c50:	27 c0       	rjmp	.+78     	; 0x3ca0 <main+0x199c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c52:	8e 01       	movw	r16, r28
    3c54:	0d 57       	subi	r16, 0x7D	; 125
    3c56:	1f 4f       	sbci	r17, 0xFF	; 255
    3c58:	fe 01       	movw	r30, r28
    3c5a:	eb 57       	subi	r30, 0x7B	; 123
    3c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5e:	60 81       	ld	r22, Z
    3c60:	71 81       	ldd	r23, Z+1	; 0x01
    3c62:	82 81       	ldd	r24, Z+2	; 0x02
    3c64:	93 81       	ldd	r25, Z+3	; 0x03
    3c66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	f8 01       	movw	r30, r16
    3c70:	91 83       	std	Z+1, r25	; 0x01
    3c72:	80 83       	st	Z, r24
    3c74:	de 01       	movw	r26, r28
    3c76:	a1 58       	subi	r26, 0x81	; 129
    3c78:	bf 4f       	sbci	r27, 0xFF	; 255
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	ed 57       	subi	r30, 0x7D	; 125
    3c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c80:	80 81       	ld	r24, Z
    3c82:	91 81       	ldd	r25, Z+1	; 0x01
    3c84:	8d 93       	st	X+, r24
    3c86:	9c 93       	st	X, r25
    3c88:	fe 01       	movw	r30, r28
    3c8a:	e1 58       	subi	r30, 0x81	; 129
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	80 81       	ld	r24, Z
    3c90:	91 81       	ldd	r25, Z+1	; 0x01
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	f1 f7       	brne	.-4      	; 0x3c92 <main+0x198e>
    3c96:	fe 01       	movw	r30, r28
    3c98:	e1 58       	subi	r30, 0x81	; 129
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	91 83       	std	Z+1, r25	; 0x01
    3c9e:	80 83       	st	Z, r24
																		_delay_ms(500);
																		LCD_SEND_COMMAND(0x01);
    3ca0:	81 e0       	ldi	r24, 0x01	; 1
    3ca2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
																		masterR=SPI_u8MasterTrancieve('9');
    3ca6:	89 e3       	ldi	r24, 0x39	; 57
    3ca8:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3cac:	fe 01       	movw	r30, r28
    3cae:	ec 5e       	subi	r30, 0xEC	; 236
    3cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    3cb2:	80 83       	st	Z, r24
															            LCD_VidSendStrig(" TV S:OFF");
    3cb4:	87 e9       	ldi	r24, 0x97	; 151
    3cb6:	91 e0       	ldi	r25, 0x01	; 1
    3cb8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
															            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3cbc:	82 e0       	ldi	r24, 0x02	; 2
    3cbe:	60 e0       	ldi	r22, 0x00	; 0
    3cc0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
															           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    3cc4:	84 ef       	ldi	r24, 0xF4	; 244
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
															        	//_delay_ms(100);
															        	masterR=SPI_u8MasterTrancieve('*');
    3ccc:	8a e2       	ldi	r24, 0x2A	; 42
    3cce:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	ec 5e       	subi	r30, 0xEC	; 236
    3cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd8:	80 83       	st	Z, r24
																		break;
													           		}
													           		if(FLAG2==0)
    3cda:	fe 01       	movw	r30, r28
    3cdc:	ef 5e       	subi	r30, 0xEF	; 239
    3cde:	fe 4f       	sbci	r31, 0xFE	; 254
    3ce0:	80 81       	ld	r24, Z
    3ce2:	88 23       	and	r24, r24
    3ce4:	09 f0       	breq	.+2      	; 0x3ce8 <main+0x19e4>
    3ce6:	8a ce       	rjmp	.-748    	; 0x39fc <main+0x16f8>
													           		{
													           			//FLAG TO RETURN TO PREVIOSE PAGE
													           			FLAG2=1;
    3ce8:	fe 01       	movw	r30, r28
    3cea:	ef 5e       	subi	r30, 0xEF	; 239
    3cec:	fe 4f       	sbci	r31, 0xFE	; 254
    3cee:	81 e0       	ldi	r24, 0x01	; 1
    3cf0:	80 83       	st	Z, r24
    3cf2:	7e c2       	rjmp	.+1276   	; 0x41f0 <main+0x1eec>
													           	}

												           	}
												           	break;
													case 3: //AIR COND
								           		         LCD_SEND_COMMAND(0x01);
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
								           		         LCD_VidSendStrig(" Air cond S:ON");
    3cfa:	8a ea       	ldi	r24, 0xAA	; 170
    3cfc:	91 e0       	ldi	r25, 0x01	; 1
    3cfe:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								           		         LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3d02:	82 e0       	ldi	r24, 0x02	; 2
    3d04:	60 e0       	ldi	r22, 0x00	; 0
    3d06:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
								           		         LCD_VidSendStrig("1:on 2:off 3:RET ");
    3d0a:	84 ef       	ldi	r24, 0xF4	; 244
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												           	while(1)
												           	{
													           	read3=0xFF;
    3d12:	fe 01       	movw	r30, r28
    3d14:	e5 5f       	subi	r30, 0xF5	; 245
    3d16:	fe 4f       	sbci	r31, 0xFE	; 254
    3d18:	8f ef       	ldi	r24, 0xFF	; 255
    3d1a:	80 83       	st	Z, r24
    3d1c:	06 c0       	rjmp	.+12     	; 0x3d2a <main+0x1a26>
																while(read3==0xFF)
																{
																	read3= KPD_u8GetPressedKey();
    3d1e:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    3d22:	fe 01       	movw	r30, r28
    3d24:	e5 5f       	subi	r30, 0xF5	; 245
    3d26:	fe 4f       	sbci	r31, 0xFE	; 254
    3d28:	80 83       	st	Z, r24
								           		         LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
								           		         LCD_VidSendStrig("1:on 2:off 3:RET ");
												           	while(1)
												           	{
													           	read3=0xFF;
																while(read3==0xFF)
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	e5 5f       	subi	r30, 0xF5	; 245
    3d2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d30:	80 81       	ld	r24, Z
    3d32:	8f 3f       	cpi	r24, 0xFF	; 255
    3d34:	a1 f3       	breq	.-24     	; 0x3d1e <main+0x1a1a>
																{
																	read3= KPD_u8GetPressedKey();
																}
													           	if(read3!=0xFF)
    3d36:	fe 01       	movw	r30, r28
    3d38:	e5 5f       	subi	r30, 0xF5	; 245
    3d3a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d3c:	80 81       	ld	r24, Z
    3d3e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d40:	41 f3       	breq	.-48     	; 0x3d12 <main+0x1a0e>
													           	{
													           		switch(read3)
    3d42:	fe 01       	movw	r30, r28
    3d44:	e5 5f       	subi	r30, 0xF5	; 245
    3d46:	fe 4f       	sbci	r31, 0xFE	; 254
    3d48:	80 81       	ld	r24, Z
    3d4a:	28 2f       	mov	r18, r24
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	c1 5e       	subi	r28, 0xE1	; 225
    3d50:	de 4f       	sbci	r29, 0xFE	; 254
    3d52:	39 83       	std	Y+1, r19	; 0x01
    3d54:	28 83       	st	Y, r18
    3d56:	cf 51       	subi	r28, 0x1F	; 31
    3d58:	d1 40       	sbci	r29, 0x01	; 1
    3d5a:	c1 5e       	subi	r28, 0xE1	; 225
    3d5c:	de 4f       	sbci	r29, 0xFE	; 254
    3d5e:	88 81       	ld	r24, Y
    3d60:	99 81       	ldd	r25, Y+1	; 0x01
    3d62:	cf 51       	subi	r28, 0x1F	; 31
    3d64:	d1 40       	sbci	r29, 0x01	; 1
    3d66:	82 30       	cpi	r24, 0x02	; 2
    3d68:	91 05       	cpc	r25, r1
    3d6a:	51 f1       	breq	.+84     	; 0x3dc0 <main+0x1abc>
    3d6c:	c1 5e       	subi	r28, 0xE1	; 225
    3d6e:	de 4f       	sbci	r29, 0xFE	; 254
    3d70:	e8 81       	ld	r30, Y
    3d72:	f9 81       	ldd	r31, Y+1	; 0x01
    3d74:	cf 51       	subi	r28, 0x1F	; 31
    3d76:	d1 40       	sbci	r29, 0x01	; 1
    3d78:	e3 30       	cpi	r30, 0x03	; 3
    3d7a:	f1 05       	cpc	r31, r1
    3d7c:	c1 f1       	breq	.+112    	; 0x3dee <main+0x1aea>
    3d7e:	c1 5e       	subi	r28, 0xE1	; 225
    3d80:	de 4f       	sbci	r29, 0xFE	; 254
    3d82:	28 81       	ld	r18, Y
    3d84:	39 81       	ldd	r19, Y+1	; 0x01
    3d86:	cf 51       	subi	r28, 0x1F	; 31
    3d88:	d1 40       	sbci	r29, 0x01	; 1
    3d8a:	21 30       	cpi	r18, 0x01	; 1
    3d8c:	31 05       	cpc	r19, r1
    3d8e:	09 f0       	breq	.+2      	; 0x3d92 <main+0x1a8e>
    3d90:	50 c0       	rjmp	.+160    	; 0x3e32 <main+0x1b2e>
													           		{
													           		case 1: //TURN IT ON
													           			    LCD_SEND_COMMAND(0x01);
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
											           			            masterR=SPI_u8MasterTrancieve('t'); //CONDITIONER will turn on
    3d98:	84 e7       	ldi	r24, 0x74	; 116
    3d9a:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3d9e:	fe 01       	movw	r30, r28
    3da0:	ec 5e       	subi	r30, 0xEC	; 236
    3da2:	fe 4f       	sbci	r31, 0xFE	; 254
    3da4:	80 83       	st	Z, r24
													           			    LCD_VidSendStrig(" Air cond S:ON");
    3da6:	8a ea       	ldi	r24, 0xAA	; 170
    3da8:	91 e0       	ldi	r25, 0x01	; 1
    3daa:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3dae:	82 e0       	ldi	r24, 0x02	; 2
    3db0:	60 e0       	ldi	r22, 0x00	; 0
    3db2:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
													           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    3db6:	84 ef       	ldi	r24, 0xF4	; 244
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    3dbe:	18 c1       	rjmp	.+560    	; 0x3ff0 <main+0x1cec>
													           	          //  _delay_ms(400);
													           			   break;
													           		case 2: //TURN IT OFF
													           			    LCD_SEND_COMMAND(0x01);
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
											           			            masterR=SPI_u8MasterTrancieve('m'); //CONDITIONER will turn oFF
    3dc6:	8d e6       	ldi	r24, 0x6D	; 109
    3dc8:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3dcc:	fe 01       	movw	r30, r28
    3dce:	ec 5e       	subi	r30, 0xEC	; 236
    3dd0:	fe 4f       	sbci	r31, 0xFE	; 254
    3dd2:	80 83       	st	Z, r24
											           			            LCD_VidSendStrig(" Air cond S:OFF");
    3dd4:	89 eb       	ldi	r24, 0xB9	; 185
    3dd6:	91 e0       	ldi	r25, 0x01	; 1
    3dd8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3ddc:	82 e0       	ldi	r24, 0x02	; 2
    3dde:	60 e0       	ldi	r22, 0x00	; 0
    3de0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
													           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    3de4:	84 ef       	ldi	r24, 0xF4	; 244
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    3dec:	01 c1       	rjmp	.+514    	; 0x3ff0 <main+0x1cec>
													           	            //_delay_ms(400);
													           			   break;
													           		case 3: //RETURN TO PRIVIOSE PAGE
													           			    LCD_SEND_COMMAND(0x01);
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
													           	          	masterR=SPI_u8MasterTrancieve('m');
    3df4:	8d e6       	ldi	r24, 0x6D	; 109
    3df6:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	ec 5e       	subi	r30, 0xEC	; 236
    3dfe:	fe 4f       	sbci	r31, 0xFE	; 254
    3e00:	80 83       	st	Z, r24
														                    LCD_VidSendStrig(" 1:Room4 2:TV");
    3e02:	8f e5       	ldi	r24, 0x5F	; 95
    3e04:	91 e0       	ldi	r25, 0x01	; 1
    3e06:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
														                    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3e0a:	82 e0       	ldi	r24, 0x02	; 2
    3e0c:	60 e0       	ldi	r22, 0x00	; 0
    3e0e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
														                	LCD_VidSendStrig("3:Air_COND 4:RET");
    3e12:	8d e6       	ldi	r24, 0x6D	; 109
    3e14:	91 e0       	ldi	r25, 0x01	; 1
    3e16:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
																        	masterR=SPI_u8MasterTrancieve('*');
    3e1a:	8a e2       	ldi	r24, 0x2A	; 42
    3e1c:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3e20:	fe 01       	movw	r30, r28
    3e22:	ec 5e       	subi	r30, 0xEC	; 236
    3e24:	fe 4f       	sbci	r31, 0xFE	; 254
    3e26:	80 83       	st	Z, r24
																        	FLAG2=0;
    3e28:	fe 01       	movw	r30, r28
    3e2a:	ef 5e       	subi	r30, 0xEF	; 239
    3e2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e2e:	10 82       	st	Z, r1
    3e30:	df c0       	rjmp	.+446    	; 0x3ff0 <main+0x1cec>
													           			   break;
																	default://WRONG ENTRY
																		LCD_SEND_COMMAND(0x01);
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
																		LCD_VidSendStrig(" wrong choice");
    3e38:	82 e1       	ldi	r24, 0x12	; 18
    3e3a:	91 e0       	ldi	r25, 0x01	; 1
    3e3c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
																	    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3e40:	82 e0       	ldi	r24, 0x02	; 2
    3e42:	60 e0       	ldi	r22, 0x00	; 0
    3e44:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
																		LCD_VidSendStrig("choose again");
    3e48:	80 e2       	ldi	r24, 0x20	; 32
    3e4a:	91 e0       	ldi	r25, 0x01	; 1
    3e4c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    3e50:	fe 01       	movw	r30, r28
    3e52:	e5 58       	subi	r30, 0x85	; 133
    3e54:	ff 4f       	sbci	r31, 0xFF	; 255
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	aa ef       	ldi	r26, 0xFA	; 250
    3e5c:	b3 e4       	ldi	r27, 0x43	; 67
    3e5e:	80 83       	st	Z, r24
    3e60:	91 83       	std	Z+1, r25	; 0x01
    3e62:	a2 83       	std	Z+2, r26	; 0x02
    3e64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e66:	8e 01       	movw	r16, r28
    3e68:	09 58       	subi	r16, 0x89	; 137
    3e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e6c:	fe 01       	movw	r30, r28
    3e6e:	e5 58       	subi	r30, 0x85	; 133
    3e70:	ff 4f       	sbci	r31, 0xFF	; 255
    3e72:	60 81       	ld	r22, Z
    3e74:	71 81       	ldd	r23, Z+1	; 0x01
    3e76:	82 81       	ldd	r24, Z+2	; 0x02
    3e78:	93 81       	ldd	r25, Z+3	; 0x03
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	4a e7       	ldi	r20, 0x7A	; 122
    3e80:	55 e4       	ldi	r21, 0x45	; 69
    3e82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e86:	dc 01       	movw	r26, r24
    3e88:	cb 01       	movw	r24, r22
    3e8a:	f8 01       	movw	r30, r16
    3e8c:	80 83       	st	Z, r24
    3e8e:	91 83       	std	Z+1, r25	; 0x01
    3e90:	a2 83       	std	Z+2, r26	; 0x02
    3e92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e94:	fe 01       	movw	r30, r28
    3e96:	e9 58       	subi	r30, 0x89	; 137
    3e98:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9a:	60 81       	ld	r22, Z
    3e9c:	71 81       	ldd	r23, Z+1	; 0x01
    3e9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ea0:	93 81       	ldd	r25, Z+3	; 0x03
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	40 e8       	ldi	r20, 0x80	; 128
    3ea8:	5f e3       	ldi	r21, 0x3F	; 63
    3eaa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3eae:	88 23       	and	r24, r24
    3eb0:	44 f4       	brge	.+16     	; 0x3ec2 <main+0x1bbe>
		__ticks = 1;
    3eb2:	fe 01       	movw	r30, r28
    3eb4:	eb 58       	subi	r30, 0x8B	; 139
    3eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb8:	81 e0       	ldi	r24, 0x01	; 1
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	91 83       	std	Z+1, r25	; 0x01
    3ebe:	80 83       	st	Z, r24
    3ec0:	64 c0       	rjmp	.+200    	; 0x3f8a <main+0x1c86>
	else if (__tmp > 65535)
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	e9 58       	subi	r30, 0x89	; 137
    3ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec8:	60 81       	ld	r22, Z
    3eca:	71 81       	ldd	r23, Z+1	; 0x01
    3ecc:	82 81       	ldd	r24, Z+2	; 0x02
    3ece:	93 81       	ldd	r25, Z+3	; 0x03
    3ed0:	20 e0       	ldi	r18, 0x00	; 0
    3ed2:	3f ef       	ldi	r19, 0xFF	; 255
    3ed4:	4f e7       	ldi	r20, 0x7F	; 127
    3ed6:	57 e4       	ldi	r21, 0x47	; 71
    3ed8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3edc:	18 16       	cp	r1, r24
    3ede:	0c f0       	brlt	.+2      	; 0x3ee2 <main+0x1bde>
    3ee0:	43 c0       	rjmp	.+134    	; 0x3f68 <main+0x1c64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	e5 58       	subi	r30, 0x85	; 133
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	60 81       	ld	r22, Z
    3eea:	71 81       	ldd	r23, Z+1	; 0x01
    3eec:	82 81       	ldd	r24, Z+2	; 0x02
    3eee:	93 81       	ldd	r25, Z+3	; 0x03
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	40 e2       	ldi	r20, 0x20	; 32
    3ef6:	51 e4       	ldi	r21, 0x41	; 65
    3ef8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3efc:	dc 01       	movw	r26, r24
    3efe:	cb 01       	movw	r24, r22
    3f00:	8e 01       	movw	r16, r28
    3f02:	0b 58       	subi	r16, 0x8B	; 139
    3f04:	1f 4f       	sbci	r17, 0xFF	; 255
    3f06:	bc 01       	movw	r22, r24
    3f08:	cd 01       	movw	r24, r26
    3f0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	f8 01       	movw	r30, r16
    3f14:	91 83       	std	Z+1, r25	; 0x01
    3f16:	80 83       	st	Z, r24
    3f18:	1f c0       	rjmp	.+62     	; 0x3f58 <main+0x1c54>
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	ed 58       	subi	r30, 0x8D	; 141
    3f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f20:	80 e9       	ldi	r24, 0x90	; 144
    3f22:	91 e0       	ldi	r25, 0x01	; 1
    3f24:	91 83       	std	Z+1, r25	; 0x01
    3f26:	80 83       	st	Z, r24
    3f28:	fe 01       	movw	r30, r28
    3f2a:	ed 58       	subi	r30, 0x8D	; 141
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	80 81       	ld	r24, Z
    3f30:	91 81       	ldd	r25, Z+1	; 0x01
    3f32:	01 97       	sbiw	r24, 0x01	; 1
    3f34:	f1 f7       	brne	.-4      	; 0x3f32 <main+0x1c2e>
    3f36:	fe 01       	movw	r30, r28
    3f38:	ed 58       	subi	r30, 0x8D	; 141
    3f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3c:	91 83       	std	Z+1, r25	; 0x01
    3f3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f40:	de 01       	movw	r26, r28
    3f42:	ab 58       	subi	r26, 0x8B	; 139
    3f44:	bf 4f       	sbci	r27, 0xFF	; 255
    3f46:	fe 01       	movw	r30, r28
    3f48:	eb 58       	subi	r30, 0x8B	; 139
    3f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4c:	80 81       	ld	r24, Z
    3f4e:	91 81       	ldd	r25, Z+1	; 0x01
    3f50:	01 97       	sbiw	r24, 0x01	; 1
    3f52:	11 96       	adiw	r26, 0x01	; 1
    3f54:	9c 93       	st	X, r25
    3f56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f58:	fe 01       	movw	r30, r28
    3f5a:	eb 58       	subi	r30, 0x8B	; 139
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	80 81       	ld	r24, Z
    3f60:	91 81       	ldd	r25, Z+1	; 0x01
    3f62:	00 97       	sbiw	r24, 0x00	; 0
    3f64:	d1 f6       	brne	.-76     	; 0x3f1a <main+0x1c16>
    3f66:	27 c0       	rjmp	.+78     	; 0x3fb6 <main+0x1cb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f68:	8e 01       	movw	r16, r28
    3f6a:	0b 58       	subi	r16, 0x8B	; 139
    3f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f6e:	fe 01       	movw	r30, r28
    3f70:	e9 58       	subi	r30, 0x89	; 137
    3f72:	ff 4f       	sbci	r31, 0xFF	; 255
    3f74:	60 81       	ld	r22, Z
    3f76:	71 81       	ldd	r23, Z+1	; 0x01
    3f78:	82 81       	ldd	r24, Z+2	; 0x02
    3f7a:	93 81       	ldd	r25, Z+3	; 0x03
    3f7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	f8 01       	movw	r30, r16
    3f86:	91 83       	std	Z+1, r25	; 0x01
    3f88:	80 83       	st	Z, r24
    3f8a:	de 01       	movw	r26, r28
    3f8c:	af 58       	subi	r26, 0x8F	; 143
    3f8e:	bf 4f       	sbci	r27, 0xFF	; 255
    3f90:	fe 01       	movw	r30, r28
    3f92:	eb 58       	subi	r30, 0x8B	; 139
    3f94:	ff 4f       	sbci	r31, 0xFF	; 255
    3f96:	80 81       	ld	r24, Z
    3f98:	91 81       	ldd	r25, Z+1	; 0x01
    3f9a:	8d 93       	st	X+, r24
    3f9c:	9c 93       	st	X, r25
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	ef 58       	subi	r30, 0x8F	; 143
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	80 81       	ld	r24, Z
    3fa6:	91 81       	ldd	r25, Z+1	; 0x01
    3fa8:	01 97       	sbiw	r24, 0x01	; 1
    3faa:	f1 f7       	brne	.-4      	; 0x3fa8 <main+0x1ca4>
    3fac:	fe 01       	movw	r30, r28
    3fae:	ef 58       	subi	r30, 0x8F	; 143
    3fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb2:	91 83       	std	Z+1, r25	; 0x01
    3fb4:	80 83       	st	Z, r24
																		_delay_ms(500);
																		LCD_SEND_COMMAND(0x01);
    3fb6:	81 e0       	ldi	r24, 0x01	; 1
    3fb8:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
																		masterR=SPI_u8MasterTrancieve('m');
    3fbc:	8d e6       	ldi	r24, 0x6D	; 109
    3fbe:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	ec 5e       	subi	r30, 0xEC	; 236
    3fc6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc8:	80 83       	st	Z, r24
															            LCD_VidSendStrig(" Air cond S:OFF");
    3fca:	89 eb       	ldi	r24, 0xB9	; 185
    3fcc:	91 e0       	ldi	r25, 0x01	; 1
    3fce:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
															            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    3fd2:	82 e0       	ldi	r24, 0x02	; 2
    3fd4:	60 e0       	ldi	r22, 0x00	; 0
    3fd6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
															           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    3fda:	84 ef       	ldi	r24, 0xF4	; 244
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
															           	masterR=SPI_u8MasterTrancieve('*');
    3fe2:	8a e2       	ldi	r24, 0x2A	; 42
    3fe4:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    3fe8:	fe 01       	movw	r30, r28
    3fea:	ec 5e       	subi	r30, 0xEC	; 236
    3fec:	fe 4f       	sbci	r31, 0xFE	; 254
    3fee:	80 83       	st	Z, r24
																		break;
													           		}
													           		if(FLAG2==0)
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	ef 5e       	subi	r30, 0xEF	; 239
    3ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ff6:	80 81       	ld	r24, Z
    3ff8:	88 23       	and	r24, r24
    3ffa:	09 f0       	breq	.+2      	; 0x3ffe <main+0x1cfa>
    3ffc:	8a ce       	rjmp	.-748    	; 0x3d12 <main+0x1a0e>
													           		{
													           			//FLAG TO RETURN
													           			FLAG2=1;
    3ffe:	fe 01       	movw	r30, r28
    4000:	ef 5e       	subi	r30, 0xEF	; 239
    4002:	fe 4f       	sbci	r31, 0xFE	; 254
    4004:	81 e0       	ldi	r24, 0x01	; 1
    4006:	80 83       	st	Z, r24
    4008:	f3 c0       	rjmp	.+486    	; 0x41f0 <main+0x1eec>
													           	}

												           	}
														 break;
													case 4 ://RET
									           		        LCD_SEND_COMMAND(0x01);
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
													        LCD_VidSendStrig(" 1:Room1 2:Room2");
    4010:	85 ec       	ldi	r24, 0xC5	; 197
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4018:	82 e0       	ldi	r24, 0x02	; 2
    401a:	60 e0       	ldi	r22, 0x00	; 0
    401c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
													        LCD_VidSendStrig("3:Room3 4:+ 0RET");
    4020:	86 ed       	ldi	r24, 0xD6	; 214
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									           		    	masterR=SPI_u8MasterTrancieve('*');
    4028:	8a e2       	ldi	r24, 0x2A	; 42
    402a:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    402e:	fe 01       	movw	r30, r28
    4030:	ec 5e       	subi	r30, 0xEC	; 236
    4032:	fe 4f       	sbci	r31, 0xFE	; 254
    4034:	80 83       	st	Z, r24
												        	FLAG3=0;
    4036:	fe 01       	movw	r30, r28
    4038:	e0 5f       	subi	r30, 0xF0	; 240
    403a:	fe 4f       	sbci	r31, 0xFE	; 254
    403c:	10 82       	st	Z, r1
    403e:	d8 c0       	rjmp	.+432    	; 0x41f0 <main+0x1eec>
												           	break;
													default://WRONG ENTERY
														LCD_SEND_COMMAND(0x01);
    4040:	81 e0       	ldi	r24, 0x01	; 1
    4042:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
														LCD_VidSendStrig(" wrong choice");
    4046:	82 e1       	ldi	r24, 0x12	; 18
    4048:	91 e0       	ldi	r25, 0x01	; 1
    404a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    404e:	82 e0       	ldi	r24, 0x02	; 2
    4050:	60 e0       	ldi	r22, 0x00	; 0
    4052:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
														LCD_VidSendStrig("choose again");
    4056:	80 e2       	ldi	r24, 0x20	; 32
    4058:	91 e0       	ldi	r25, 0x01	; 1
    405a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    405e:	fe 01       	movw	r30, r28
    4060:	e3 59       	subi	r30, 0x93	; 147
    4062:	ff 4f       	sbci	r31, 0xFF	; 255
    4064:	80 e0       	ldi	r24, 0x00	; 0
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	aa ef       	ldi	r26, 0xFA	; 250
    406a:	b3 e4       	ldi	r27, 0x43	; 67
    406c:	80 83       	st	Z, r24
    406e:	91 83       	std	Z+1, r25	; 0x01
    4070:	a2 83       	std	Z+2, r26	; 0x02
    4072:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4074:	8e 01       	movw	r16, r28
    4076:	07 59       	subi	r16, 0x97	; 151
    4078:	1f 4f       	sbci	r17, 0xFF	; 255
    407a:	fe 01       	movw	r30, r28
    407c:	e3 59       	subi	r30, 0x93	; 147
    407e:	ff 4f       	sbci	r31, 0xFF	; 255
    4080:	60 81       	ld	r22, Z
    4082:	71 81       	ldd	r23, Z+1	; 0x01
    4084:	82 81       	ldd	r24, Z+2	; 0x02
    4086:	93 81       	ldd	r25, Z+3	; 0x03
    4088:	20 e0       	ldi	r18, 0x00	; 0
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	4a e7       	ldi	r20, 0x7A	; 122
    408e:	55 e4       	ldi	r21, 0x45	; 69
    4090:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4094:	dc 01       	movw	r26, r24
    4096:	cb 01       	movw	r24, r22
    4098:	f8 01       	movw	r30, r16
    409a:	80 83       	st	Z, r24
    409c:	91 83       	std	Z+1, r25	; 0x01
    409e:	a2 83       	std	Z+2, r26	; 0x02
    40a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40a2:	fe 01       	movw	r30, r28
    40a4:	e7 59       	subi	r30, 0x97	; 151
    40a6:	ff 4f       	sbci	r31, 0xFF	; 255
    40a8:	60 81       	ld	r22, Z
    40aa:	71 81       	ldd	r23, Z+1	; 0x01
    40ac:	82 81       	ldd	r24, Z+2	; 0x02
    40ae:	93 81       	ldd	r25, Z+3	; 0x03
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	40 e8       	ldi	r20, 0x80	; 128
    40b6:	5f e3       	ldi	r21, 0x3F	; 63
    40b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    40bc:	88 23       	and	r24, r24
    40be:	44 f4       	brge	.+16     	; 0x40d0 <main+0x1dcc>
		__ticks = 1;
    40c0:	fe 01       	movw	r30, r28
    40c2:	e9 59       	subi	r30, 0x99	; 153
    40c4:	ff 4f       	sbci	r31, 0xFF	; 255
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	91 83       	std	Z+1, r25	; 0x01
    40cc:	80 83       	st	Z, r24
    40ce:	64 c0       	rjmp	.+200    	; 0x4198 <main+0x1e94>
	else if (__tmp > 65535)
    40d0:	fe 01       	movw	r30, r28
    40d2:	e7 59       	subi	r30, 0x97	; 151
    40d4:	ff 4f       	sbci	r31, 0xFF	; 255
    40d6:	60 81       	ld	r22, Z
    40d8:	71 81       	ldd	r23, Z+1	; 0x01
    40da:	82 81       	ldd	r24, Z+2	; 0x02
    40dc:	93 81       	ldd	r25, Z+3	; 0x03
    40de:	20 e0       	ldi	r18, 0x00	; 0
    40e0:	3f ef       	ldi	r19, 0xFF	; 255
    40e2:	4f e7       	ldi	r20, 0x7F	; 127
    40e4:	57 e4       	ldi	r21, 0x47	; 71
    40e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    40ea:	18 16       	cp	r1, r24
    40ec:	0c f0       	brlt	.+2      	; 0x40f0 <main+0x1dec>
    40ee:	43 c0       	rjmp	.+134    	; 0x4176 <main+0x1e72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40f0:	fe 01       	movw	r30, r28
    40f2:	e3 59       	subi	r30, 0x93	; 147
    40f4:	ff 4f       	sbci	r31, 0xFF	; 255
    40f6:	60 81       	ld	r22, Z
    40f8:	71 81       	ldd	r23, Z+1	; 0x01
    40fa:	82 81       	ldd	r24, Z+2	; 0x02
    40fc:	93 81       	ldd	r25, Z+3	; 0x03
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	40 e2       	ldi	r20, 0x20	; 32
    4104:	51 e4       	ldi	r21, 0x41	; 65
    4106:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    410a:	dc 01       	movw	r26, r24
    410c:	cb 01       	movw	r24, r22
    410e:	8e 01       	movw	r16, r28
    4110:	09 59       	subi	r16, 0x99	; 153
    4112:	1f 4f       	sbci	r17, 0xFF	; 255
    4114:	bc 01       	movw	r22, r24
    4116:	cd 01       	movw	r24, r26
    4118:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    411c:	dc 01       	movw	r26, r24
    411e:	cb 01       	movw	r24, r22
    4120:	f8 01       	movw	r30, r16
    4122:	91 83       	std	Z+1, r25	; 0x01
    4124:	80 83       	st	Z, r24
    4126:	1f c0       	rjmp	.+62     	; 0x4166 <main+0x1e62>
    4128:	fe 01       	movw	r30, r28
    412a:	eb 59       	subi	r30, 0x9B	; 155
    412c:	ff 4f       	sbci	r31, 0xFF	; 255
    412e:	80 e9       	ldi	r24, 0x90	; 144
    4130:	91 e0       	ldi	r25, 0x01	; 1
    4132:	91 83       	std	Z+1, r25	; 0x01
    4134:	80 83       	st	Z, r24
    4136:	fe 01       	movw	r30, r28
    4138:	eb 59       	subi	r30, 0x9B	; 155
    413a:	ff 4f       	sbci	r31, 0xFF	; 255
    413c:	80 81       	ld	r24, Z
    413e:	91 81       	ldd	r25, Z+1	; 0x01
    4140:	01 97       	sbiw	r24, 0x01	; 1
    4142:	f1 f7       	brne	.-4      	; 0x4140 <main+0x1e3c>
    4144:	fe 01       	movw	r30, r28
    4146:	eb 59       	subi	r30, 0x9B	; 155
    4148:	ff 4f       	sbci	r31, 0xFF	; 255
    414a:	91 83       	std	Z+1, r25	; 0x01
    414c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    414e:	de 01       	movw	r26, r28
    4150:	a9 59       	subi	r26, 0x99	; 153
    4152:	bf 4f       	sbci	r27, 0xFF	; 255
    4154:	fe 01       	movw	r30, r28
    4156:	e9 59       	subi	r30, 0x99	; 153
    4158:	ff 4f       	sbci	r31, 0xFF	; 255
    415a:	80 81       	ld	r24, Z
    415c:	91 81       	ldd	r25, Z+1	; 0x01
    415e:	01 97       	sbiw	r24, 0x01	; 1
    4160:	11 96       	adiw	r26, 0x01	; 1
    4162:	9c 93       	st	X, r25
    4164:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4166:	fe 01       	movw	r30, r28
    4168:	e9 59       	subi	r30, 0x99	; 153
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	80 81       	ld	r24, Z
    416e:	91 81       	ldd	r25, Z+1	; 0x01
    4170:	00 97       	sbiw	r24, 0x00	; 0
    4172:	d1 f6       	brne	.-76     	; 0x4128 <main+0x1e24>
    4174:	27 c0       	rjmp	.+78     	; 0x41c4 <main+0x1ec0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4176:	8e 01       	movw	r16, r28
    4178:	09 59       	subi	r16, 0x99	; 153
    417a:	1f 4f       	sbci	r17, 0xFF	; 255
    417c:	fe 01       	movw	r30, r28
    417e:	e7 59       	subi	r30, 0x97	; 151
    4180:	ff 4f       	sbci	r31, 0xFF	; 255
    4182:	60 81       	ld	r22, Z
    4184:	71 81       	ldd	r23, Z+1	; 0x01
    4186:	82 81       	ldd	r24, Z+2	; 0x02
    4188:	93 81       	ldd	r25, Z+3	; 0x03
    418a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    418e:	dc 01       	movw	r26, r24
    4190:	cb 01       	movw	r24, r22
    4192:	f8 01       	movw	r30, r16
    4194:	91 83       	std	Z+1, r25	; 0x01
    4196:	80 83       	st	Z, r24
    4198:	de 01       	movw	r26, r28
    419a:	ad 59       	subi	r26, 0x9D	; 157
    419c:	bf 4f       	sbci	r27, 0xFF	; 255
    419e:	fe 01       	movw	r30, r28
    41a0:	e9 59       	subi	r30, 0x99	; 153
    41a2:	ff 4f       	sbci	r31, 0xFF	; 255
    41a4:	80 81       	ld	r24, Z
    41a6:	91 81       	ldd	r25, Z+1	; 0x01
    41a8:	8d 93       	st	X+, r24
    41aa:	9c 93       	st	X, r25
    41ac:	fe 01       	movw	r30, r28
    41ae:	ed 59       	subi	r30, 0x9D	; 157
    41b0:	ff 4f       	sbci	r31, 0xFF	; 255
    41b2:	80 81       	ld	r24, Z
    41b4:	91 81       	ldd	r25, Z+1	; 0x01
    41b6:	01 97       	sbiw	r24, 0x01	; 1
    41b8:	f1 f7       	brne	.-4      	; 0x41b6 <main+0x1eb2>
    41ba:	fe 01       	movw	r30, r28
    41bc:	ed 59       	subi	r30, 0x9D	; 157
    41be:	ff 4f       	sbci	r31, 0xFF	; 255
    41c0:	91 83       	std	Z+1, r25	; 0x01
    41c2:	80 83       	st	Z, r24
														_delay_ms(500);
														LCD_SEND_COMMAND(0x01);
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
														masterR=SPI_u8MasterTrancieve('*');
    41ca:	8a e2       	ldi	r24, 0x2A	; 42
    41cc:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    41d0:	fe 01       	movw	r30, r28
    41d2:	ec 5e       	subi	r30, 0xEC	; 236
    41d4:	fe 4f       	sbci	r31, 0xFE	; 254
    41d6:	80 83       	st	Z, r24
											            LCD_VidSendStrig(" 1:Room4 2:TV");
    41d8:	8f e5       	ldi	r24, 0x5F	; 95
    41da:	91 e0       	ldi	r25, 0x01	; 1
    41dc:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
											            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    41e0:	82 e0       	ldi	r24, 0x02	; 2
    41e2:	60 e0       	ldi	r22, 0x00	; 0
    41e4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
											           	LCD_VidSendStrig("3:Air_COND 4:RET");
    41e8:	8d e6       	ldi	r24, 0x6D	; 109
    41ea:	91 e0       	ldi	r25, 0x01	; 1
    41ec:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
														break;


													}
									           		if(FLAG3==0)
    41f0:	fe 01       	movw	r30, r28
    41f2:	e0 5f       	subi	r30, 0xF0	; 240
    41f4:	fe 4f       	sbci	r31, 0xFE	; 254
    41f6:	80 81       	ld	r24, Z
    41f8:	88 23       	and	r24, r24
    41fa:	09 f0       	breq	.+2      	; 0x41fe <main+0x1efa>
    41fc:	0f ca       	rjmp	.-3042   	; 0x361c <main+0x1318>
									           		{
									           			//FLAG TO RETURN
									           			FLAG3=1;
    41fe:	fe 01       	movw	r30, r28
    4200:	e0 5f       	subi	r30, 0xF0	; 240
    4202:	fe 4f       	sbci	r31, 0xFE	; 254
    4204:	81 e0       	ldi	r24, 0x01	; 1
    4206:	80 83       	st	Z, r24
    4208:	ec c0       	rjmp	.+472    	; 0x43e2 <main+0x20de>
											}


								           	break;
									case'0': //IF HE WANT TO RETURN TO MODE SELECT PAGE
										    LCD_SEND_COMMAND(0x01);
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
										    LCD_VidSendStrig(" SELECT MODE");
    4210:	87 ea       	ldi	r24, 0xA7	; 167
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4218:	82 e0       	ldi	r24, 0x02	; 2
    421a:	60 e0       	ldi	r22, 0x00	; 0
    421c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									        LCD_VidSendStrig("0:Admin 1:Guest ");
    4220:	84 eb       	ldi	r24, 0xB4	; 180
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									        masterR=SPI_u8MasterTrancieve('*');
    4228:	8a e2       	ldi	r24, 0x2A	; 42
    422a:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    422e:	fe 01       	movw	r30, r28
    4230:	ec 5e       	subi	r30, 0xEC	; 236
    4232:	fe 4f       	sbci	r31, 0xFE	; 254
    4234:	80 83       	st	Z, r24
										    FLAG4=0;
    4236:	fe 01       	movw	r30, r28
    4238:	e1 5f       	subi	r30, 0xF1	; 241
    423a:	fe 4f       	sbci	r31, 0xFE	; 254
    423c:	10 82       	st	Z, r1
    423e:	d1 c0       	rjmp	.+418    	; 0x43e2 <main+0x20de>
									        break;
									default: //WRONG ENTERY
										LCD_SEND_COMMAND(0x01);
    4240:	81 e0       	ldi	r24, 0x01	; 1
    4242:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
										LCD_VidSendStrig(" wrong choice");
    4246:	82 e1       	ldi	r24, 0x12	; 18
    4248:	91 e0       	ldi	r25, 0x01	; 1
    424a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    424e:	82 e0       	ldi	r24, 0x02	; 2
    4250:	60 e0       	ldi	r22, 0x00	; 0
    4252:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
										LCD_VidSendStrig("choose again");
    4256:	80 e2       	ldi	r24, 0x20	; 32
    4258:	91 e0       	ldi	r25, 0x01	; 1
    425a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    425e:	fe 01       	movw	r30, r28
    4260:	e1 5a       	subi	r30, 0xA1	; 161
    4262:	ff 4f       	sbci	r31, 0xFF	; 255
    4264:	80 e0       	ldi	r24, 0x00	; 0
    4266:	90 e0       	ldi	r25, 0x00	; 0
    4268:	aa ef       	ldi	r26, 0xFA	; 250
    426a:	b3 e4       	ldi	r27, 0x43	; 67
    426c:	80 83       	st	Z, r24
    426e:	91 83       	std	Z+1, r25	; 0x01
    4270:	a2 83       	std	Z+2, r26	; 0x02
    4272:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4274:	8e 01       	movw	r16, r28
    4276:	05 5a       	subi	r16, 0xA5	; 165
    4278:	1f 4f       	sbci	r17, 0xFF	; 255
    427a:	fe 01       	movw	r30, r28
    427c:	e1 5a       	subi	r30, 0xA1	; 161
    427e:	ff 4f       	sbci	r31, 0xFF	; 255
    4280:	60 81       	ld	r22, Z
    4282:	71 81       	ldd	r23, Z+1	; 0x01
    4284:	82 81       	ldd	r24, Z+2	; 0x02
    4286:	93 81       	ldd	r25, Z+3	; 0x03
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	30 e0       	ldi	r19, 0x00	; 0
    428c:	4a e7       	ldi	r20, 0x7A	; 122
    428e:	55 e4       	ldi	r21, 0x45	; 69
    4290:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4294:	dc 01       	movw	r26, r24
    4296:	cb 01       	movw	r24, r22
    4298:	f8 01       	movw	r30, r16
    429a:	80 83       	st	Z, r24
    429c:	91 83       	std	Z+1, r25	; 0x01
    429e:	a2 83       	std	Z+2, r26	; 0x02
    42a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42a2:	fe 01       	movw	r30, r28
    42a4:	e5 5a       	subi	r30, 0xA5	; 165
    42a6:	ff 4f       	sbci	r31, 0xFF	; 255
    42a8:	60 81       	ld	r22, Z
    42aa:	71 81       	ldd	r23, Z+1	; 0x01
    42ac:	82 81       	ldd	r24, Z+2	; 0x02
    42ae:	93 81       	ldd	r25, Z+3	; 0x03
    42b0:	20 e0       	ldi	r18, 0x00	; 0
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	40 e8       	ldi	r20, 0x80	; 128
    42b6:	5f e3       	ldi	r21, 0x3F	; 63
    42b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    42bc:	88 23       	and	r24, r24
    42be:	44 f4       	brge	.+16     	; 0x42d0 <main+0x1fcc>
		__ticks = 1;
    42c0:	fe 01       	movw	r30, r28
    42c2:	e7 5a       	subi	r30, 0xA7	; 167
    42c4:	ff 4f       	sbci	r31, 0xFF	; 255
    42c6:	81 e0       	ldi	r24, 0x01	; 1
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	91 83       	std	Z+1, r25	; 0x01
    42cc:	80 83       	st	Z, r24
    42ce:	64 c0       	rjmp	.+200    	; 0x4398 <main+0x2094>
	else if (__tmp > 65535)
    42d0:	fe 01       	movw	r30, r28
    42d2:	e5 5a       	subi	r30, 0xA5	; 165
    42d4:	ff 4f       	sbci	r31, 0xFF	; 255
    42d6:	60 81       	ld	r22, Z
    42d8:	71 81       	ldd	r23, Z+1	; 0x01
    42da:	82 81       	ldd	r24, Z+2	; 0x02
    42dc:	93 81       	ldd	r25, Z+3	; 0x03
    42de:	20 e0       	ldi	r18, 0x00	; 0
    42e0:	3f ef       	ldi	r19, 0xFF	; 255
    42e2:	4f e7       	ldi	r20, 0x7F	; 127
    42e4:	57 e4       	ldi	r21, 0x47	; 71
    42e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    42ea:	18 16       	cp	r1, r24
    42ec:	0c f0       	brlt	.+2      	; 0x42f0 <main+0x1fec>
    42ee:	43 c0       	rjmp	.+134    	; 0x4376 <main+0x2072>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f0:	fe 01       	movw	r30, r28
    42f2:	e1 5a       	subi	r30, 0xA1	; 161
    42f4:	ff 4f       	sbci	r31, 0xFF	; 255
    42f6:	60 81       	ld	r22, Z
    42f8:	71 81       	ldd	r23, Z+1	; 0x01
    42fa:	82 81       	ldd	r24, Z+2	; 0x02
    42fc:	93 81       	ldd	r25, Z+3	; 0x03
    42fe:	20 e0       	ldi	r18, 0x00	; 0
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	40 e2       	ldi	r20, 0x20	; 32
    4304:	51 e4       	ldi	r21, 0x41	; 65
    4306:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    430a:	dc 01       	movw	r26, r24
    430c:	cb 01       	movw	r24, r22
    430e:	8e 01       	movw	r16, r28
    4310:	07 5a       	subi	r16, 0xA7	; 167
    4312:	1f 4f       	sbci	r17, 0xFF	; 255
    4314:	bc 01       	movw	r22, r24
    4316:	cd 01       	movw	r24, r26
    4318:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    431c:	dc 01       	movw	r26, r24
    431e:	cb 01       	movw	r24, r22
    4320:	f8 01       	movw	r30, r16
    4322:	91 83       	std	Z+1, r25	; 0x01
    4324:	80 83       	st	Z, r24
    4326:	1f c0       	rjmp	.+62     	; 0x4366 <main+0x2062>
    4328:	fe 01       	movw	r30, r28
    432a:	e9 5a       	subi	r30, 0xA9	; 169
    432c:	ff 4f       	sbci	r31, 0xFF	; 255
    432e:	80 e9       	ldi	r24, 0x90	; 144
    4330:	91 e0       	ldi	r25, 0x01	; 1
    4332:	91 83       	std	Z+1, r25	; 0x01
    4334:	80 83       	st	Z, r24
    4336:	fe 01       	movw	r30, r28
    4338:	e9 5a       	subi	r30, 0xA9	; 169
    433a:	ff 4f       	sbci	r31, 0xFF	; 255
    433c:	80 81       	ld	r24, Z
    433e:	91 81       	ldd	r25, Z+1	; 0x01
    4340:	01 97       	sbiw	r24, 0x01	; 1
    4342:	f1 f7       	brne	.-4      	; 0x4340 <main+0x203c>
    4344:	fe 01       	movw	r30, r28
    4346:	e9 5a       	subi	r30, 0xA9	; 169
    4348:	ff 4f       	sbci	r31, 0xFF	; 255
    434a:	91 83       	std	Z+1, r25	; 0x01
    434c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    434e:	de 01       	movw	r26, r28
    4350:	a7 5a       	subi	r26, 0xA7	; 167
    4352:	bf 4f       	sbci	r27, 0xFF	; 255
    4354:	fe 01       	movw	r30, r28
    4356:	e7 5a       	subi	r30, 0xA7	; 167
    4358:	ff 4f       	sbci	r31, 0xFF	; 255
    435a:	80 81       	ld	r24, Z
    435c:	91 81       	ldd	r25, Z+1	; 0x01
    435e:	01 97       	sbiw	r24, 0x01	; 1
    4360:	11 96       	adiw	r26, 0x01	; 1
    4362:	9c 93       	st	X, r25
    4364:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4366:	fe 01       	movw	r30, r28
    4368:	e7 5a       	subi	r30, 0xA7	; 167
    436a:	ff 4f       	sbci	r31, 0xFF	; 255
    436c:	80 81       	ld	r24, Z
    436e:	91 81       	ldd	r25, Z+1	; 0x01
    4370:	00 97       	sbiw	r24, 0x00	; 0
    4372:	d1 f6       	brne	.-76     	; 0x4328 <main+0x2024>
    4374:	27 c0       	rjmp	.+78     	; 0x43c4 <main+0x20c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4376:	8e 01       	movw	r16, r28
    4378:	07 5a       	subi	r16, 0xA7	; 167
    437a:	1f 4f       	sbci	r17, 0xFF	; 255
    437c:	fe 01       	movw	r30, r28
    437e:	e5 5a       	subi	r30, 0xA5	; 165
    4380:	ff 4f       	sbci	r31, 0xFF	; 255
    4382:	60 81       	ld	r22, Z
    4384:	71 81       	ldd	r23, Z+1	; 0x01
    4386:	82 81       	ldd	r24, Z+2	; 0x02
    4388:	93 81       	ldd	r25, Z+3	; 0x03
    438a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    438e:	dc 01       	movw	r26, r24
    4390:	cb 01       	movw	r24, r22
    4392:	f8 01       	movw	r30, r16
    4394:	91 83       	std	Z+1, r25	; 0x01
    4396:	80 83       	st	Z, r24
    4398:	de 01       	movw	r26, r28
    439a:	ab 5a       	subi	r26, 0xAB	; 171
    439c:	bf 4f       	sbci	r27, 0xFF	; 255
    439e:	fe 01       	movw	r30, r28
    43a0:	e7 5a       	subi	r30, 0xA7	; 167
    43a2:	ff 4f       	sbci	r31, 0xFF	; 255
    43a4:	80 81       	ld	r24, Z
    43a6:	91 81       	ldd	r25, Z+1	; 0x01
    43a8:	8d 93       	st	X+, r24
    43aa:	9c 93       	st	X, r25
    43ac:	fe 01       	movw	r30, r28
    43ae:	eb 5a       	subi	r30, 0xAB	; 171
    43b0:	ff 4f       	sbci	r31, 0xFF	; 255
    43b2:	80 81       	ld	r24, Z
    43b4:	91 81       	ldd	r25, Z+1	; 0x01
    43b6:	01 97       	sbiw	r24, 0x01	; 1
    43b8:	f1 f7       	brne	.-4      	; 0x43b6 <main+0x20b2>
    43ba:	fe 01       	movw	r30, r28
    43bc:	eb 5a       	subi	r30, 0xAB	; 171
    43be:	ff 4f       	sbci	r31, 0xFF	; 255
    43c0:	91 83       	std	Z+1, r25	; 0x01
    43c2:	80 83       	st	Z, r24
										_delay_ms(500);
										LCD_SEND_COMMAND(0x01);
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									    LCD_VidSendStrig(" 1:Room1 2:Room2");
    43ca:	85 ec       	ldi	r24, 0xC5	; 197
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    43d2:	82 e0       	ldi	r24, 0x02	; 2
    43d4:	60 e0       	ldi	r22, 0x00	; 0
    43d6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									    LCD_VidSendStrig("3:Room3 4:+ 0RET");
    43da:	86 ed       	ldi	r24, 0xD6	; 214
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										break;

									}
								}
						  		if(FLAG4==0)
    43e2:	fe 01       	movw	r30, r28
    43e4:	e1 5f       	subi	r30, 0xF1	; 241
    43e6:	fe 4f       	sbci	r31, 0xFE	; 254
    43e8:	80 81       	ld	r24, Z
    43ea:	88 23       	and	r24, r24
    43ec:	11 f0       	breq	.+4      	; 0x43f2 <main+0x20ee>
    43ee:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <main+0x352>
						       		{
						  			    //FLAG TO RETURN TO PRIVIOSE PAGE
						       			FLAG4=1;
    43f2:	fe 01       	movw	r30, r28
    43f4:	e1 5f       	subi	r30, 0xF1	; 241
    43f6:	fe 4f       	sbci	r31, 0xFE	; 254
    43f8:	81 e0       	ldi	r24, 0x01	; 1
    43fa:	80 83       	st	Z, r24
    43fc:	53 c7       	rjmp	.+3750   	; 0x52a4 <main+0x2fa0>
						       		}

							}

						}
						else if(read==1)
    43fe:	fe 01       	movw	r30, r28
    4400:	e3 5f       	subi	r30, 0xF3	; 243
    4402:	fe 4f       	sbci	r31, 0xFE	; 254
    4404:	80 81       	ld	r24, Z
    4406:	81 30       	cpi	r24, 0x01	; 1
    4408:	09 f0       	breq	.+2      	; 0x440c <main+0x2108>
    440a:	a4 c6       	rjmp	.+3400   	; 0x5154 <main+0x2e50>
						{
							//*************************************GUEST MODE**************************************
							LCD_SEND_COMMAND(0x01);
    440c:	81 e0       	ldi	r24, 0x01	; 1
    440e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
						    LCD_VidSendStrig(" 1:Room1 2:Room2");
    4412:	85 ec       	ldi	r24, 0xC5	; 197
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
						    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    441a:	82 e0       	ldi	r24, 0x02	; 2
    441c:	60 e0       	ldi	r22, 0x00	; 0
    441e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
							LCD_VidSendStrig("3:Room3 4:ROOM4 0 ");
    4422:	89 ec       	ldi	r24, 0xC9	; 201
    4424:	91 e0       	ldi	r25, 0x01	; 1
    4426:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
							while(1)
							{
								read2=0xFF;
    442a:	fe 01       	movw	r30, r28
    442c:	e4 5f       	subi	r30, 0xF4	; 244
    442e:	fe 4f       	sbci	r31, 0xFE	; 254
    4430:	8f ef       	ldi	r24, 0xFF	; 255
    4432:	80 83       	st	Z, r24
    4434:	06 c0       	rjmp	.+12     	; 0x4442 <main+0x213e>
								while(read2==0xFF)
								{
									read2= KPD_u8GetPressedKey();
    4436:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    443a:	fe 01       	movw	r30, r28
    443c:	e4 5f       	subi	r30, 0xF4	; 244
    443e:	fe 4f       	sbci	r31, 0xFE	; 254
    4440:	80 83       	st	Z, r24
						    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
							LCD_VidSendStrig("3:Room3 4:ROOM4 0 ");
							while(1)
							{
								read2=0xFF;
								while(read2==0xFF)
    4442:	fe 01       	movw	r30, r28
    4444:	e4 5f       	subi	r30, 0xF4	; 244
    4446:	fe 4f       	sbci	r31, 0xFE	; 254
    4448:	80 81       	ld	r24, Z
    444a:	8f 3f       	cpi	r24, 0xFF	; 255
    444c:	a1 f3       	breq	.-24     	; 0x4436 <main+0x2132>
								{
									read2= KPD_u8GetPressedKey();
								}
								if(read2!=0xFF)
    444e:	fe 01       	movw	r30, r28
    4450:	e4 5f       	subi	r30, 0xF4	; 244
    4452:	fe 4f       	sbci	r31, 0xFE	; 254
    4454:	80 81       	ld	r24, Z
    4456:	8f 3f       	cpi	r24, 0xFF	; 255
    4458:	09 f4       	brne	.+2      	; 0x445c <main+0x2158>
    445a:	6f c6       	rjmp	.+3294   	; 0x513a <main+0x2e36>
								{
									switch(read2)
    445c:	fe 01       	movw	r30, r28
    445e:	e4 5f       	subi	r30, 0xF4	; 244
    4460:	fe 4f       	sbci	r31, 0xFE	; 254
    4462:	80 81       	ld	r24, Z
    4464:	28 2f       	mov	r18, r24
    4466:	30 e0       	ldi	r19, 0x00	; 0
    4468:	c3 5e       	subi	r28, 0xE3	; 227
    446a:	de 4f       	sbci	r29, 0xFE	; 254
    446c:	39 83       	std	Y+1, r19	; 0x01
    446e:	28 83       	st	Y, r18
    4470:	cd 51       	subi	r28, 0x1D	; 29
    4472:	d1 40       	sbci	r29, 0x01	; 1
    4474:	c3 5e       	subi	r28, 0xE3	; 227
    4476:	de 4f       	sbci	r29, 0xFE	; 254
    4478:	88 81       	ld	r24, Y
    447a:	99 81       	ldd	r25, Y+1	; 0x01
    447c:	cd 51       	subi	r28, 0x1D	; 29
    447e:	d1 40       	sbci	r29, 0x01	; 1
    4480:	83 30       	cpi	r24, 0x03	; 3
    4482:	91 05       	cpc	r25, r1
    4484:	09 f4       	brne	.+2      	; 0x4488 <main+0x2184>
    4486:	1a c3       	rjmp	.+1588   	; 0x4abc <main+0x27b8>
    4488:	c3 5e       	subi	r28, 0xE3	; 227
    448a:	de 4f       	sbci	r29, 0xFE	; 254
    448c:	e8 81       	ld	r30, Y
    448e:	f9 81       	ldd	r31, Y+1	; 0x01
    4490:	cd 51       	subi	r28, 0x1D	; 29
    4492:	d1 40       	sbci	r29, 0x01	; 1
    4494:	e4 30       	cpi	r30, 0x04	; 4
    4496:	f1 05       	cpc	r31, r1
    4498:	a4 f4       	brge	.+40     	; 0x44c2 <main+0x21be>
    449a:	c3 5e       	subi	r28, 0xE3	; 227
    449c:	de 4f       	sbci	r29, 0xFE	; 254
    449e:	28 81       	ld	r18, Y
    44a0:	39 81       	ldd	r19, Y+1	; 0x01
    44a2:	cd 51       	subi	r28, 0x1D	; 29
    44a4:	d1 40       	sbci	r29, 0x01	; 1
    44a6:	21 30       	cpi	r18, 0x01	; 1
    44a8:	31 05       	cpc	r19, r1
    44aa:	01 f1       	breq	.+64     	; 0x44ec <main+0x21e8>
    44ac:	c3 5e       	subi	r28, 0xE3	; 227
    44ae:	de 4f       	sbci	r29, 0xFE	; 254
    44b0:	88 81       	ld	r24, Y
    44b2:	99 81       	ldd	r25, Y+1	; 0x01
    44b4:	cd 51       	subi	r28, 0x1D	; 29
    44b6:	d1 40       	sbci	r29, 0x01	; 1
    44b8:	82 30       	cpi	r24, 0x02	; 2
    44ba:	91 05       	cpc	r25, r1
    44bc:	09 f4       	brne	.+2      	; 0x44c0 <main+0x21bc>
    44be:	a1 c1       	rjmp	.+834    	; 0x4802 <main+0x24fe>
    44c0:	ac c5       	rjmp	.+2904   	; 0x501a <main+0x2d16>
    44c2:	c3 5e       	subi	r28, 0xE3	; 227
    44c4:	de 4f       	sbci	r29, 0xFE	; 254
    44c6:	e8 81       	ld	r30, Y
    44c8:	f9 81       	ldd	r31, Y+1	; 0x01
    44ca:	cd 51       	subi	r28, 0x1D	; 29
    44cc:	d1 40       	sbci	r29, 0x01	; 1
    44ce:	e4 30       	cpi	r30, 0x04	; 4
    44d0:	f1 05       	cpc	r31, r1
    44d2:	09 f4       	brne	.+2      	; 0x44d6 <main+0x21d2>
    44d4:	3d c4       	rjmp	.+2170   	; 0x4d50 <main+0x2a4c>
    44d6:	c3 5e       	subi	r28, 0xE3	; 227
    44d8:	de 4f       	sbci	r29, 0xFE	; 254
    44da:	28 81       	ld	r18, Y
    44dc:	39 81       	ldd	r19, Y+1	; 0x01
    44de:	cd 51       	subi	r28, 0x1D	; 29
    44e0:	d1 40       	sbci	r29, 0x01	; 1
    44e2:	20 33       	cpi	r18, 0x30	; 48
    44e4:	31 05       	cpc	r19, r1
    44e6:	09 f4       	brne	.+2      	; 0x44ea <main+0x21e6>
    44e8:	7d c5       	rjmp	.+2810   	; 0x4fe4 <main+0x2ce0>
    44ea:	97 c5       	rjmp	.+2862   	; 0x501a <main+0x2d16>
									{
									case 1 ://ROOM1
										    LCD_SEND_COMMAND(0x01);
    44ec:	81 e0       	ldi	r24, 0x01	; 1
    44ee:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
								            LCD_VidSendStrig(" Room1 S:OFF");
    44f2:	87 ee       	ldi	r24, 0xE7	; 231
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    44fa:	82 e0       	ldi	r24, 0x02	; 2
    44fc:	60 e0       	ldi	r22, 0x00	; 0
    44fe:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
								           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    4502:	84 ef       	ldi	r24, 0xF4	; 244
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								           	while(1)
								           	{
									           	read3=0xFF;
    450a:	fe 01       	movw	r30, r28
    450c:	e5 5f       	subi	r30, 0xF5	; 245
    450e:	fe 4f       	sbci	r31, 0xFE	; 254
    4510:	8f ef       	ldi	r24, 0xFF	; 255
    4512:	80 83       	st	Z, r24
    4514:	06 c0       	rjmp	.+12     	; 0x4522 <main+0x221e>
												while(read3==0xFF)
												{
													read3= KPD_u8GetPressedKey();
    4516:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    451a:	fe 01       	movw	r30, r28
    451c:	e5 5f       	subi	r30, 0xF5	; 245
    451e:	fe 4f       	sbci	r31, 0xFE	; 254
    4520:	80 83       	st	Z, r24
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
								           	LCD_VidSendStrig("1:on 2:off 3:RET ");
								           	while(1)
								           	{
									           	read3=0xFF;
												while(read3==0xFF)
    4522:	fe 01       	movw	r30, r28
    4524:	e5 5f       	subi	r30, 0xF5	; 245
    4526:	fe 4f       	sbci	r31, 0xFE	; 254
    4528:	80 81       	ld	r24, Z
    452a:	8f 3f       	cpi	r24, 0xFF	; 255
    452c:	a1 f3       	breq	.-24     	; 0x4516 <main+0x2212>
												{
													read3= KPD_u8GetPressedKey();
												}
									           	if(read3!=0xFF)
    452e:	fe 01       	movw	r30, r28
    4530:	e5 5f       	subi	r30, 0xF5	; 245
    4532:	fe 4f       	sbci	r31, 0xFE	; 254
    4534:	80 81       	ld	r24, Z
    4536:	8f 3f       	cpi	r24, 0xFF	; 255
    4538:	41 f3       	breq	.-48     	; 0x450a <main+0x2206>
									           	{
									           		switch(read3)
    453a:	fe 01       	movw	r30, r28
    453c:	e5 5f       	subi	r30, 0xF5	; 245
    453e:	fe 4f       	sbci	r31, 0xFE	; 254
    4540:	80 81       	ld	r24, Z
    4542:	e8 2f       	mov	r30, r24
    4544:	f0 e0       	ldi	r31, 0x00	; 0
    4546:	c5 5e       	subi	r28, 0xE5	; 229
    4548:	de 4f       	sbci	r29, 0xFE	; 254
    454a:	f9 83       	std	Y+1, r31	; 0x01
    454c:	e8 83       	st	Y, r30
    454e:	cb 51       	subi	r28, 0x1B	; 27
    4550:	d1 40       	sbci	r29, 0x01	; 1
    4552:	c5 5e       	subi	r28, 0xE5	; 229
    4554:	de 4f       	sbci	r29, 0xFE	; 254
    4556:	28 81       	ld	r18, Y
    4558:	39 81       	ldd	r19, Y+1	; 0x01
    455a:	cb 51       	subi	r28, 0x1B	; 27
    455c:	d1 40       	sbci	r29, 0x01	; 1
    455e:	22 30       	cpi	r18, 0x02	; 2
    4560:	31 05       	cpc	r19, r1
    4562:	51 f1       	breq	.+84     	; 0x45b8 <main+0x22b4>
    4564:	c5 5e       	subi	r28, 0xE5	; 229
    4566:	de 4f       	sbci	r29, 0xFE	; 254
    4568:	88 81       	ld	r24, Y
    456a:	99 81       	ldd	r25, Y+1	; 0x01
    456c:	cb 51       	subi	r28, 0x1B	; 27
    456e:	d1 40       	sbci	r29, 0x01	; 1
    4570:	83 30       	cpi	r24, 0x03	; 3
    4572:	91 05       	cpc	r25, r1
    4574:	c1 f1       	breq	.+112    	; 0x45e6 <main+0x22e2>
    4576:	c5 5e       	subi	r28, 0xE5	; 229
    4578:	de 4f       	sbci	r29, 0xFE	; 254
    457a:	e8 81       	ld	r30, Y
    457c:	f9 81       	ldd	r31, Y+1	; 0x01
    457e:	cb 51       	subi	r28, 0x1B	; 27
    4580:	d1 40       	sbci	r29, 0x01	; 1
    4582:	e1 30       	cpi	r30, 0x01	; 1
    4584:	f1 05       	cpc	r31, r1
    4586:	09 f0       	breq	.+2      	; 0x458a <main+0x2286>
    4588:	50 c0       	rjmp	.+160    	; 0x462a <main+0x2326>
									           		{
									           		case 1: //TURN IT ON
									           			    LCD_SEND_COMMAND(0x01);
    458a:	81 e0       	ldi	r24, 0x01	; 1
    458c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							           			            masterR=SPI_u8MasterTrancieve('O'); //room1 will turn on
    4590:	8f e4       	ldi	r24, 0x4F	; 79
    4592:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4596:	fe 01       	movw	r30, r28
    4598:	ec 5e       	subi	r30, 0xEC	; 236
    459a:	fe 4f       	sbci	r31, 0xFE	; 254
    459c:	80 83       	st	Z, r24
									           			    LCD_VidSendStrig(" Room1 S:ON");
    459e:	86 e0       	ldi	r24, 0x06	; 6
    45a0:	91 e0       	ldi	r25, 0x01	; 1
    45a2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    45a6:	82 e0       	ldi	r24, 0x02	; 2
    45a8:	60 e0       	ldi	r22, 0x00	; 0
    45aa:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    45ae:	84 ef       	ldi	r24, 0xF4	; 244
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    45b6:	18 c1       	rjmp	.+560    	; 0x47e8 <main+0x24e4>

									           			   break;
									           		case 2://TURN IT OFF
									           			    LCD_SEND_COMMAND(0x01);
    45b8:	81 e0       	ldi	r24, 0x01	; 1
    45ba:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							           			            masterR=SPI_u8MasterTrancieve('F'); //room1 will turn oFF
    45be:	86 e4       	ldi	r24, 0x46	; 70
    45c0:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    45c4:	fe 01       	movw	r30, r28
    45c6:	ec 5e       	subi	r30, 0xEC	; 236
    45c8:	fe 4f       	sbci	r31, 0xFE	; 254
    45ca:	80 83       	st	Z, r24
									           			    LCD_VidSendStrig(" Room1 S:OFF");
    45cc:	87 ee       	ldi	r24, 0xE7	; 231
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    45d4:	82 e0       	ldi	r24, 0x02	; 2
    45d6:	60 e0       	ldi	r22, 0x00	; 0
    45d8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									                        LCD_VidSendStrig("1:on 2:off 3:RET ");
    45dc:	84 ef       	ldi	r24, 0xF4	; 244
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    45e4:	01 c1       	rjmp	.+514    	; 0x47e8 <main+0x24e4>

									           			   break;
									           		case 3: //RETURN
									           			    LCD_SEND_COMMAND(0x01);
    45e6:	81 e0       	ldi	r24, 0x01	; 1
    45e8:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									           		    	masterR=SPI_u8MasterTrancieve('F');
    45ec:	86 e4       	ldi	r24, 0x46	; 70
    45ee:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    45f2:	fe 01       	movw	r30, r28
    45f4:	ec 5e       	subi	r30, 0xEC	; 236
    45f6:	fe 4f       	sbci	r31, 0xFE	; 254
    45f8:	80 83       	st	Z, r24
												            LCD_VidSendStrig(" 1:Room1 2:Room2");
    45fa:	85 ec       	ldi	r24, 0xC5	; 197
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4602:	82 e0       	ldi	r24, 0x02	; 2
    4604:	60 e0       	ldi	r22, 0x00	; 0
    4606:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												            LCD_VidSendStrig("3:Room3 4:ROOM4");
    460a:	8c ed       	ldi	r24, 0xDC	; 220
    460c:	91 e0       	ldi	r25, 0x01	; 1
    460e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												        	masterR=SPI_u8MasterTrancieve('*');
    4612:	8a e2       	ldi	r24, 0x2A	; 42
    4614:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4618:	fe 01       	movw	r30, r28
    461a:	ec 5e       	subi	r30, 0xEC	; 236
    461c:	fe 4f       	sbci	r31, 0xFE	; 254
    461e:	80 83       	st	Z, r24
												        	FLAG=0;
    4620:	fe 01       	movw	r30, r28
    4622:	ee 5e       	subi	r30, 0xEE	; 238
    4624:	fe 4f       	sbci	r31, 0xFE	; 254
    4626:	10 82       	st	Z, r1
    4628:	df c0       	rjmp	.+446    	; 0x47e8 <main+0x24e4>
									           			   break;
													default: //WRONG ENTERY
														LCD_SEND_COMMAND(0x01);
    462a:	81 e0       	ldi	r24, 0x01	; 1
    462c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
														LCD_VidSendStrig(" wrong choice");
    4630:	82 e1       	ldi	r24, 0x12	; 18
    4632:	91 e0       	ldi	r25, 0x01	; 1
    4634:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4638:	82 e0       	ldi	r24, 0x02	; 2
    463a:	60 e0       	ldi	r22, 0x00	; 0
    463c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
														LCD_VidSendStrig("choose again");
    4640:	80 e2       	ldi	r24, 0x20	; 32
    4642:	91 e0       	ldi	r25, 0x01	; 1
    4644:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    4648:	fe 01       	movw	r30, r28
    464a:	ef 5a       	subi	r30, 0xAF	; 175
    464c:	ff 4f       	sbci	r31, 0xFF	; 255
    464e:	80 e0       	ldi	r24, 0x00	; 0
    4650:	90 e0       	ldi	r25, 0x00	; 0
    4652:	aa ef       	ldi	r26, 0xFA	; 250
    4654:	b3 e4       	ldi	r27, 0x43	; 67
    4656:	80 83       	st	Z, r24
    4658:	91 83       	std	Z+1, r25	; 0x01
    465a:	a2 83       	std	Z+2, r26	; 0x02
    465c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    465e:	8e 01       	movw	r16, r28
    4660:	03 5b       	subi	r16, 0xB3	; 179
    4662:	1f 4f       	sbci	r17, 0xFF	; 255
    4664:	fe 01       	movw	r30, r28
    4666:	ef 5a       	subi	r30, 0xAF	; 175
    4668:	ff 4f       	sbci	r31, 0xFF	; 255
    466a:	60 81       	ld	r22, Z
    466c:	71 81       	ldd	r23, Z+1	; 0x01
    466e:	82 81       	ldd	r24, Z+2	; 0x02
    4670:	93 81       	ldd	r25, Z+3	; 0x03
    4672:	20 e0       	ldi	r18, 0x00	; 0
    4674:	30 e0       	ldi	r19, 0x00	; 0
    4676:	4a e7       	ldi	r20, 0x7A	; 122
    4678:	55 e4       	ldi	r21, 0x45	; 69
    467a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    467e:	dc 01       	movw	r26, r24
    4680:	cb 01       	movw	r24, r22
    4682:	f8 01       	movw	r30, r16
    4684:	80 83       	st	Z, r24
    4686:	91 83       	std	Z+1, r25	; 0x01
    4688:	a2 83       	std	Z+2, r26	; 0x02
    468a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    468c:	fe 01       	movw	r30, r28
    468e:	e3 5b       	subi	r30, 0xB3	; 179
    4690:	ff 4f       	sbci	r31, 0xFF	; 255
    4692:	60 81       	ld	r22, Z
    4694:	71 81       	ldd	r23, Z+1	; 0x01
    4696:	82 81       	ldd	r24, Z+2	; 0x02
    4698:	93 81       	ldd	r25, Z+3	; 0x03
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	40 e8       	ldi	r20, 0x80	; 128
    46a0:	5f e3       	ldi	r21, 0x3F	; 63
    46a2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    46a6:	88 23       	and	r24, r24
    46a8:	44 f4       	brge	.+16     	; 0x46ba <main+0x23b6>
		__ticks = 1;
    46aa:	fe 01       	movw	r30, r28
    46ac:	e5 5b       	subi	r30, 0xB5	; 181
    46ae:	ff 4f       	sbci	r31, 0xFF	; 255
    46b0:	81 e0       	ldi	r24, 0x01	; 1
    46b2:	90 e0       	ldi	r25, 0x00	; 0
    46b4:	91 83       	std	Z+1, r25	; 0x01
    46b6:	80 83       	st	Z, r24
    46b8:	64 c0       	rjmp	.+200    	; 0x4782 <main+0x247e>
	else if (__tmp > 65535)
    46ba:	fe 01       	movw	r30, r28
    46bc:	e3 5b       	subi	r30, 0xB3	; 179
    46be:	ff 4f       	sbci	r31, 0xFF	; 255
    46c0:	60 81       	ld	r22, Z
    46c2:	71 81       	ldd	r23, Z+1	; 0x01
    46c4:	82 81       	ldd	r24, Z+2	; 0x02
    46c6:	93 81       	ldd	r25, Z+3	; 0x03
    46c8:	20 e0       	ldi	r18, 0x00	; 0
    46ca:	3f ef       	ldi	r19, 0xFF	; 255
    46cc:	4f e7       	ldi	r20, 0x7F	; 127
    46ce:	57 e4       	ldi	r21, 0x47	; 71
    46d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    46d4:	18 16       	cp	r1, r24
    46d6:	0c f0       	brlt	.+2      	; 0x46da <main+0x23d6>
    46d8:	43 c0       	rjmp	.+134    	; 0x4760 <main+0x245c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46da:	fe 01       	movw	r30, r28
    46dc:	ef 5a       	subi	r30, 0xAF	; 175
    46de:	ff 4f       	sbci	r31, 0xFF	; 255
    46e0:	60 81       	ld	r22, Z
    46e2:	71 81       	ldd	r23, Z+1	; 0x01
    46e4:	82 81       	ldd	r24, Z+2	; 0x02
    46e6:	93 81       	ldd	r25, Z+3	; 0x03
    46e8:	20 e0       	ldi	r18, 0x00	; 0
    46ea:	30 e0       	ldi	r19, 0x00	; 0
    46ec:	40 e2       	ldi	r20, 0x20	; 32
    46ee:	51 e4       	ldi	r21, 0x41	; 65
    46f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    46f4:	dc 01       	movw	r26, r24
    46f6:	cb 01       	movw	r24, r22
    46f8:	8e 01       	movw	r16, r28
    46fa:	05 5b       	subi	r16, 0xB5	; 181
    46fc:	1f 4f       	sbci	r17, 0xFF	; 255
    46fe:	bc 01       	movw	r22, r24
    4700:	cd 01       	movw	r24, r26
    4702:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4706:	dc 01       	movw	r26, r24
    4708:	cb 01       	movw	r24, r22
    470a:	f8 01       	movw	r30, r16
    470c:	91 83       	std	Z+1, r25	; 0x01
    470e:	80 83       	st	Z, r24
    4710:	1f c0       	rjmp	.+62     	; 0x4750 <main+0x244c>
    4712:	fe 01       	movw	r30, r28
    4714:	e7 5b       	subi	r30, 0xB7	; 183
    4716:	ff 4f       	sbci	r31, 0xFF	; 255
    4718:	80 e9       	ldi	r24, 0x90	; 144
    471a:	91 e0       	ldi	r25, 0x01	; 1
    471c:	91 83       	std	Z+1, r25	; 0x01
    471e:	80 83       	st	Z, r24
    4720:	fe 01       	movw	r30, r28
    4722:	e7 5b       	subi	r30, 0xB7	; 183
    4724:	ff 4f       	sbci	r31, 0xFF	; 255
    4726:	80 81       	ld	r24, Z
    4728:	91 81       	ldd	r25, Z+1	; 0x01
    472a:	01 97       	sbiw	r24, 0x01	; 1
    472c:	f1 f7       	brne	.-4      	; 0x472a <main+0x2426>
    472e:	fe 01       	movw	r30, r28
    4730:	e7 5b       	subi	r30, 0xB7	; 183
    4732:	ff 4f       	sbci	r31, 0xFF	; 255
    4734:	91 83       	std	Z+1, r25	; 0x01
    4736:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4738:	de 01       	movw	r26, r28
    473a:	a5 5b       	subi	r26, 0xB5	; 181
    473c:	bf 4f       	sbci	r27, 0xFF	; 255
    473e:	fe 01       	movw	r30, r28
    4740:	e5 5b       	subi	r30, 0xB5	; 181
    4742:	ff 4f       	sbci	r31, 0xFF	; 255
    4744:	80 81       	ld	r24, Z
    4746:	91 81       	ldd	r25, Z+1	; 0x01
    4748:	01 97       	sbiw	r24, 0x01	; 1
    474a:	11 96       	adiw	r26, 0x01	; 1
    474c:	9c 93       	st	X, r25
    474e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4750:	fe 01       	movw	r30, r28
    4752:	e5 5b       	subi	r30, 0xB5	; 181
    4754:	ff 4f       	sbci	r31, 0xFF	; 255
    4756:	80 81       	ld	r24, Z
    4758:	91 81       	ldd	r25, Z+1	; 0x01
    475a:	00 97       	sbiw	r24, 0x00	; 0
    475c:	d1 f6       	brne	.-76     	; 0x4712 <main+0x240e>
    475e:	27 c0       	rjmp	.+78     	; 0x47ae <main+0x24aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4760:	8e 01       	movw	r16, r28
    4762:	05 5b       	subi	r16, 0xB5	; 181
    4764:	1f 4f       	sbci	r17, 0xFF	; 255
    4766:	fe 01       	movw	r30, r28
    4768:	e3 5b       	subi	r30, 0xB3	; 179
    476a:	ff 4f       	sbci	r31, 0xFF	; 255
    476c:	60 81       	ld	r22, Z
    476e:	71 81       	ldd	r23, Z+1	; 0x01
    4770:	82 81       	ldd	r24, Z+2	; 0x02
    4772:	93 81       	ldd	r25, Z+3	; 0x03
    4774:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4778:	dc 01       	movw	r26, r24
    477a:	cb 01       	movw	r24, r22
    477c:	f8 01       	movw	r30, r16
    477e:	91 83       	std	Z+1, r25	; 0x01
    4780:	80 83       	st	Z, r24
    4782:	de 01       	movw	r26, r28
    4784:	a9 5b       	subi	r26, 0xB9	; 185
    4786:	bf 4f       	sbci	r27, 0xFF	; 255
    4788:	fe 01       	movw	r30, r28
    478a:	e5 5b       	subi	r30, 0xB5	; 181
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	80 81       	ld	r24, Z
    4790:	91 81       	ldd	r25, Z+1	; 0x01
    4792:	8d 93       	st	X+, r24
    4794:	9c 93       	st	X, r25
    4796:	fe 01       	movw	r30, r28
    4798:	e9 5b       	subi	r30, 0xB9	; 185
    479a:	ff 4f       	sbci	r31, 0xFF	; 255
    479c:	80 81       	ld	r24, Z
    479e:	91 81       	ldd	r25, Z+1	; 0x01
    47a0:	01 97       	sbiw	r24, 0x01	; 1
    47a2:	f1 f7       	brne	.-4      	; 0x47a0 <main+0x249c>
    47a4:	fe 01       	movw	r30, r28
    47a6:	e9 5b       	subi	r30, 0xB9	; 185
    47a8:	ff 4f       	sbci	r31, 0xFF	; 255
    47aa:	91 83       	std	Z+1, r25	; 0x01
    47ac:	80 83       	st	Z, r24
														_delay_ms(500);
														LCD_SEND_COMMAND(0x01);
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
														masterR=SPI_u8MasterTrancieve('F');
    47b4:	86 e4       	ldi	r24, 0x46	; 70
    47b6:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    47ba:	fe 01       	movw	r30, r28
    47bc:	ec 5e       	subi	r30, 0xEC	; 236
    47be:	fe 4f       	sbci	r31, 0xFE	; 254
    47c0:	80 83       	st	Z, r24
											        	//_delay_ms(100);
											        	masterR=SPI_u8MasterTrancieve('*');
    47c2:	8a e2       	ldi	r24, 0x2A	; 42
    47c4:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    47c8:	fe 01       	movw	r30, r28
    47ca:	ec 5e       	subi	r30, 0xEC	; 236
    47cc:	fe 4f       	sbci	r31, 0xFE	; 254
    47ce:	80 83       	st	Z, r24
											            LCD_VidSendStrig(" Room1 S:OFF");
    47d0:	87 ee       	ldi	r24, 0xE7	; 231
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
											            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    47d8:	82 e0       	ldi	r24, 0x02	; 2
    47da:	60 e0       	ldi	r22, 0x00	; 0
    47dc:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
											           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    47e0:	84 ef       	ldi	r24, 0xF4	; 244
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
														break;



									           		}
									           		if(FLAG==0)
    47e8:	fe 01       	movw	r30, r28
    47ea:	ee 5e       	subi	r30, 0xEE	; 238
    47ec:	fe 4f       	sbci	r31, 0xFE	; 254
    47ee:	80 81       	ld	r24, Z
    47f0:	88 23       	and	r24, r24
    47f2:	09 f0       	breq	.+2      	; 0x47f6 <main+0x24f2>
    47f4:	8a ce       	rjmp	.-748    	; 0x450a <main+0x2206>
									           		{
									           			//FLAG TO RETURN
									           			FLAG=1;
    47f6:	fe 01       	movw	r30, r28
    47f8:	ee 5e       	subi	r30, 0xEE	; 238
    47fa:	fe 4f       	sbci	r31, 0xFE	; 254
    47fc:	81 e0       	ldi	r24, 0x01	; 1
    47fe:	80 83       	st	Z, r24
    4800:	9c c4       	rjmp	.+2360   	; 0x513a <main+0x2e36>
									           	}

								           	}
								           	break;
									case 2 ://ROOM2
										    LCD_SEND_COMMAND(0x01);
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
								            LCD_VidSendStrig(" Room2 S:OFF");
    4808:	8d e2       	ldi	r24, 0x2D	; 45
    480a:	91 e0       	ldi	r25, 0x01	; 1
    480c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4810:	82 e0       	ldi	r24, 0x02	; 2
    4812:	60 e0       	ldi	r22, 0x00	; 0
    4814:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
								           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    4818:	84 ef       	ldi	r24, 0xF4	; 244
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								           	while(1)
								           	{
									           	read3=0xFF;
    4820:	fe 01       	movw	r30, r28
    4822:	e5 5f       	subi	r30, 0xF5	; 245
    4824:	fe 4f       	sbci	r31, 0xFE	; 254
    4826:	8f ef       	ldi	r24, 0xFF	; 255
    4828:	80 83       	st	Z, r24
    482a:	06 c0       	rjmp	.+12     	; 0x4838 <main+0x2534>
												while(read3==0xFF)
												{
													read3= KPD_u8GetPressedKey();
    482c:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    4830:	fe 01       	movw	r30, r28
    4832:	e5 5f       	subi	r30, 0xF5	; 245
    4834:	fe 4f       	sbci	r31, 0xFE	; 254
    4836:	80 83       	st	Z, r24
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
								           	LCD_VidSendStrig("1:on 2:off 3:RET ");
								           	while(1)
								           	{
									           	read3=0xFF;
												while(read3==0xFF)
    4838:	fe 01       	movw	r30, r28
    483a:	e5 5f       	subi	r30, 0xF5	; 245
    483c:	fe 4f       	sbci	r31, 0xFE	; 254
    483e:	80 81       	ld	r24, Z
    4840:	8f 3f       	cpi	r24, 0xFF	; 255
    4842:	a1 f3       	breq	.-24     	; 0x482c <main+0x2528>
												{
													read3= KPD_u8GetPressedKey();
												}
									           	if(read3!=0xFF)
    4844:	fe 01       	movw	r30, r28
    4846:	e5 5f       	subi	r30, 0xF5	; 245
    4848:	fe 4f       	sbci	r31, 0xFE	; 254
    484a:	80 81       	ld	r24, Z
    484c:	8f 3f       	cpi	r24, 0xFF	; 255
    484e:	41 f3       	breq	.-48     	; 0x4820 <main+0x251c>
									           	{
									           		switch(read3)
    4850:	fe 01       	movw	r30, r28
    4852:	e5 5f       	subi	r30, 0xF5	; 245
    4854:	fe 4f       	sbci	r31, 0xFE	; 254
    4856:	80 81       	ld	r24, Z
    4858:	28 2f       	mov	r18, r24
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	c7 5e       	subi	r28, 0xE7	; 231
    485e:	de 4f       	sbci	r29, 0xFE	; 254
    4860:	39 83       	std	Y+1, r19	; 0x01
    4862:	28 83       	st	Y, r18
    4864:	c9 51       	subi	r28, 0x19	; 25
    4866:	d1 40       	sbci	r29, 0x01	; 1
    4868:	c7 5e       	subi	r28, 0xE7	; 231
    486a:	de 4f       	sbci	r29, 0xFE	; 254
    486c:	88 81       	ld	r24, Y
    486e:	99 81       	ldd	r25, Y+1	; 0x01
    4870:	c9 51       	subi	r28, 0x19	; 25
    4872:	d1 40       	sbci	r29, 0x01	; 1
    4874:	82 30       	cpi	r24, 0x02	; 2
    4876:	91 05       	cpc	r25, r1
    4878:	51 f1       	breq	.+84     	; 0x48ce <main+0x25ca>
    487a:	c7 5e       	subi	r28, 0xE7	; 231
    487c:	de 4f       	sbci	r29, 0xFE	; 254
    487e:	e8 81       	ld	r30, Y
    4880:	f9 81       	ldd	r31, Y+1	; 0x01
    4882:	c9 51       	subi	r28, 0x19	; 25
    4884:	d1 40       	sbci	r29, 0x01	; 1
    4886:	e3 30       	cpi	r30, 0x03	; 3
    4888:	f1 05       	cpc	r31, r1
    488a:	c1 f1       	breq	.+112    	; 0x48fc <main+0x25f8>
    488c:	c7 5e       	subi	r28, 0xE7	; 231
    488e:	de 4f       	sbci	r29, 0xFE	; 254
    4890:	28 81       	ld	r18, Y
    4892:	39 81       	ldd	r19, Y+1	; 0x01
    4894:	c9 51       	subi	r28, 0x19	; 25
    4896:	d1 40       	sbci	r29, 0x01	; 1
    4898:	21 30       	cpi	r18, 0x01	; 1
    489a:	31 05       	cpc	r19, r1
    489c:	09 f0       	breq	.+2      	; 0x48a0 <main+0x259c>
    489e:	50 c0       	rjmp	.+160    	; 0x4940 <main+0x263c>
									           		{
									           		case 1: //TURN IT ON
									           			    LCD_SEND_COMMAND(0x01);
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							           			            masterR=SPI_u8MasterTrancieve('2'); //room2 will turn on
    48a6:	82 e3       	ldi	r24, 0x32	; 50
    48a8:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    48ac:	fe 01       	movw	r30, r28
    48ae:	ec 5e       	subi	r30, 0xEC	; 236
    48b0:	fe 4f       	sbci	r31, 0xFE	; 254
    48b2:	80 83       	st	Z, r24
									           			    LCD_VidSendStrig(" Room2 S:ON");
    48b4:	8a e3       	ldi	r24, 0x3A	; 58
    48b6:	91 e0       	ldi	r25, 0x01	; 1
    48b8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    48bc:	82 e0       	ldi	r24, 0x02	; 2
    48be:	60 e0       	ldi	r22, 0x00	; 0
    48c0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    48c4:	84 ef       	ldi	r24, 0xF4	; 244
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    48cc:	ea c0       	rjmp	.+468    	; 0x4aa2 <main+0x279e>
									           	            //_delay_ms(400);
									           			   break;
									           		case 2://TURN IT OFF
									           			   LCD_SEND_COMMAND(0x01);
    48ce:	81 e0       	ldi	r24, 0x01	; 1
    48d0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							           			            masterR=SPI_u8MasterTrancieve('3'); //room1 will turn off
    48d4:	83 e3       	ldi	r24, 0x33	; 51
    48d6:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    48da:	fe 01       	movw	r30, r28
    48dc:	ec 5e       	subi	r30, 0xEC	; 236
    48de:	fe 4f       	sbci	r31, 0xFE	; 254
    48e0:	80 83       	st	Z, r24
									           			    LCD_VidSendStrig(" Room2 S:OFF");
    48e2:	8d e2       	ldi	r24, 0x2D	; 45
    48e4:	91 e0       	ldi	r25, 0x01	; 1
    48e6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    48ea:	82 e0       	ldi	r24, 0x02	; 2
    48ec:	60 e0       	ldi	r22, 0x00	; 0
    48ee:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    48f2:	84 ef       	ldi	r24, 0xF4	; 244
    48f4:	90 e0       	ldi	r25, 0x00	; 0
    48f6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    48fa:	d3 c0       	rjmp	.+422    	; 0x4aa2 <main+0x279e>
									           	            //_delay_ms(400);
									           			   break;
									           		case 3: //RETURN
									           			    LCD_SEND_COMMAND(0x01);
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									           			    masterR=SPI_u8MasterTrancieve('3');
    4902:	83 e3       	ldi	r24, 0x33	; 51
    4904:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4908:	fe 01       	movw	r30, r28
    490a:	ec 5e       	subi	r30, 0xEC	; 236
    490c:	fe 4f       	sbci	r31, 0xFE	; 254
    490e:	80 83       	st	Z, r24
												            LCD_VidSendStrig(" 1:Room1 2:Room2");
    4910:	85 ec       	ldi	r24, 0xC5	; 197
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4918:	82 e0       	ldi	r24, 0x02	; 2
    491a:	60 e0       	ldi	r22, 0x00	; 0
    491c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												            LCD_VidSendStrig("3:Room3 4:Room4 ");
    4920:	8c ee       	ldi	r24, 0xEC	; 236
    4922:	91 e0       	ldi	r25, 0x01	; 1
    4924:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												        	masterR=SPI_u8MasterTrancieve('*');
    4928:	8a e2       	ldi	r24, 0x2A	; 42
    492a:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    492e:	fe 01       	movw	r30, r28
    4930:	ec 5e       	subi	r30, 0xEC	; 236
    4932:	fe 4f       	sbci	r31, 0xFE	; 254
    4934:	80 83       	st	Z, r24
												        	FLAG=0;
    4936:	fe 01       	movw	r30, r28
    4938:	ee 5e       	subi	r30, 0xEE	; 238
    493a:	fe 4f       	sbci	r31, 0xFE	; 254
    493c:	10 82       	st	Z, r1
    493e:	b1 c0       	rjmp	.+354    	; 0x4aa2 <main+0x279e>
									           			   break;
													default://WRONG ENTERY
														LCD_SEND_COMMAND(0x01);
    4940:	81 e0       	ldi	r24, 0x01	; 1
    4942:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
														LCD_VidSendStrig(" wrong choice");
    4946:	82 e1       	ldi	r24, 0x12	; 18
    4948:	91 e0       	ldi	r25, 0x01	; 1
    494a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    494e:	82 e0       	ldi	r24, 0x02	; 2
    4950:	60 e0       	ldi	r22, 0x00	; 0
    4952:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
														LCD_VidSendStrig("choose again");
    4956:	80 e2       	ldi	r24, 0x20	; 32
    4958:	91 e0       	ldi	r25, 0x01	; 1
    495a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    495e:	fe 01       	movw	r30, r28
    4960:	ed 5b       	subi	r30, 0xBD	; 189
    4962:	ff 4f       	sbci	r31, 0xFF	; 255
    4964:	80 e0       	ldi	r24, 0x00	; 0
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	aa ef       	ldi	r26, 0xFA	; 250
    496a:	b3 e4       	ldi	r27, 0x43	; 67
    496c:	80 83       	st	Z, r24
    496e:	91 83       	std	Z+1, r25	; 0x01
    4970:	a2 83       	std	Z+2, r26	; 0x02
    4972:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4974:	8e 01       	movw	r16, r28
    4976:	01 5c       	subi	r16, 0xC1	; 193
    4978:	1f 4f       	sbci	r17, 0xFF	; 255
    497a:	fe 01       	movw	r30, r28
    497c:	ed 5b       	subi	r30, 0xBD	; 189
    497e:	ff 4f       	sbci	r31, 0xFF	; 255
    4980:	60 81       	ld	r22, Z
    4982:	71 81       	ldd	r23, Z+1	; 0x01
    4984:	82 81       	ldd	r24, Z+2	; 0x02
    4986:	93 81       	ldd	r25, Z+3	; 0x03
    4988:	20 e0       	ldi	r18, 0x00	; 0
    498a:	30 e0       	ldi	r19, 0x00	; 0
    498c:	4a e7       	ldi	r20, 0x7A	; 122
    498e:	55 e4       	ldi	r21, 0x45	; 69
    4990:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4994:	dc 01       	movw	r26, r24
    4996:	cb 01       	movw	r24, r22
    4998:	f8 01       	movw	r30, r16
    499a:	80 83       	st	Z, r24
    499c:	91 83       	std	Z+1, r25	; 0x01
    499e:	a2 83       	std	Z+2, r26	; 0x02
    49a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49a2:	fe 01       	movw	r30, r28
    49a4:	ff 96       	adiw	r30, 0x3f	; 63
    49a6:	60 81       	ld	r22, Z
    49a8:	71 81       	ldd	r23, Z+1	; 0x01
    49aa:	82 81       	ldd	r24, Z+2	; 0x02
    49ac:	93 81       	ldd	r25, Z+3	; 0x03
    49ae:	20 e0       	ldi	r18, 0x00	; 0
    49b0:	30 e0       	ldi	r19, 0x00	; 0
    49b2:	40 e8       	ldi	r20, 0x80	; 128
    49b4:	5f e3       	ldi	r21, 0x3F	; 63
    49b6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    49ba:	88 23       	and	r24, r24
    49bc:	2c f4       	brge	.+10     	; 0x49c8 <main+0x26c4>
		__ticks = 1;
    49be:	81 e0       	ldi	r24, 0x01	; 1
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	9e af       	std	Y+62, r25	; 0x3e
    49c4:	8d af       	std	Y+61, r24	; 0x3d
    49c6:	46 c0       	rjmp	.+140    	; 0x4a54 <main+0x2750>
	else if (__tmp > 65535)
    49c8:	fe 01       	movw	r30, r28
    49ca:	ff 96       	adiw	r30, 0x3f	; 63
    49cc:	60 81       	ld	r22, Z
    49ce:	71 81       	ldd	r23, Z+1	; 0x01
    49d0:	82 81       	ldd	r24, Z+2	; 0x02
    49d2:	93 81       	ldd	r25, Z+3	; 0x03
    49d4:	20 e0       	ldi	r18, 0x00	; 0
    49d6:	3f ef       	ldi	r19, 0xFF	; 255
    49d8:	4f e7       	ldi	r20, 0x7F	; 127
    49da:	57 e4       	ldi	r21, 0x47	; 71
    49dc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    49e0:	18 16       	cp	r1, r24
    49e2:	64 f5       	brge	.+88     	; 0x4a3c <main+0x2738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49e4:	fe 01       	movw	r30, r28
    49e6:	ed 5b       	subi	r30, 0xBD	; 189
    49e8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ea:	60 81       	ld	r22, Z
    49ec:	71 81       	ldd	r23, Z+1	; 0x01
    49ee:	82 81       	ldd	r24, Z+2	; 0x02
    49f0:	93 81       	ldd	r25, Z+3	; 0x03
    49f2:	20 e0       	ldi	r18, 0x00	; 0
    49f4:	30 e0       	ldi	r19, 0x00	; 0
    49f6:	40 e2       	ldi	r20, 0x20	; 32
    49f8:	51 e4       	ldi	r21, 0x41	; 65
    49fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    49fe:	dc 01       	movw	r26, r24
    4a00:	cb 01       	movw	r24, r22
    4a02:	bc 01       	movw	r22, r24
    4a04:	cd 01       	movw	r24, r26
    4a06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a0a:	dc 01       	movw	r26, r24
    4a0c:	cb 01       	movw	r24, r22
    4a0e:	9e af       	std	Y+62, r25	; 0x3e
    4a10:	8d af       	std	Y+61, r24	; 0x3d
    4a12:	0f c0       	rjmp	.+30     	; 0x4a32 <main+0x272e>
    4a14:	80 e9       	ldi	r24, 0x90	; 144
    4a16:	91 e0       	ldi	r25, 0x01	; 1
    4a18:	9c af       	std	Y+60, r25	; 0x3c
    4a1a:	8b af       	std	Y+59, r24	; 0x3b
    4a1c:	8b ad       	ldd	r24, Y+59	; 0x3b
    4a1e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4a20:	01 97       	sbiw	r24, 0x01	; 1
    4a22:	f1 f7       	brne	.-4      	; 0x4a20 <main+0x271c>
    4a24:	9c af       	std	Y+60, r25	; 0x3c
    4a26:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a28:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a2c:	01 97       	sbiw	r24, 0x01	; 1
    4a2e:	9e af       	std	Y+62, r25	; 0x3e
    4a30:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a32:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a34:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a36:	00 97       	sbiw	r24, 0x00	; 0
    4a38:	69 f7       	brne	.-38     	; 0x4a14 <main+0x2710>
    4a3a:	16 c0       	rjmp	.+44     	; 0x4a68 <main+0x2764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a3c:	fe 01       	movw	r30, r28
    4a3e:	ff 96       	adiw	r30, 0x3f	; 63
    4a40:	60 81       	ld	r22, Z
    4a42:	71 81       	ldd	r23, Z+1	; 0x01
    4a44:	82 81       	ldd	r24, Z+2	; 0x02
    4a46:	93 81       	ldd	r25, Z+3	; 0x03
    4a48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a4c:	dc 01       	movw	r26, r24
    4a4e:	cb 01       	movw	r24, r22
    4a50:	9e af       	std	Y+62, r25	; 0x3e
    4a52:	8d af       	std	Y+61, r24	; 0x3d
    4a54:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a56:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a58:	9a af       	std	Y+58, r25	; 0x3a
    4a5a:	89 af       	std	Y+57, r24	; 0x39
    4a5c:	89 ad       	ldd	r24, Y+57	; 0x39
    4a5e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4a60:	01 97       	sbiw	r24, 0x01	; 1
    4a62:	f1 f7       	brne	.-4      	; 0x4a60 <main+0x275c>
    4a64:	9a af       	std	Y+58, r25	; 0x3a
    4a66:	89 af       	std	Y+57, r24	; 0x39
														_delay_ms(500);
														LCD_SEND_COMMAND(0x01);
    4a68:	81 e0       	ldi	r24, 0x01	; 1
    4a6a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
														masterR=SPI_u8MasterTrancieve('3');
    4a6e:	83 e3       	ldi	r24, 0x33	; 51
    4a70:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4a74:	fe 01       	movw	r30, r28
    4a76:	ec 5e       	subi	r30, 0xEC	; 236
    4a78:	fe 4f       	sbci	r31, 0xFE	; 254
    4a7a:	80 83       	st	Z, r24
											        	//_delay_ms(100);
											        	masterR=SPI_u8MasterTrancieve('*');
    4a7c:	8a e2       	ldi	r24, 0x2A	; 42
    4a7e:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4a82:	fe 01       	movw	r30, r28
    4a84:	ec 5e       	subi	r30, 0xEC	; 236
    4a86:	fe 4f       	sbci	r31, 0xFE	; 254
    4a88:	80 83       	st	Z, r24
											            LCD_VidSendStrig(" Room2 S:OFF");
    4a8a:	8d e2       	ldi	r24, 0x2D	; 45
    4a8c:	91 e0       	ldi	r25, 0x01	; 1
    4a8e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
											            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4a92:	82 e0       	ldi	r24, 0x02	; 2
    4a94:	60 e0       	ldi	r22, 0x00	; 0
    4a96:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
											           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    4a9a:	84 ef       	ldi	r24, 0xF4	; 244
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
														break;



									           		}
									           		if(FLAG==0)
    4aa2:	fe 01       	movw	r30, r28
    4aa4:	ee 5e       	subi	r30, 0xEE	; 238
    4aa6:	fe 4f       	sbci	r31, 0xFE	; 254
    4aa8:	80 81       	ld	r24, Z
    4aaa:	88 23       	and	r24, r24
    4aac:	09 f0       	breq	.+2      	; 0x4ab0 <main+0x27ac>
    4aae:	b8 ce       	rjmp	.-656    	; 0x4820 <main+0x251c>
									           		{
									           			//FLAG TO RETURN TO PRIVIOSE PAGE
									           			FLAG=1;
    4ab0:	fe 01       	movw	r30, r28
    4ab2:	ee 5e       	subi	r30, 0xEE	; 238
    4ab4:	fe 4f       	sbci	r31, 0xFE	; 254
    4ab6:	81 e0       	ldi	r24, 0x01	; 1
    4ab8:	80 83       	st	Z, r24
    4aba:	3f c3       	rjmp	.+1662   	; 0x513a <main+0x2e36>
									           	}

								           	}
								           	break;
									case 3 ://ROOM3
										    LCD_SEND_COMMAND(0x01);
    4abc:	81 e0       	ldi	r24, 0x01	; 1
    4abe:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
								            LCD_VidSendStrig(" Room3 S:OFF");
    4ac2:	86 e4       	ldi	r24, 0x46	; 70
    4ac4:	91 e0       	ldi	r25, 0x01	; 1
    4ac6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4aca:	82 e0       	ldi	r24, 0x02	; 2
    4acc:	60 e0       	ldi	r22, 0x00	; 0
    4ace:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
								           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    4ad2:	84 ef       	ldi	r24, 0xF4	; 244
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								           	while(1)
								           	{
									           	read3=0xFF;
    4ada:	fe 01       	movw	r30, r28
    4adc:	e5 5f       	subi	r30, 0xF5	; 245
    4ade:	fe 4f       	sbci	r31, 0xFE	; 254
    4ae0:	8f ef       	ldi	r24, 0xFF	; 255
    4ae2:	80 83       	st	Z, r24
    4ae4:	06 c0       	rjmp	.+12     	; 0x4af2 <main+0x27ee>
												while(read3==0xFF)
												{
													read3= KPD_u8GetPressedKey();
    4ae6:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    4aea:	fe 01       	movw	r30, r28
    4aec:	e5 5f       	subi	r30, 0xF5	; 245
    4aee:	fe 4f       	sbci	r31, 0xFE	; 254
    4af0:	80 83       	st	Z, r24
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
								           	LCD_VidSendStrig("1:on 2:off 3:RET ");
								           	while(1)
								           	{
									           	read3=0xFF;
												while(read3==0xFF)
    4af2:	fe 01       	movw	r30, r28
    4af4:	e5 5f       	subi	r30, 0xF5	; 245
    4af6:	fe 4f       	sbci	r31, 0xFE	; 254
    4af8:	80 81       	ld	r24, Z
    4afa:	8f 3f       	cpi	r24, 0xFF	; 255
    4afc:	a1 f3       	breq	.-24     	; 0x4ae6 <main+0x27e2>
												{
													read3= KPD_u8GetPressedKey();
												}
									           	if(read3!=0xFF)
    4afe:	fe 01       	movw	r30, r28
    4b00:	e5 5f       	subi	r30, 0xF5	; 245
    4b02:	fe 4f       	sbci	r31, 0xFE	; 254
    4b04:	80 81       	ld	r24, Z
    4b06:	8f 3f       	cpi	r24, 0xFF	; 255
    4b08:	41 f3       	breq	.-48     	; 0x4ada <main+0x27d6>
									           	{
									           		switch(read3)
    4b0a:	fe 01       	movw	r30, r28
    4b0c:	e5 5f       	subi	r30, 0xF5	; 245
    4b0e:	fe 4f       	sbci	r31, 0xFE	; 254
    4b10:	80 81       	ld	r24, Z
    4b12:	28 2f       	mov	r18, r24
    4b14:	30 e0       	ldi	r19, 0x00	; 0
    4b16:	c9 5e       	subi	r28, 0xE9	; 233
    4b18:	de 4f       	sbci	r29, 0xFE	; 254
    4b1a:	39 83       	std	Y+1, r19	; 0x01
    4b1c:	28 83       	st	Y, r18
    4b1e:	c7 51       	subi	r28, 0x17	; 23
    4b20:	d1 40       	sbci	r29, 0x01	; 1
    4b22:	c9 5e       	subi	r28, 0xE9	; 233
    4b24:	de 4f       	sbci	r29, 0xFE	; 254
    4b26:	88 81       	ld	r24, Y
    4b28:	99 81       	ldd	r25, Y+1	; 0x01
    4b2a:	c7 51       	subi	r28, 0x17	; 23
    4b2c:	d1 40       	sbci	r29, 0x01	; 1
    4b2e:	82 30       	cpi	r24, 0x02	; 2
    4b30:	91 05       	cpc	r25, r1
    4b32:	51 f1       	breq	.+84     	; 0x4b88 <main+0x2884>
    4b34:	c9 5e       	subi	r28, 0xE9	; 233
    4b36:	de 4f       	sbci	r29, 0xFE	; 254
    4b38:	e8 81       	ld	r30, Y
    4b3a:	f9 81       	ldd	r31, Y+1	; 0x01
    4b3c:	c7 51       	subi	r28, 0x17	; 23
    4b3e:	d1 40       	sbci	r29, 0x01	; 1
    4b40:	e3 30       	cpi	r30, 0x03	; 3
    4b42:	f1 05       	cpc	r31, r1
    4b44:	c1 f1       	breq	.+112    	; 0x4bb6 <main+0x28b2>
    4b46:	c9 5e       	subi	r28, 0xE9	; 233
    4b48:	de 4f       	sbci	r29, 0xFE	; 254
    4b4a:	28 81       	ld	r18, Y
    4b4c:	39 81       	ldd	r19, Y+1	; 0x01
    4b4e:	c7 51       	subi	r28, 0x17	; 23
    4b50:	d1 40       	sbci	r29, 0x01	; 1
    4b52:	21 30       	cpi	r18, 0x01	; 1
    4b54:	31 05       	cpc	r19, r1
    4b56:	09 f0       	breq	.+2      	; 0x4b5a <main+0x2856>
    4b58:	50 c0       	rjmp	.+160    	; 0x4bfa <main+0x28f6>
									           		{
									           		case 1://TURN ON
									           			   LCD_SEND_COMMAND(0x01);
    4b5a:	81 e0       	ldi	r24, 0x01	; 1
    4b5c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							           			            masterR=SPI_u8MasterTrancieve('4'); //room3 will turn on
    4b60:	84 e3       	ldi	r24, 0x34	; 52
    4b62:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4b66:	fe 01       	movw	r30, r28
    4b68:	ec 5e       	subi	r30, 0xEC	; 236
    4b6a:	fe 4f       	sbci	r31, 0xFE	; 254
    4b6c:	80 83       	st	Z, r24
									           			    LCD_VidSendStrig(" Room3 S:ON");
    4b6e:	83 e5       	ldi	r24, 0x53	; 83
    4b70:	91 e0       	ldi	r25, 0x01	; 1
    4b72:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4b76:	82 e0       	ldi	r24, 0x02	; 2
    4b78:	60 e0       	ldi	r22, 0x00	; 0
    4b7a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    4b7e:	84 ef       	ldi	r24, 0xF4	; 244
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    4b86:	d7 c0       	rjmp	.+430    	; 0x4d36 <main+0x2a32>
									           	           // _delay_ms(400);
									           			   break;
									           		case 2: //TURN OFF
									           			    LCD_SEND_COMMAND(0x01);
    4b88:	81 e0       	ldi	r24, 0x01	; 1
    4b8a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							           			            masterR=SPI_u8MasterTrancieve('5'); //room3 will turn off
    4b8e:	85 e3       	ldi	r24, 0x35	; 53
    4b90:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4b94:	fe 01       	movw	r30, r28
    4b96:	ec 5e       	subi	r30, 0xEC	; 236
    4b98:	fe 4f       	sbci	r31, 0xFE	; 254
    4b9a:	80 83       	st	Z, r24
									           			    LCD_VidSendStrig(" Room3 S:OFF");
    4b9c:	86 e4       	ldi	r24, 0x46	; 70
    4b9e:	91 e0       	ldi	r25, 0x01	; 1
    4ba0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4ba4:	82 e0       	ldi	r24, 0x02	; 2
    4ba6:	60 e0       	ldi	r22, 0x00	; 0
    4ba8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    4bac:	84 ef       	ldi	r24, 0xF4	; 244
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    4bb4:	c0 c0       	rjmp	.+384    	; 0x4d36 <main+0x2a32>
									           	           // _delay_ms(400);
									           			   break;
									           		case 3: //RETURN TO PRIVIOSE PAGE
									           			    LCD_SEND_COMMAND(0x01);
    4bb6:	81 e0       	ldi	r24, 0x01	; 1
    4bb8:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									           			    masterR=SPI_u8MasterTrancieve('5');
    4bbc:	85 e3       	ldi	r24, 0x35	; 53
    4bbe:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4bc2:	fe 01       	movw	r30, r28
    4bc4:	ec 5e       	subi	r30, 0xEC	; 236
    4bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    4bc8:	80 83       	st	Z, r24
												            LCD_VidSendStrig(" 1:Room1 2:Room2");
    4bca:	85 ec       	ldi	r24, 0xC5	; 197
    4bcc:	90 e0       	ldi	r25, 0x00	; 0
    4bce:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4bd2:	82 e0       	ldi	r24, 0x02	; 2
    4bd4:	60 e0       	ldi	r22, 0x00	; 0
    4bd6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												            LCD_VidSendStrig("3:Room3 4:Room4 ");
    4bda:	8c ee       	ldi	r24, 0xEC	; 236
    4bdc:	91 e0       	ldi	r25, 0x01	; 1
    4bde:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												        	masterR=SPI_u8MasterTrancieve('*');
    4be2:	8a e2       	ldi	r24, 0x2A	; 42
    4be4:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4be8:	fe 01       	movw	r30, r28
    4bea:	ec 5e       	subi	r30, 0xEC	; 236
    4bec:	fe 4f       	sbci	r31, 0xFE	; 254
    4bee:	80 83       	st	Z, r24
												        	FLAG=0;
    4bf0:	fe 01       	movw	r30, r28
    4bf2:	ee 5e       	subi	r30, 0xEE	; 238
    4bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    4bf6:	10 82       	st	Z, r1
    4bf8:	9e c0       	rjmp	.+316    	; 0x4d36 <main+0x2a32>
									           			   break;
													default://WRONG ENTERY
														LCD_SEND_COMMAND(0x01);
    4bfa:	81 e0       	ldi	r24, 0x01	; 1
    4bfc:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
														LCD_VidSendStrig(" wrong choice");
    4c00:	82 e1       	ldi	r24, 0x12	; 18
    4c02:	91 e0       	ldi	r25, 0x01	; 1
    4c04:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
													    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4c08:	82 e0       	ldi	r24, 0x02	; 2
    4c0a:	60 e0       	ldi	r22, 0x00	; 0
    4c0c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
														LCD_VidSendStrig("choose again");
    4c10:	80 e2       	ldi	r24, 0x20	; 32
    4c12:	91 e0       	ldi	r25, 0x01	; 1
    4c14:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    4c18:	80 e0       	ldi	r24, 0x00	; 0
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	aa ef       	ldi	r26, 0xFA	; 250
    4c1e:	b3 e4       	ldi	r27, 0x43	; 67
    4c20:	8d ab       	std	Y+53, r24	; 0x35
    4c22:	9e ab       	std	Y+54, r25	; 0x36
    4c24:	af ab       	std	Y+55, r26	; 0x37
    4c26:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c28:	6d a9       	ldd	r22, Y+53	; 0x35
    4c2a:	7e a9       	ldd	r23, Y+54	; 0x36
    4c2c:	8f a9       	ldd	r24, Y+55	; 0x37
    4c2e:	98 ad       	ldd	r25, Y+56	; 0x38
    4c30:	20 e0       	ldi	r18, 0x00	; 0
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	4a e7       	ldi	r20, 0x7A	; 122
    4c36:	55 e4       	ldi	r21, 0x45	; 69
    4c38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4c3c:	dc 01       	movw	r26, r24
    4c3e:	cb 01       	movw	r24, r22
    4c40:	89 ab       	std	Y+49, r24	; 0x31
    4c42:	9a ab       	std	Y+50, r25	; 0x32
    4c44:	ab ab       	std	Y+51, r26	; 0x33
    4c46:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4c48:	69 a9       	ldd	r22, Y+49	; 0x31
    4c4a:	7a a9       	ldd	r23, Y+50	; 0x32
    4c4c:	8b a9       	ldd	r24, Y+51	; 0x33
    4c4e:	9c a9       	ldd	r25, Y+52	; 0x34
    4c50:	20 e0       	ldi	r18, 0x00	; 0
    4c52:	30 e0       	ldi	r19, 0x00	; 0
    4c54:	40 e8       	ldi	r20, 0x80	; 128
    4c56:	5f e3       	ldi	r21, 0x3F	; 63
    4c58:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4c5c:	88 23       	and	r24, r24
    4c5e:	2c f4       	brge	.+10     	; 0x4c6a <main+0x2966>
		__ticks = 1;
    4c60:	81 e0       	ldi	r24, 0x01	; 1
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	98 ab       	std	Y+48, r25	; 0x30
    4c66:	8f a7       	std	Y+47, r24	; 0x2f
    4c68:	3f c0       	rjmp	.+126    	; 0x4ce8 <main+0x29e4>
	else if (__tmp > 65535)
    4c6a:	69 a9       	ldd	r22, Y+49	; 0x31
    4c6c:	7a a9       	ldd	r23, Y+50	; 0x32
    4c6e:	8b a9       	ldd	r24, Y+51	; 0x33
    4c70:	9c a9       	ldd	r25, Y+52	; 0x34
    4c72:	20 e0       	ldi	r18, 0x00	; 0
    4c74:	3f ef       	ldi	r19, 0xFF	; 255
    4c76:	4f e7       	ldi	r20, 0x7F	; 127
    4c78:	57 e4       	ldi	r21, 0x47	; 71
    4c7a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4c7e:	18 16       	cp	r1, r24
    4c80:	4c f5       	brge	.+82     	; 0x4cd4 <main+0x29d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c82:	6d a9       	ldd	r22, Y+53	; 0x35
    4c84:	7e a9       	ldd	r23, Y+54	; 0x36
    4c86:	8f a9       	ldd	r24, Y+55	; 0x37
    4c88:	98 ad       	ldd	r25, Y+56	; 0x38
    4c8a:	20 e0       	ldi	r18, 0x00	; 0
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	40 e2       	ldi	r20, 0x20	; 32
    4c90:	51 e4       	ldi	r21, 0x41	; 65
    4c92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4c96:	dc 01       	movw	r26, r24
    4c98:	cb 01       	movw	r24, r22
    4c9a:	bc 01       	movw	r22, r24
    4c9c:	cd 01       	movw	r24, r26
    4c9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ca2:	dc 01       	movw	r26, r24
    4ca4:	cb 01       	movw	r24, r22
    4ca6:	98 ab       	std	Y+48, r25	; 0x30
    4ca8:	8f a7       	std	Y+47, r24	; 0x2f
    4caa:	0f c0       	rjmp	.+30     	; 0x4cca <main+0x29c6>
    4cac:	80 e9       	ldi	r24, 0x90	; 144
    4cae:	91 e0       	ldi	r25, 0x01	; 1
    4cb0:	9e a7       	std	Y+46, r25	; 0x2e
    4cb2:	8d a7       	std	Y+45, r24	; 0x2d
    4cb4:	8d a5       	ldd	r24, Y+45	; 0x2d
    4cb6:	9e a5       	ldd	r25, Y+46	; 0x2e
    4cb8:	01 97       	sbiw	r24, 0x01	; 1
    4cba:	f1 f7       	brne	.-4      	; 0x4cb8 <main+0x29b4>
    4cbc:	9e a7       	std	Y+46, r25	; 0x2e
    4cbe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cc2:	98 a9       	ldd	r25, Y+48	; 0x30
    4cc4:	01 97       	sbiw	r24, 0x01	; 1
    4cc6:	98 ab       	std	Y+48, r25	; 0x30
    4cc8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cca:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ccc:	98 a9       	ldd	r25, Y+48	; 0x30
    4cce:	00 97       	sbiw	r24, 0x00	; 0
    4cd0:	69 f7       	brne	.-38     	; 0x4cac <main+0x29a8>
    4cd2:	14 c0       	rjmp	.+40     	; 0x4cfc <main+0x29f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cd4:	69 a9       	ldd	r22, Y+49	; 0x31
    4cd6:	7a a9       	ldd	r23, Y+50	; 0x32
    4cd8:	8b a9       	ldd	r24, Y+51	; 0x33
    4cda:	9c a9       	ldd	r25, Y+52	; 0x34
    4cdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ce0:	dc 01       	movw	r26, r24
    4ce2:	cb 01       	movw	r24, r22
    4ce4:	98 ab       	std	Y+48, r25	; 0x30
    4ce6:	8f a7       	std	Y+47, r24	; 0x2f
    4ce8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cea:	98 a9       	ldd	r25, Y+48	; 0x30
    4cec:	9c a7       	std	Y+44, r25	; 0x2c
    4cee:	8b a7       	std	Y+43, r24	; 0x2b
    4cf0:	8b a5       	ldd	r24, Y+43	; 0x2b
    4cf2:	9c a5       	ldd	r25, Y+44	; 0x2c
    4cf4:	01 97       	sbiw	r24, 0x01	; 1
    4cf6:	f1 f7       	brne	.-4      	; 0x4cf4 <main+0x29f0>
    4cf8:	9c a7       	std	Y+44, r25	; 0x2c
    4cfa:	8b a7       	std	Y+43, r24	; 0x2b
														_delay_ms(500);
														LCD_SEND_COMMAND(0x01);
    4cfc:	81 e0       	ldi	r24, 0x01	; 1
    4cfe:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
														masterR=SPI_u8MasterTrancieve('5');
    4d02:	85 e3       	ldi	r24, 0x35	; 53
    4d04:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4d08:	fe 01       	movw	r30, r28
    4d0a:	ec 5e       	subi	r30, 0xEC	; 236
    4d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    4d0e:	80 83       	st	Z, r24

											        	masterR=SPI_u8MasterTrancieve('*');
    4d10:	8a e2       	ldi	r24, 0x2A	; 42
    4d12:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4d16:	fe 01       	movw	r30, r28
    4d18:	ec 5e       	subi	r30, 0xEC	; 236
    4d1a:	fe 4f       	sbci	r31, 0xFE	; 254
    4d1c:	80 83       	st	Z, r24
											            LCD_VidSendStrig(" Room3 S:OFF");
    4d1e:	86 e4       	ldi	r24, 0x46	; 70
    4d20:	91 e0       	ldi	r25, 0x01	; 1
    4d22:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
											            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4d26:	82 e0       	ldi	r24, 0x02	; 2
    4d28:	60 e0       	ldi	r22, 0x00	; 0
    4d2a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
											           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    4d2e:	84 ef       	ldi	r24, 0xF4	; 244
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
														break;
									           		}
									           		if(FLAG==0)
    4d36:	fe 01       	movw	r30, r28
    4d38:	ee 5e       	subi	r30, 0xEE	; 238
    4d3a:	fe 4f       	sbci	r31, 0xFE	; 254
    4d3c:	80 81       	ld	r24, Z
    4d3e:	88 23       	and	r24, r24
    4d40:	09 f0       	breq	.+2      	; 0x4d44 <main+0x2a40>
    4d42:	cb ce       	rjmp	.-618    	; 0x4ada <main+0x27d6>
									           		{
									           			//FLAG TO RETURN
									           			FLAG=1;
    4d44:	fe 01       	movw	r30, r28
    4d46:	ee 5e       	subi	r30, 0xEE	; 238
    4d48:	fe 4f       	sbci	r31, 0xFE	; 254
    4d4a:	81 e0       	ldi	r24, 0x01	; 1
    4d4c:	80 83       	st	Z, r24
    4d4e:	f5 c1       	rjmp	.+1002   	; 0x513a <main+0x2e36>
									           	}

								           	}
								           	break;
									case 4 ://ROOM4
										    LCD_SEND_COMMAND(0x01);
    4d50:	81 e0       	ldi	r24, 0x01	; 1
    4d52:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
								            LCD_VidSendStrig(" Room4 S:OFF");
    4d56:	8e e7       	ldi	r24, 0x7E	; 126
    4d58:	91 e0       	ldi	r25, 0x01	; 1
    4d5a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4d5e:	82 e0       	ldi	r24, 0x02	; 2
    4d60:	60 e0       	ldi	r22, 0x00	; 0
    4d62:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
								           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    4d66:	84 ef       	ldi	r24, 0xF4	; 244
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								           	while(1)
								           	{
									           	read3=0xFF;
    4d6e:	fe 01       	movw	r30, r28
    4d70:	e5 5f       	subi	r30, 0xF5	; 245
    4d72:	fe 4f       	sbci	r31, 0xFE	; 254
    4d74:	8f ef       	ldi	r24, 0xFF	; 255
    4d76:	80 83       	st	Z, r24
    4d78:	06 c0       	rjmp	.+12     	; 0x4d86 <main+0x2a82>
												while(read3==0xFF)
												{
													read3= KPD_u8GetPressedKey();
    4d7a:	0e 94 de 09 	call	0x13bc	; 0x13bc <KPD_u8GetPressedKey>
    4d7e:	fe 01       	movw	r30, r28
    4d80:	e5 5f       	subi	r30, 0xF5	; 245
    4d82:	fe 4f       	sbci	r31, 0xFE	; 254
    4d84:	80 83       	st	Z, r24
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
								           	LCD_VidSendStrig("1:on 2:off 3:RET ");
								           	while(1)
								           	{
									           	read3=0xFF;
												while(read3==0xFF)
    4d86:	fe 01       	movw	r30, r28
    4d88:	e5 5f       	subi	r30, 0xF5	; 245
    4d8a:	fe 4f       	sbci	r31, 0xFE	; 254
    4d8c:	80 81       	ld	r24, Z
    4d8e:	8f 3f       	cpi	r24, 0xFF	; 255
    4d90:	a1 f3       	breq	.-24     	; 0x4d7a <main+0x2a76>
												{
													read3= KPD_u8GetPressedKey();
												}
									           	if(read3!=0xFF)
    4d92:	fe 01       	movw	r30, r28
    4d94:	e5 5f       	subi	r30, 0xF5	; 245
    4d96:	fe 4f       	sbci	r31, 0xFE	; 254
    4d98:	80 81       	ld	r24, Z
    4d9a:	8f 3f       	cpi	r24, 0xFF	; 255
    4d9c:	41 f3       	breq	.-48     	; 0x4d6e <main+0x2a6a>
									           	{
									           		switch(read3)
    4d9e:	fe 01       	movw	r30, r28
    4da0:	e5 5f       	subi	r30, 0xF5	; 245
    4da2:	fe 4f       	sbci	r31, 0xFE	; 254
    4da4:	80 81       	ld	r24, Z
    4da6:	e8 2f       	mov	r30, r24
    4da8:	f0 e0       	ldi	r31, 0x00	; 0
    4daa:	cb 5e       	subi	r28, 0xEB	; 235
    4dac:	de 4f       	sbci	r29, 0xFE	; 254
    4dae:	f9 83       	std	Y+1, r31	; 0x01
    4db0:	e8 83       	st	Y, r30
    4db2:	c5 51       	subi	r28, 0x15	; 21
    4db4:	d1 40       	sbci	r29, 0x01	; 1
    4db6:	cb 5e       	subi	r28, 0xEB	; 235
    4db8:	de 4f       	sbci	r29, 0xFE	; 254
    4dba:	28 81       	ld	r18, Y
    4dbc:	39 81       	ldd	r19, Y+1	; 0x01
    4dbe:	c5 51       	subi	r28, 0x15	; 21
    4dc0:	d1 40       	sbci	r29, 0x01	; 1
    4dc2:	22 30       	cpi	r18, 0x02	; 2
    4dc4:	31 05       	cpc	r19, r1
    4dc6:	51 f1       	breq	.+84     	; 0x4e1c <main+0x2b18>
    4dc8:	cb 5e       	subi	r28, 0xEB	; 235
    4dca:	de 4f       	sbci	r29, 0xFE	; 254
    4dcc:	88 81       	ld	r24, Y
    4dce:	99 81       	ldd	r25, Y+1	; 0x01
    4dd0:	c5 51       	subi	r28, 0x15	; 21
    4dd2:	d1 40       	sbci	r29, 0x01	; 1
    4dd4:	83 30       	cpi	r24, 0x03	; 3
    4dd6:	91 05       	cpc	r25, r1
    4dd8:	c1 f1       	breq	.+112    	; 0x4e4a <main+0x2b46>
    4dda:	cb 5e       	subi	r28, 0xEB	; 235
    4ddc:	de 4f       	sbci	r29, 0xFE	; 254
    4dde:	e8 81       	ld	r30, Y
    4de0:	f9 81       	ldd	r31, Y+1	; 0x01
    4de2:	c5 51       	subi	r28, 0x15	; 21
    4de4:	d1 40       	sbci	r29, 0x01	; 1
    4de6:	e1 30       	cpi	r30, 0x01	; 1
    4de8:	f1 05       	cpc	r31, r1
    4dea:	09 f0       	breq	.+2      	; 0x4dee <main+0x2aea>
    4dec:	50 c0       	rjmp	.+160    	; 0x4e8e <main+0x2b8a>
									           		{
									           		case 1: //TURN IT ON
									           			    LCD_SEND_COMMAND(0x01);
    4dee:	81 e0       	ldi	r24, 0x01	; 1
    4df0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							           			            masterR=SPI_u8MasterTrancieve('6'); //room4 will turn on
    4df4:	86 e3       	ldi	r24, 0x36	; 54
    4df6:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4dfa:	fe 01       	movw	r30, r28
    4dfc:	ec 5e       	subi	r30, 0xEC	; 236
    4dfe:	fe 4f       	sbci	r31, 0xFE	; 254
    4e00:	80 83       	st	Z, r24
									           			    LCD_VidSendStrig(" Room4 S:ON");
    4e02:	8b e8       	ldi	r24, 0x8B	; 139
    4e04:	91 e0       	ldi	r25, 0x01	; 1
    4e06:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4e0a:	82 e0       	ldi	r24, 0x02	; 2
    4e0c:	60 e0       	ldi	r22, 0x00	; 0
    4e0e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    4e12:	84 ef       	ldi	r24, 0xF4	; 244
    4e14:	90 e0       	ldi	r25, 0x00	; 0
    4e16:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    4e1a:	d7 c0       	rjmp	.+430    	; 0x4fca <main+0x2cc6>
									           	            //_delay_ms(400);
									           			   break;
									           		case 2: //TURN IT OFF
									           			    LCD_SEND_COMMAND(0x01);
    4e1c:	81 e0       	ldi	r24, 0x01	; 1
    4e1e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							           			            masterR=SPI_u8MasterTrancieve('7'); //room4 will turn off
    4e22:	87 e3       	ldi	r24, 0x37	; 55
    4e24:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4e28:	fe 01       	movw	r30, r28
    4e2a:	ec 5e       	subi	r30, 0xEC	; 236
    4e2c:	fe 4f       	sbci	r31, 0xFE	; 254
    4e2e:	80 83       	st	Z, r24
									           			    LCD_VidSendStrig(" Room4 S:OFF");
    4e30:	8e e7       	ldi	r24, 0x7E	; 126
    4e32:	91 e0       	ldi	r25, 0x01	; 1
    4e34:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									                        LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4e38:	82 e0       	ldi	r24, 0x02	; 2
    4e3a:	60 e0       	ldi	r22, 0x00	; 0
    4e3c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									           	            LCD_VidSendStrig("1:on 2:off 3:RET ");
    4e40:	84 ef       	ldi	r24, 0xF4	; 244
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    4e48:	c0 c0       	rjmp	.+384    	; 0x4fca <main+0x2cc6>
									           	            //_delay_ms(400);
									           			   break;
									           		case 3: //RETURN
									           			    LCD_SEND_COMMAND(0x01);
    4e4a:	81 e0       	ldi	r24, 0x01	; 1
    4e4c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									           		        masterR=SPI_u8MasterTrancieve('7');
    4e50:	87 e3       	ldi	r24, 0x37	; 55
    4e52:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4e56:	fe 01       	movw	r30, r28
    4e58:	ec 5e       	subi	r30, 0xEC	; 236
    4e5a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e5c:	80 83       	st	Z, r24
												            LCD_VidSendStrig(" 1:Room1 2:Room2");
    4e5e:	85 ec       	ldi	r24, 0xC5	; 197
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4e66:	82 e0       	ldi	r24, 0x02	; 2
    4e68:	60 e0       	ldi	r22, 0x00	; 0
    4e6a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												        	LCD_VidSendStrig("3:Room3 4:Room4 ");
    4e6e:	8c ee       	ldi	r24, 0xEC	; 236
    4e70:	91 e0       	ldi	r25, 0x01	; 1
    4e72:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												        	masterR=SPI_u8MasterTrancieve('*');
    4e76:	8a e2       	ldi	r24, 0x2A	; 42
    4e78:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4e7c:	fe 01       	movw	r30, r28
    4e7e:	ec 5e       	subi	r30, 0xEC	; 236
    4e80:	fe 4f       	sbci	r31, 0xFE	; 254
    4e82:	80 83       	st	Z, r24

												        	FLAG=0;
    4e84:	fe 01       	movw	r30, r28
    4e86:	ee 5e       	subi	r30, 0xEE	; 238
    4e88:	fe 4f       	sbci	r31, 0xFE	; 254
    4e8a:	10 82       	st	Z, r1
    4e8c:	9e c0       	rjmp	.+316    	; 0x4fca <main+0x2cc6>
									           			   break;
													default: //WRONG ENTERY
															LCD_SEND_COMMAND(0x01);
    4e8e:	81 e0       	ldi	r24, 0x01	; 1
    4e90:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
															masterR=SPI_u8MasterTrancieve('7');
    4e94:	87 e3       	ldi	r24, 0x37	; 55
    4e96:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4e9a:	fe 01       	movw	r30, r28
    4e9c:	ec 5e       	subi	r30, 0xEC	; 236
    4e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4ea0:	80 83       	st	Z, r24
															LCD_VidSendStrig(" wrong choice");
    4ea2:	82 e1       	ldi	r24, 0x12	; 18
    4ea4:	91 e0       	ldi	r25, 0x01	; 1
    4ea6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
														    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4eaa:	82 e0       	ldi	r24, 0x02	; 2
    4eac:	60 e0       	ldi	r22, 0x00	; 0
    4eae:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
															LCD_VidSendStrig("choose again");
    4eb2:	80 e2       	ldi	r24, 0x20	; 32
    4eb4:	91 e0       	ldi	r25, 0x01	; 1
    4eb6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    4eba:	80 e0       	ldi	r24, 0x00	; 0
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	aa ef       	ldi	r26, 0xFA	; 250
    4ec0:	b3 e4       	ldi	r27, 0x43	; 67
    4ec2:	8f a3       	std	Y+39, r24	; 0x27
    4ec4:	98 a7       	std	Y+40, r25	; 0x28
    4ec6:	a9 a7       	std	Y+41, r26	; 0x29
    4ec8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4eca:	6f a1       	ldd	r22, Y+39	; 0x27
    4ecc:	78 a5       	ldd	r23, Y+40	; 0x28
    4ece:	89 a5       	ldd	r24, Y+41	; 0x29
    4ed0:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ed2:	20 e0       	ldi	r18, 0x00	; 0
    4ed4:	30 e0       	ldi	r19, 0x00	; 0
    4ed6:	4a e7       	ldi	r20, 0x7A	; 122
    4ed8:	55 e4       	ldi	r21, 0x45	; 69
    4eda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ede:	dc 01       	movw	r26, r24
    4ee0:	cb 01       	movw	r24, r22
    4ee2:	8b a3       	std	Y+35, r24	; 0x23
    4ee4:	9c a3       	std	Y+36, r25	; 0x24
    4ee6:	ad a3       	std	Y+37, r26	; 0x25
    4ee8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4eea:	6b a1       	ldd	r22, Y+35	; 0x23
    4eec:	7c a1       	ldd	r23, Y+36	; 0x24
    4eee:	8d a1       	ldd	r24, Y+37	; 0x25
    4ef0:	9e a1       	ldd	r25, Y+38	; 0x26
    4ef2:	20 e0       	ldi	r18, 0x00	; 0
    4ef4:	30 e0       	ldi	r19, 0x00	; 0
    4ef6:	40 e8       	ldi	r20, 0x80	; 128
    4ef8:	5f e3       	ldi	r21, 0x3F	; 63
    4efa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4efe:	88 23       	and	r24, r24
    4f00:	2c f4       	brge	.+10     	; 0x4f0c <main+0x2c08>
		__ticks = 1;
    4f02:	81 e0       	ldi	r24, 0x01	; 1
    4f04:	90 e0       	ldi	r25, 0x00	; 0
    4f06:	9a a3       	std	Y+34, r25	; 0x22
    4f08:	89 a3       	std	Y+33, r24	; 0x21
    4f0a:	3f c0       	rjmp	.+126    	; 0x4f8a <main+0x2c86>
	else if (__tmp > 65535)
    4f0c:	6b a1       	ldd	r22, Y+35	; 0x23
    4f0e:	7c a1       	ldd	r23, Y+36	; 0x24
    4f10:	8d a1       	ldd	r24, Y+37	; 0x25
    4f12:	9e a1       	ldd	r25, Y+38	; 0x26
    4f14:	20 e0       	ldi	r18, 0x00	; 0
    4f16:	3f ef       	ldi	r19, 0xFF	; 255
    4f18:	4f e7       	ldi	r20, 0x7F	; 127
    4f1a:	57 e4       	ldi	r21, 0x47	; 71
    4f1c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4f20:	18 16       	cp	r1, r24
    4f22:	4c f5       	brge	.+82     	; 0x4f76 <main+0x2c72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f24:	6f a1       	ldd	r22, Y+39	; 0x27
    4f26:	78 a5       	ldd	r23, Y+40	; 0x28
    4f28:	89 a5       	ldd	r24, Y+41	; 0x29
    4f2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4f2c:	20 e0       	ldi	r18, 0x00	; 0
    4f2e:	30 e0       	ldi	r19, 0x00	; 0
    4f30:	40 e2       	ldi	r20, 0x20	; 32
    4f32:	51 e4       	ldi	r21, 0x41	; 65
    4f34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4f38:	dc 01       	movw	r26, r24
    4f3a:	cb 01       	movw	r24, r22
    4f3c:	bc 01       	movw	r22, r24
    4f3e:	cd 01       	movw	r24, r26
    4f40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f44:	dc 01       	movw	r26, r24
    4f46:	cb 01       	movw	r24, r22
    4f48:	9a a3       	std	Y+34, r25	; 0x22
    4f4a:	89 a3       	std	Y+33, r24	; 0x21
    4f4c:	0f c0       	rjmp	.+30     	; 0x4f6c <main+0x2c68>
    4f4e:	80 e9       	ldi	r24, 0x90	; 144
    4f50:	91 e0       	ldi	r25, 0x01	; 1
    4f52:	98 a3       	std	Y+32, r25	; 0x20
    4f54:	8f 8f       	std	Y+31, r24	; 0x1f
    4f56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4f58:	98 a1       	ldd	r25, Y+32	; 0x20
    4f5a:	01 97       	sbiw	r24, 0x01	; 1
    4f5c:	f1 f7       	brne	.-4      	; 0x4f5a <main+0x2c56>
    4f5e:	98 a3       	std	Y+32, r25	; 0x20
    4f60:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f62:	89 a1       	ldd	r24, Y+33	; 0x21
    4f64:	9a a1       	ldd	r25, Y+34	; 0x22
    4f66:	01 97       	sbiw	r24, 0x01	; 1
    4f68:	9a a3       	std	Y+34, r25	; 0x22
    4f6a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f6c:	89 a1       	ldd	r24, Y+33	; 0x21
    4f6e:	9a a1       	ldd	r25, Y+34	; 0x22
    4f70:	00 97       	sbiw	r24, 0x00	; 0
    4f72:	69 f7       	brne	.-38     	; 0x4f4e <main+0x2c4a>
    4f74:	14 c0       	rjmp	.+40     	; 0x4f9e <main+0x2c9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f76:	6b a1       	ldd	r22, Y+35	; 0x23
    4f78:	7c a1       	ldd	r23, Y+36	; 0x24
    4f7a:	8d a1       	ldd	r24, Y+37	; 0x25
    4f7c:	9e a1       	ldd	r25, Y+38	; 0x26
    4f7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f82:	dc 01       	movw	r26, r24
    4f84:	cb 01       	movw	r24, r22
    4f86:	9a a3       	std	Y+34, r25	; 0x22
    4f88:	89 a3       	std	Y+33, r24	; 0x21
    4f8a:	89 a1       	ldd	r24, Y+33	; 0x21
    4f8c:	9a a1       	ldd	r25, Y+34	; 0x22
    4f8e:	9e 8f       	std	Y+30, r25	; 0x1e
    4f90:	8d 8f       	std	Y+29, r24	; 0x1d
    4f92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f96:	01 97       	sbiw	r24, 0x01	; 1
    4f98:	f1 f7       	brne	.-4      	; 0x4f96 <main+0x2c92>
    4f9a:	9e 8f       	std	Y+30, r25	; 0x1e
    4f9c:	8d 8f       	std	Y+29, r24	; 0x1d
															_delay_ms(500);
															LCD_SEND_COMMAND(0x01);
    4f9e:	81 e0       	ldi	r24, 0x01	; 1
    4fa0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
												        	masterR=SPI_u8MasterTrancieve('*');
    4fa4:	8a e2       	ldi	r24, 0x2A	; 42
    4fa6:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    4faa:	fe 01       	movw	r30, r28
    4fac:	ec 5e       	subi	r30, 0xEC	; 236
    4fae:	fe 4f       	sbci	r31, 0xFE	; 254
    4fb0:	80 83       	st	Z, r24
												            LCD_VidSendStrig(" Room4 S:OFF");
    4fb2:	8e e7       	ldi	r24, 0x7E	; 126
    4fb4:	91 e0       	ldi	r25, 0x01	; 1
    4fb6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
												            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4fba:	82 e0       	ldi	r24, 0x02	; 2
    4fbc:	60 e0       	ldi	r22, 0x00	; 0
    4fbe:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
												           	LCD_VidSendStrig("1:on 2:off 3:RET ");
    4fc2:	84 ef       	ldi	r24, 0xF4	; 244
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
															break;



									           		}
									           		if(FLAG==0)
    4fca:	fe 01       	movw	r30, r28
    4fcc:	ee 5e       	subi	r30, 0xEE	; 238
    4fce:	fe 4f       	sbci	r31, 0xFE	; 254
    4fd0:	80 81       	ld	r24, Z
    4fd2:	88 23       	and	r24, r24
    4fd4:	09 f0       	breq	.+2      	; 0x4fd8 <main+0x2cd4>
    4fd6:	cb ce       	rjmp	.-618    	; 0x4d6e <main+0x2a6a>
									           		{
									           			//FLAG TO RETURN
									           			FLAG=1;
    4fd8:	fe 01       	movw	r30, r28
    4fda:	ee 5e       	subi	r30, 0xEE	; 238
    4fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	80 83       	st	Z, r24
    4fe2:	ab c0       	rjmp	.+342    	; 0x513a <main+0x2e36>
									           	}

								           	}
								           	break;
									case'0'://IF USER WANT TO RETURN TO THE MODE SELECT PAGE
										    LCD_SEND_COMMAND(0x01);
    4fe4:	81 e0       	ldi	r24, 0x01	; 1
    4fe6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
										    LCD_VidSendStrig(" SELECT MODE");
    4fea:	87 ea       	ldi	r24, 0xA7	; 167
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
								            LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    4ff2:	82 e0       	ldi	r24, 0x02	; 2
    4ff4:	60 e0       	ldi	r22, 0x00	; 0
    4ff6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
									        LCD_VidSendStrig("0:Admin 1:Guest ");
    4ffa:	84 eb       	ldi	r24, 0xB4	; 180
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									        masterR=SPI_u8MasterTrancieve('*');
    5002:	8a e2       	ldi	r24, 0x2A	; 42
    5004:	0e 94 aa 10 	call	0x2154	; 0x2154 <SPI_u8MasterTrancieve>
    5008:	fe 01       	movw	r30, r28
    500a:	ec 5e       	subi	r30, 0xEC	; 236
    500c:	fe 4f       	sbci	r31, 0xFE	; 254
    500e:	80 83       	st	Z, r24
										    FLAG4=0;
    5010:	fe 01       	movw	r30, r28
    5012:	e1 5f       	subi	r30, 0xF1	; 241
    5014:	fe 4f       	sbci	r31, 0xFE	; 254
    5016:	10 82       	st	Z, r1
    5018:	90 c0       	rjmp	.+288    	; 0x513a <main+0x2e36>
									        break;
									default: //WRONG ENTERY
										LCD_SEND_COMMAND(0x01);
    501a:	81 e0       	ldi	r24, 0x01	; 1
    501c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
										LCD_VidSendStrig(" wrong choice");
    5020:	82 e1       	ldi	r24, 0x12	; 18
    5022:	91 e0       	ldi	r25, 0x01	; 1
    5024:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    5028:	82 e0       	ldi	r24, 0x02	; 2
    502a:	60 e0       	ldi	r22, 0x00	; 0
    502c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
										LCD_VidSendStrig("choose again");
    5030:	80 e2       	ldi	r24, 0x20	; 32
    5032:	91 e0       	ldi	r25, 0x01	; 1
    5034:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    5038:	80 e0       	ldi	r24, 0x00	; 0
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	aa ef       	ldi	r26, 0xFA	; 250
    503e:	b3 e4       	ldi	r27, 0x43	; 67
    5040:	89 8f       	std	Y+25, r24	; 0x19
    5042:	9a 8f       	std	Y+26, r25	; 0x1a
    5044:	ab 8f       	std	Y+27, r26	; 0x1b
    5046:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5048:	69 8d       	ldd	r22, Y+25	; 0x19
    504a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    504c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    504e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5050:	20 e0       	ldi	r18, 0x00	; 0
    5052:	30 e0       	ldi	r19, 0x00	; 0
    5054:	4a e7       	ldi	r20, 0x7A	; 122
    5056:	55 e4       	ldi	r21, 0x45	; 69
    5058:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    505c:	dc 01       	movw	r26, r24
    505e:	cb 01       	movw	r24, r22
    5060:	8d 8b       	std	Y+21, r24	; 0x15
    5062:	9e 8b       	std	Y+22, r25	; 0x16
    5064:	af 8b       	std	Y+23, r26	; 0x17
    5066:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5068:	6d 89       	ldd	r22, Y+21	; 0x15
    506a:	7e 89       	ldd	r23, Y+22	; 0x16
    506c:	8f 89       	ldd	r24, Y+23	; 0x17
    506e:	98 8d       	ldd	r25, Y+24	; 0x18
    5070:	20 e0       	ldi	r18, 0x00	; 0
    5072:	30 e0       	ldi	r19, 0x00	; 0
    5074:	40 e8       	ldi	r20, 0x80	; 128
    5076:	5f e3       	ldi	r21, 0x3F	; 63
    5078:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    507c:	88 23       	and	r24, r24
    507e:	2c f4       	brge	.+10     	; 0x508a <main+0x2d86>
		__ticks = 1;
    5080:	81 e0       	ldi	r24, 0x01	; 1
    5082:	90 e0       	ldi	r25, 0x00	; 0
    5084:	9c 8b       	std	Y+20, r25	; 0x14
    5086:	8b 8b       	std	Y+19, r24	; 0x13
    5088:	3f c0       	rjmp	.+126    	; 0x5108 <main+0x2e04>
	else if (__tmp > 65535)
    508a:	6d 89       	ldd	r22, Y+21	; 0x15
    508c:	7e 89       	ldd	r23, Y+22	; 0x16
    508e:	8f 89       	ldd	r24, Y+23	; 0x17
    5090:	98 8d       	ldd	r25, Y+24	; 0x18
    5092:	20 e0       	ldi	r18, 0x00	; 0
    5094:	3f ef       	ldi	r19, 0xFF	; 255
    5096:	4f e7       	ldi	r20, 0x7F	; 127
    5098:	57 e4       	ldi	r21, 0x47	; 71
    509a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    509e:	18 16       	cp	r1, r24
    50a0:	4c f5       	brge	.+82     	; 0x50f4 <main+0x2df0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50a2:	69 8d       	ldd	r22, Y+25	; 0x19
    50a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50aa:	20 e0       	ldi	r18, 0x00	; 0
    50ac:	30 e0       	ldi	r19, 0x00	; 0
    50ae:	40 e2       	ldi	r20, 0x20	; 32
    50b0:	51 e4       	ldi	r21, 0x41	; 65
    50b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    50b6:	dc 01       	movw	r26, r24
    50b8:	cb 01       	movw	r24, r22
    50ba:	bc 01       	movw	r22, r24
    50bc:	cd 01       	movw	r24, r26
    50be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    50c2:	dc 01       	movw	r26, r24
    50c4:	cb 01       	movw	r24, r22
    50c6:	9c 8b       	std	Y+20, r25	; 0x14
    50c8:	8b 8b       	std	Y+19, r24	; 0x13
    50ca:	0f c0       	rjmp	.+30     	; 0x50ea <main+0x2de6>
    50cc:	80 e9       	ldi	r24, 0x90	; 144
    50ce:	91 e0       	ldi	r25, 0x01	; 1
    50d0:	9a 8b       	std	Y+18, r25	; 0x12
    50d2:	89 8b       	std	Y+17, r24	; 0x11
    50d4:	89 89       	ldd	r24, Y+17	; 0x11
    50d6:	9a 89       	ldd	r25, Y+18	; 0x12
    50d8:	01 97       	sbiw	r24, 0x01	; 1
    50da:	f1 f7       	brne	.-4      	; 0x50d8 <main+0x2dd4>
    50dc:	9a 8b       	std	Y+18, r25	; 0x12
    50de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50e0:	8b 89       	ldd	r24, Y+19	; 0x13
    50e2:	9c 89       	ldd	r25, Y+20	; 0x14
    50e4:	01 97       	sbiw	r24, 0x01	; 1
    50e6:	9c 8b       	std	Y+20, r25	; 0x14
    50e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50ea:	8b 89       	ldd	r24, Y+19	; 0x13
    50ec:	9c 89       	ldd	r25, Y+20	; 0x14
    50ee:	00 97       	sbiw	r24, 0x00	; 0
    50f0:	69 f7       	brne	.-38     	; 0x50cc <main+0x2dc8>
    50f2:	14 c0       	rjmp	.+40     	; 0x511c <main+0x2e18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50f4:	6d 89       	ldd	r22, Y+21	; 0x15
    50f6:	7e 89       	ldd	r23, Y+22	; 0x16
    50f8:	8f 89       	ldd	r24, Y+23	; 0x17
    50fa:	98 8d       	ldd	r25, Y+24	; 0x18
    50fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5100:	dc 01       	movw	r26, r24
    5102:	cb 01       	movw	r24, r22
    5104:	9c 8b       	std	Y+20, r25	; 0x14
    5106:	8b 8b       	std	Y+19, r24	; 0x13
    5108:	8b 89       	ldd	r24, Y+19	; 0x13
    510a:	9c 89       	ldd	r25, Y+20	; 0x14
    510c:	98 8b       	std	Y+16, r25	; 0x10
    510e:	8f 87       	std	Y+15, r24	; 0x0f
    5110:	8f 85       	ldd	r24, Y+15	; 0x0f
    5112:	98 89       	ldd	r25, Y+16	; 0x10
    5114:	01 97       	sbiw	r24, 0x01	; 1
    5116:	f1 f7       	brne	.-4      	; 0x5114 <main+0x2e10>
    5118:	98 8b       	std	Y+16, r25	; 0x10
    511a:	8f 87       	std	Y+15, r24	; 0x0f
										_delay_ms(500);
										LCD_SEND_COMMAND(0x01);
    511c:	81 e0       	ldi	r24, 0x01	; 1
    511e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
									    LCD_VidSendStrig(" 1:Room1 2:Room2");
    5122:	85 ec       	ldi	r24, 0xC5	; 197
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
									    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    512a:	82 e0       	ldi	r24, 0x02	; 2
    512c:	60 e0       	ldi	r22, 0x00	; 0
    512e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
										LCD_VidSendStrig("3:Room3 4:Room4 ");
    5132:	8c ee       	ldi	r24, 0xEC	; 236
    5134:	91 e0       	ldi	r25, 0x01	; 1
    5136:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
										break;
									}
								}
						  		if(FLAG4==0)
    513a:	fe 01       	movw	r30, r28
    513c:	e1 5f       	subi	r30, 0xF1	; 241
    513e:	fe 4f       	sbci	r31, 0xFE	; 254
    5140:	80 81       	ld	r24, Z
    5142:	88 23       	and	r24, r24
    5144:	09 f0       	breq	.+2      	; 0x5148 <main+0x2e44>
    5146:	71 c9       	rjmp	.-3358   	; 0x442a <main+0x2126>
						       		{
						  			    //FLAG TO RETURN TO PREVIOSE PAGE
						       			FLAG4=1;
    5148:	fe 01       	movw	r30, r28
    514a:	e1 5f       	subi	r30, 0xF1	; 241
    514c:	fe 4f       	sbci	r31, 0xFE	; 254
    514e:	81 e0       	ldi	r24, 0x01	; 1
    5150:	80 83       	st	Z, r24
    5152:	a8 c0       	rjmp	.+336    	; 0x52a4 <main+0x2fa0>
						       		}

							}

						}
						else if(read=='=')
    5154:	fe 01       	movw	r30, r28
    5156:	e3 5f       	subi	r30, 0xF3	; 243
    5158:	fe 4f       	sbci	r31, 0xFE	; 254
    515a:	80 81       	ld	r24, Z
    515c:	8d 33       	cpi	r24, 0x3D	; 61
    515e:	91 f4       	brne	.+36     	; 0x5184 <main+0x2e80>
						{
							//IF HE FINISH END WANT TO ENTER THE WAITING MODE
							LCD_SEND_COMMAND(0x01);
    5160:	81 e0       	ldi	r24, 0x01	; 1
    5162:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							LCD_VidSendStrig(" WAITING UPDATES");
    5166:	8d ef       	ldi	r24, 0xFD	; 253
    5168:	91 e0       	ldi	r25, 0x01	; 1
    516a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
							FLAG5=0;
    516e:	fe 01       	movw	r30, r28
    5170:	e2 5f       	subi	r30, 0xF2	; 242
    5172:	fe 4f       	sbci	r31, 0xFE	; 254
    5174:	10 82       	st	Z, r1
							read=0xFF;
    5176:	fe 01       	movw	r30, r28
    5178:	e3 5f       	subi	r30, 0xF3	; 243
    517a:	fe 4f       	sbci	r31, 0xFE	; 254
    517c:	8f ef       	ldi	r24, 0xFF	; 255
    517e:	80 83       	st	Z, r24
    5180:	0c 94 cd 11 	jmp	0x239a	; 0x239a <main+0x96>
							break;

						}
						else
						{ //WRONG ENTERY
							LCD_SEND_COMMAND(0x01);
    5184:	81 e0       	ldi	r24, 0x01	; 1
    5186:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							LCD_VidSendStrig(" wrong choice");
    518a:	82 e1       	ldi	r24, 0x12	; 18
    518c:	91 e0       	ldi	r25, 0x01	; 1
    518e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
						    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    5192:	82 e0       	ldi	r24, 0x02	; 2
    5194:	60 e0       	ldi	r22, 0x00	; 0
    5196:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
							LCD_VidSendStrig("choose again");
    519a:	80 e2       	ldi	r24, 0x20	; 32
    519c:	91 e0       	ldi	r25, 0x01	; 1
    519e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
    51a2:	80 e0       	ldi	r24, 0x00	; 0
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	aa ef       	ldi	r26, 0xFA	; 250
    51a8:	b3 e4       	ldi	r27, 0x43	; 67
    51aa:	8b 87       	std	Y+11, r24	; 0x0b
    51ac:	9c 87       	std	Y+12, r25	; 0x0c
    51ae:	ad 87       	std	Y+13, r26	; 0x0d
    51b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    51b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    51b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    51b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    51ba:	20 e0       	ldi	r18, 0x00	; 0
    51bc:	30 e0       	ldi	r19, 0x00	; 0
    51be:	4a e7       	ldi	r20, 0x7A	; 122
    51c0:	55 e4       	ldi	r21, 0x45	; 69
    51c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    51c6:	dc 01       	movw	r26, r24
    51c8:	cb 01       	movw	r24, r22
    51ca:	8f 83       	std	Y+7, r24	; 0x07
    51cc:	98 87       	std	Y+8, r25	; 0x08
    51ce:	a9 87       	std	Y+9, r26	; 0x09
    51d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    51d2:	6f 81       	ldd	r22, Y+7	; 0x07
    51d4:	78 85       	ldd	r23, Y+8	; 0x08
    51d6:	89 85       	ldd	r24, Y+9	; 0x09
    51d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    51da:	20 e0       	ldi	r18, 0x00	; 0
    51dc:	30 e0       	ldi	r19, 0x00	; 0
    51de:	40 e8       	ldi	r20, 0x80	; 128
    51e0:	5f e3       	ldi	r21, 0x3F	; 63
    51e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    51e6:	88 23       	and	r24, r24
    51e8:	2c f4       	brge	.+10     	; 0x51f4 <main+0x2ef0>
		__ticks = 1;
    51ea:	81 e0       	ldi	r24, 0x01	; 1
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	9e 83       	std	Y+6, r25	; 0x06
    51f0:	8d 83       	std	Y+5, r24	; 0x05
    51f2:	3f c0       	rjmp	.+126    	; 0x5272 <main+0x2f6e>
	else if (__tmp > 65535)
    51f4:	6f 81       	ldd	r22, Y+7	; 0x07
    51f6:	78 85       	ldd	r23, Y+8	; 0x08
    51f8:	89 85       	ldd	r24, Y+9	; 0x09
    51fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    51fc:	20 e0       	ldi	r18, 0x00	; 0
    51fe:	3f ef       	ldi	r19, 0xFF	; 255
    5200:	4f e7       	ldi	r20, 0x7F	; 127
    5202:	57 e4       	ldi	r21, 0x47	; 71
    5204:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5208:	18 16       	cp	r1, r24
    520a:	4c f5       	brge	.+82     	; 0x525e <main+0x2f5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    520c:	6b 85       	ldd	r22, Y+11	; 0x0b
    520e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5210:	8d 85       	ldd	r24, Y+13	; 0x0d
    5212:	9e 85       	ldd	r25, Y+14	; 0x0e
    5214:	20 e0       	ldi	r18, 0x00	; 0
    5216:	30 e0       	ldi	r19, 0x00	; 0
    5218:	40 e2       	ldi	r20, 0x20	; 32
    521a:	51 e4       	ldi	r21, 0x41	; 65
    521c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5220:	dc 01       	movw	r26, r24
    5222:	cb 01       	movw	r24, r22
    5224:	bc 01       	movw	r22, r24
    5226:	cd 01       	movw	r24, r26
    5228:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    522c:	dc 01       	movw	r26, r24
    522e:	cb 01       	movw	r24, r22
    5230:	9e 83       	std	Y+6, r25	; 0x06
    5232:	8d 83       	std	Y+5, r24	; 0x05
    5234:	0f c0       	rjmp	.+30     	; 0x5254 <main+0x2f50>
    5236:	80 e9       	ldi	r24, 0x90	; 144
    5238:	91 e0       	ldi	r25, 0x01	; 1
    523a:	9c 83       	std	Y+4, r25	; 0x04
    523c:	8b 83       	std	Y+3, r24	; 0x03
    523e:	8b 81       	ldd	r24, Y+3	; 0x03
    5240:	9c 81       	ldd	r25, Y+4	; 0x04
    5242:	01 97       	sbiw	r24, 0x01	; 1
    5244:	f1 f7       	brne	.-4      	; 0x5242 <main+0x2f3e>
    5246:	9c 83       	std	Y+4, r25	; 0x04
    5248:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    524a:	8d 81       	ldd	r24, Y+5	; 0x05
    524c:	9e 81       	ldd	r25, Y+6	; 0x06
    524e:	01 97       	sbiw	r24, 0x01	; 1
    5250:	9e 83       	std	Y+6, r25	; 0x06
    5252:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5254:	8d 81       	ldd	r24, Y+5	; 0x05
    5256:	9e 81       	ldd	r25, Y+6	; 0x06
    5258:	00 97       	sbiw	r24, 0x00	; 0
    525a:	69 f7       	brne	.-38     	; 0x5236 <main+0x2f32>
    525c:	14 c0       	rjmp	.+40     	; 0x5286 <main+0x2f82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    525e:	6f 81       	ldd	r22, Y+7	; 0x07
    5260:	78 85       	ldd	r23, Y+8	; 0x08
    5262:	89 85       	ldd	r24, Y+9	; 0x09
    5264:	9a 85       	ldd	r25, Y+10	; 0x0a
    5266:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    526a:	dc 01       	movw	r26, r24
    526c:	cb 01       	movw	r24, r22
    526e:	9e 83       	std	Y+6, r25	; 0x06
    5270:	8d 83       	std	Y+5, r24	; 0x05
    5272:	8d 81       	ldd	r24, Y+5	; 0x05
    5274:	9e 81       	ldd	r25, Y+6	; 0x06
    5276:	9a 83       	std	Y+2, r25	; 0x02
    5278:	89 83       	std	Y+1, r24	; 0x01
    527a:	89 81       	ldd	r24, Y+1	; 0x01
    527c:	9a 81       	ldd	r25, Y+2	; 0x02
    527e:	01 97       	sbiw	r24, 0x01	; 1
    5280:	f1 f7       	brne	.-4      	; 0x527e <main+0x2f7a>
    5282:	9a 83       	std	Y+2, r25	; 0x02
    5284:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(500);
							LCD_SEND_COMMAND(0x01);
    5286:	81 e0       	ldi	r24, 0x01	; 1
    5288:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_SEND_COMMAND>
							LCD_VidSendStrig(" Select Mode:");
    528c:	8e e0       	ldi	r24, 0x0E	; 14
    528e:	92 e0       	ldi	r25, 0x02	; 2
    5290:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
							LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    5294:	82 e0       	ldi	r24, 0x02	; 2
    5296:	60 e0       	ldi	r22, 0x00	; 0
    5298:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_VidGoTOLocation>
							LCD_VidSendStrig("0:Admin 1:Guest");
    529c:	8c e1       	ldi	r24, 0x1C	; 28
    529e:	92 e0       	ldi	r25, 0x02	; 2
    52a0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_VidSendStrig>
						}
					}

					if(FLAG5==0)
    52a4:	fe 01       	movw	r30, r28
    52a6:	e2 5f       	subi	r30, 0xF2	; 242
    52a8:	fe 4f       	sbci	r31, 0xFE	; 254
    52aa:	80 81       	ld	r24, Z
    52ac:	88 23       	and	r24, r24
    52ae:	11 f0       	breq	.+4      	; 0x52b4 <main+0x2fb0>
    52b0:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <main+0x2f0>
					{
						//FLAG TO RETURN
						FLAG5=1;
    52b4:	fe 01       	movw	r30, r28
    52b6:	e2 5f       	subi	r30, 0xF2	; 242
    52b8:	fe 4f       	sbci	r31, 0xFE	; 254
    52ba:	81 e0       	ldi	r24, 0x01	; 1
    52bc:	80 83       	st	Z, r24
    52be:	0c 94 cd 11 	jmp	0x239a	; 0x239a <main+0x96>

000052c2 <__prologue_saves__>:
    52c2:	2f 92       	push	r2
    52c4:	3f 92       	push	r3
    52c6:	4f 92       	push	r4
    52c8:	5f 92       	push	r5
    52ca:	6f 92       	push	r6
    52cc:	7f 92       	push	r7
    52ce:	8f 92       	push	r8
    52d0:	9f 92       	push	r9
    52d2:	af 92       	push	r10
    52d4:	bf 92       	push	r11
    52d6:	cf 92       	push	r12
    52d8:	df 92       	push	r13
    52da:	ef 92       	push	r14
    52dc:	ff 92       	push	r15
    52de:	0f 93       	push	r16
    52e0:	1f 93       	push	r17
    52e2:	cf 93       	push	r28
    52e4:	df 93       	push	r29
    52e6:	cd b7       	in	r28, 0x3d	; 61
    52e8:	de b7       	in	r29, 0x3e	; 62
    52ea:	ca 1b       	sub	r28, r26
    52ec:	db 0b       	sbc	r29, r27
    52ee:	0f b6       	in	r0, 0x3f	; 63
    52f0:	f8 94       	cli
    52f2:	de bf       	out	0x3e, r29	; 62
    52f4:	0f be       	out	0x3f, r0	; 63
    52f6:	cd bf       	out	0x3d, r28	; 61
    52f8:	09 94       	ijmp

000052fa <__epilogue_restores__>:
    52fa:	2a 88       	ldd	r2, Y+18	; 0x12
    52fc:	39 88       	ldd	r3, Y+17	; 0x11
    52fe:	48 88       	ldd	r4, Y+16	; 0x10
    5300:	5f 84       	ldd	r5, Y+15	; 0x0f
    5302:	6e 84       	ldd	r6, Y+14	; 0x0e
    5304:	7d 84       	ldd	r7, Y+13	; 0x0d
    5306:	8c 84       	ldd	r8, Y+12	; 0x0c
    5308:	9b 84       	ldd	r9, Y+11	; 0x0b
    530a:	aa 84       	ldd	r10, Y+10	; 0x0a
    530c:	b9 84       	ldd	r11, Y+9	; 0x09
    530e:	c8 84       	ldd	r12, Y+8	; 0x08
    5310:	df 80       	ldd	r13, Y+7	; 0x07
    5312:	ee 80       	ldd	r14, Y+6	; 0x06
    5314:	fd 80       	ldd	r15, Y+5	; 0x05
    5316:	0c 81       	ldd	r16, Y+4	; 0x04
    5318:	1b 81       	ldd	r17, Y+3	; 0x03
    531a:	aa 81       	ldd	r26, Y+2	; 0x02
    531c:	b9 81       	ldd	r27, Y+1	; 0x01
    531e:	ce 0f       	add	r28, r30
    5320:	d1 1d       	adc	r29, r1
    5322:	0f b6       	in	r0, 0x3f	; 63
    5324:	f8 94       	cli
    5326:	de bf       	out	0x3e, r29	; 62
    5328:	0f be       	out	0x3f, r0	; 63
    532a:	cd bf       	out	0x3d, r28	; 61
    532c:	ed 01       	movw	r28, r26
    532e:	08 95       	ret

00005330 <itoa>:
    5330:	fb 01       	movw	r30, r22
    5332:	9f 01       	movw	r18, r30
    5334:	e8 94       	clt
    5336:	42 30       	cpi	r20, 0x02	; 2
    5338:	c4 f0       	brlt	.+48     	; 0x536a <itoa+0x3a>
    533a:	45 32       	cpi	r20, 0x25	; 37
    533c:	b4 f4       	brge	.+44     	; 0x536a <itoa+0x3a>
    533e:	4a 30       	cpi	r20, 0x0A	; 10
    5340:	29 f4       	brne	.+10     	; 0x534c <itoa+0x1c>
    5342:	97 fb       	bst	r25, 7
    5344:	1e f4       	brtc	.+6      	; 0x534c <itoa+0x1c>
    5346:	90 95       	com	r25
    5348:	81 95       	neg	r24
    534a:	9f 4f       	sbci	r25, 0xFF	; 255
    534c:	64 2f       	mov	r22, r20
    534e:	77 27       	eor	r23, r23
    5350:	0e 94 c9 29 	call	0x5392	; 0x5392 <__udivmodhi4>
    5354:	80 5d       	subi	r24, 0xD0	; 208
    5356:	8a 33       	cpi	r24, 0x3A	; 58
    5358:	0c f0       	brlt	.+2      	; 0x535c <itoa+0x2c>
    535a:	89 5d       	subi	r24, 0xD9	; 217
    535c:	81 93       	st	Z+, r24
    535e:	cb 01       	movw	r24, r22
    5360:	00 97       	sbiw	r24, 0x00	; 0
    5362:	a1 f7       	brne	.-24     	; 0x534c <itoa+0x1c>
    5364:	16 f4       	brtc	.+4      	; 0x536a <itoa+0x3a>
    5366:	5d e2       	ldi	r21, 0x2D	; 45
    5368:	51 93       	st	Z+, r21
    536a:	10 82       	st	Z, r1
    536c:	c9 01       	movw	r24, r18
    536e:	0c 94 b9 29 	jmp	0x5372	; 0x5372 <strrev>

00005372 <strrev>:
    5372:	dc 01       	movw	r26, r24
    5374:	fc 01       	movw	r30, r24
    5376:	67 2f       	mov	r22, r23
    5378:	71 91       	ld	r23, Z+
    537a:	77 23       	and	r23, r23
    537c:	e1 f7       	brne	.-8      	; 0x5376 <strrev+0x4>
    537e:	32 97       	sbiw	r30, 0x02	; 2
    5380:	04 c0       	rjmp	.+8      	; 0x538a <strrev+0x18>
    5382:	7c 91       	ld	r23, X
    5384:	6d 93       	st	X+, r22
    5386:	70 83       	st	Z, r23
    5388:	62 91       	ld	r22, -Z
    538a:	ae 17       	cp	r26, r30
    538c:	bf 07       	cpc	r27, r31
    538e:	c8 f3       	brcs	.-14     	; 0x5382 <strrev+0x10>
    5390:	08 95       	ret

00005392 <__udivmodhi4>:
    5392:	aa 1b       	sub	r26, r26
    5394:	bb 1b       	sub	r27, r27
    5396:	51 e1       	ldi	r21, 0x11	; 17
    5398:	07 c0       	rjmp	.+14     	; 0x53a8 <__udivmodhi4_ep>

0000539a <__udivmodhi4_loop>:
    539a:	aa 1f       	adc	r26, r26
    539c:	bb 1f       	adc	r27, r27
    539e:	a6 17       	cp	r26, r22
    53a0:	b7 07       	cpc	r27, r23
    53a2:	10 f0       	brcs	.+4      	; 0x53a8 <__udivmodhi4_ep>
    53a4:	a6 1b       	sub	r26, r22
    53a6:	b7 0b       	sbc	r27, r23

000053a8 <__udivmodhi4_ep>:
    53a8:	88 1f       	adc	r24, r24
    53aa:	99 1f       	adc	r25, r25
    53ac:	5a 95       	dec	r21
    53ae:	a9 f7       	brne	.-22     	; 0x539a <__udivmodhi4_loop>
    53b0:	80 95       	com	r24
    53b2:	90 95       	com	r25
    53b4:	bc 01       	movw	r22, r24
    53b6:	cd 01       	movw	r24, r26
    53b8:	08 95       	ret

000053ba <_exit>:
    53ba:	f8 94       	cli

000053bc <__stop_program>:
    53bc:	ff cf       	rjmp	.-2      	; 0x53bc <__stop_program>
