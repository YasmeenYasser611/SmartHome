
SmartHome_MCU3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000290a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  0000290a  0000299e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080018e  0080018e  00002acc  2**0
                  ALLOC
  3 .stab         000021cc  00000000  00000000  00002acc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000efa  00000000  00000000  00004c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a38e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <main>
      8a:	0c 94 83 14 	jmp	0x2906	; 0x2906 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e8       	ldi	r26, 0x85	; 133
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 37 14 	jmp	0x286e	; 0x286e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 27 14 	jmp	0x284e	; 0x284e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 27 14 	jmp	0x284e	; 0x284e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e8       	ldi	r24, 0x85	; 133
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 37 14 	jmp	0x286e	; 0x286e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e8       	ldi	r22, 0x85	; 133
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 27 14 	jmp	0x284e	; 0x284e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 27 14 	jmp	0x284e	; 0x284e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 27 14 	jmp	0x284e	; 0x284e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 47 14 	jmp	0x288e	; 0x288e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_VidInit>:

#include"ADC.h"


void ADC_VidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	//1-ADMUX
	//select ref  2.56v at Vref
	SET_BIT(ADMUX,REFS0);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS1);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 68       	ori	r24, 0x80	; 128
     cc0:	8c 93       	st	X, r24


	//RIRHT ADJUST (ALL 10 BIT )
	CLR_BIT(ADMUX, ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24

	//NO aoto trigger (stop)
	CLR_BIT(ADCSRA,ADATE);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24

	//PRESCALE from 50khz to 200khz       in my case 125khz with f=16mhz and prescale 128
	SET_BIT(ADCSRA,ADPS0);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	81 60       	ori	r24, 0x01	; 1
     cea:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24

	//2-ADCSRA
	//ADC ENABLE the last thing
	SET_BIT(ADCSRA,ADEN);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_U16GetDigitalValue>:

u16 ADC_U16GetDigitalValue(u8 Copy_U8ChannelNumber)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <ADC_U16GetDigitalValue+0x6>
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	8b 83       	std	Y+3, r24	; 0x03
	u16 Loc_U16DiditalValue; // WE WILL STORE THE DIGITAL VALUE IN IT
	//CHANNEL SELECTION (SINGLE ENDED)
	ADMUX &= 0b11100000;  //TO SAVE the state of the last 3 bits and other bits is 0
     d2a:	a7 e2       	ldi	r26, 0x27	; 39
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e2       	ldi	r30, 0x27	; 39
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 7e       	andi	r24, 0xE0	; 224
     d36:	8c 93       	st	X, r24
	ADMUX |= Copy_U8ChannelNumber;
     d38:	a7 e2       	ldi	r26, 0x27	; 39
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e7 e2       	ldi	r30, 0x27	; 39
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	90 81       	ld	r25, Z
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	89 2b       	or	r24, r25
     d46:	8c 93       	st	X, r24

	//ADC start convertion in the single convertion mode
	SET_BIT(ADCSRA,ADSC);
     d48:	a6 e2       	ldi	r26, 0x26	; 38
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e6 e2       	ldi	r30, 0x26	; 38
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 64       	ori	r24, 0x40	; 64
     d54:	8c 93       	st	X, r24

	//TO CHECK IF IT FINISH THE CONVERSION  (WAIT_FLAG) ADIF
	while((GET_BIT(ADCSRA,ADIF))==0);     //polling (I CHECK THE flag )
     d56:	e6 e2       	ldi	r30, 0x26	; 38
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	82 95       	swap	r24
     d5e:	8f 70       	andi	r24, 0x0F	; 15
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	81 70       	andi	r24, 0x01	; 1
     d66:	90 70       	andi	r25, 0x00	; 0
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	a9 f3       	breq	.-22     	; 0xd56 <ADC_U16GetDigitalValue+0x3a>

	// we should clear the flag after the conversion
	SET_BIT(ADCSRA,ADIF);
     d6c:	a6 e2       	ldi	r26, 0x26	; 38
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e6 e2       	ldi	r30, 0x26	; 38
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 61       	ori	r24, 0x10	; 16
     d78:	8c 93       	st	X, r24

	//OUTPUT REGISTER IS 3- ADC because we use righr adjust

	Loc_U16DiditalValue=ADC;
     d7a:	e4 e2       	ldi	r30, 0x24	; 36
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
	return Loc_U16DiditalValue;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <DIO_VidSetPinDirection>:
#include"DIO.h"

//function for direction
void DIO_VidSetPinDirection( u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Direction)    //preph name_returntype_funcName
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	29 97       	sbiw	r28, 0x09	; 9
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	6a 83       	std	Y+2, r22	; 0x02
     dae:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_U8Direction)
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	39 87       	std	Y+9, r19	; 0x09
     db8:	28 87       	std	Y+8, r18	; 0x08
     dba:	88 85       	ldd	r24, Y+8	; 0x08
     dbc:	99 85       	ldd	r25, Y+9	; 0x09
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	39 f0       	breq	.+14     	; 0xdd0 <DIO_VidSetPinDirection+0x3a>
     dc2:	28 85       	ldd	r18, Y+8	; 0x08
     dc4:	39 85       	ldd	r19, Y+9	; 0x09
     dc6:	21 30       	cpi	r18, 0x01	; 1
     dc8:	31 05       	cpc	r19, r1
     dca:	09 f4       	brne	.+2      	; 0xdce <DIO_VidSetPinDirection+0x38>
     dcc:	75 c0       	rjmp	.+234    	; 0xeb8 <DIO_VidSetPinDirection+0x122>
     dce:	e2 c0       	rjmp	.+452    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	{
	    case DIO_INPUT:
	      switch(Copy_U8Port)
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	3f 83       	std	Y+7, r19	; 0x07
     dd8:	2e 83       	std	Y+6, r18	; 0x06
     dda:	8e 81       	ldd	r24, Y+6	; 0x06
     ddc:	9f 81       	ldd	r25, Y+7	; 0x07
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	91 05       	cpc	r25, r1
     de2:	59 f1       	breq	.+86     	; 0xe3a <DIO_VidSetPinDirection+0xa4>
     de4:	2e 81       	ldd	r18, Y+6	; 0x06
     de6:	3f 81       	ldd	r19, Y+7	; 0x07
     de8:	22 30       	cpi	r18, 0x02	; 2
     dea:	31 05       	cpc	r19, r1
     dec:	2c f4       	brge	.+10     	; 0xdf8 <DIO_VidSetPinDirection+0x62>
     dee:	8e 81       	ldd	r24, Y+6	; 0x06
     df0:	9f 81       	ldd	r25, Y+7	; 0x07
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	69 f0       	breq	.+26     	; 0xe10 <DIO_VidSetPinDirection+0x7a>
     df6:	ce c0       	rjmp	.+412    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
     df8:	2e 81       	ldd	r18, Y+6	; 0x06
     dfa:	3f 81       	ldd	r19, Y+7	; 0x07
     dfc:	22 30       	cpi	r18, 0x02	; 2
     dfe:	31 05       	cpc	r19, r1
     e00:	89 f1       	breq	.+98     	; 0xe64 <DIO_VidSetPinDirection+0xce>
     e02:	8e 81       	ldd	r24, Y+6	; 0x06
     e04:	9f 81       	ldd	r25, Y+7	; 0x07
     e06:	83 30       	cpi	r24, 0x03	; 3
     e08:	91 05       	cpc	r25, r1
     e0a:	09 f4       	brne	.+2      	; 0xe0e <DIO_VidSetPinDirection+0x78>
     e0c:	40 c0       	rjmp	.+128    	; 0xe8e <DIO_VidSetPinDirection+0xf8>
     e0e:	c2 c0       	rjmp	.+388    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	      {
	    	case DIO_PORTA:
	    		CLR_BIT( DDRA , Copy_U8Pin);
     e10:	aa e3       	ldi	r26, 0x3A	; 58
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	ea e3       	ldi	r30, 0x3A	; 58
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_VidSetPinDirection+0x98>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_VidSetPinDirection+0x94>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	ad c0       	rjmp	.+346    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    		break;
	    	case DIO_PORTB:
	    		CLR_BIT( DDRB , Copy_U8Pin);
     e3a:	a7 e3       	ldi	r26, 0x37	; 55
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_VidSetPinDirection+0xc2>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_VidSetPinDirection+0xbe>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	98 c0       	rjmp	.+304    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    		break;
	    	case DIO_PORTC:
	    		CLR_BIT( DDRC , Copy_U8Pin);
     e64:	a4 e3       	ldi	r26, 0x34	; 52
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e4 e3       	ldi	r30, 0x34	; 52
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_VidSetPinDirection+0xec>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_VidSetPinDirection+0xe8>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	83 c0       	rjmp	.+262    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	    break;
	    	case DIO_PORTD:
	    		CLR_BIT( DDRD , Copy_U8Pin);
     e8e:	a1 e3       	ldi	r26, 0x31	; 49
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e1 e3       	ldi	r30, 0x31	; 49
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_VidSetPinDirection+0x116>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_VidSetPinDirection+0x112>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	6e c0       	rjmp	.+220    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	    break;

	      }
	      break;
	    case DIO_OUTPUT:
	    	switch(Copy_U8Port)
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	3d 83       	std	Y+5, r19	; 0x05
     ec0:	2c 83       	std	Y+4, r18	; 0x04
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	91 05       	cpc	r25, r1
     eca:	49 f1       	breq	.+82     	; 0xf1e <DIO_VidSetPinDirection+0x188>
     ecc:	2c 81       	ldd	r18, Y+4	; 0x04
     ece:	3d 81       	ldd	r19, Y+5	; 0x05
     ed0:	22 30       	cpi	r18, 0x02	; 2
     ed2:	31 05       	cpc	r19, r1
     ed4:	2c f4       	brge	.+10     	; 0xee0 <DIO_VidSetPinDirection+0x14a>
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	9d 81       	ldd	r25, Y+5	; 0x05
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	61 f0       	breq	.+24     	; 0xef6 <DIO_VidSetPinDirection+0x160>
     ede:	5a c0       	rjmp	.+180    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
     ee0:	2c 81       	ldd	r18, Y+4	; 0x04
     ee2:	3d 81       	ldd	r19, Y+5	; 0x05
     ee4:	22 30       	cpi	r18, 0x02	; 2
     ee6:	31 05       	cpc	r19, r1
     ee8:	71 f1       	breq	.+92     	; 0xf46 <DIO_VidSetPinDirection+0x1b0>
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	9d 81       	ldd	r25, Y+5	; 0x05
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	91 05       	cpc	r25, r1
     ef2:	e9 f1       	breq	.+122    	; 0xf6e <DIO_VidSetPinDirection+0x1d8>
     ef4:	4f c0       	rjmp	.+158    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    		    {
	    		    	case DIO_PORTA:
	    		    		SET_BIT( DDRA , Copy_U8Pin);
     ef6:	aa e3       	ldi	r26, 0x3A	; 58
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	ea e3       	ldi	r30, 0x3A	; 58
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_VidSetPinDirection+0x17e>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_VidSetPinDirection+0x17a>
     f18:	84 2b       	or	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	3b c0       	rjmp	.+118    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    		    		break;
	    		    	case DIO_PORTB:
	    		    		SET_BIT( DDRB , Copy_U8Pin);
     f1e:	a7 e3       	ldi	r26, 0x37	; 55
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e7 e3       	ldi	r30, 0x37	; 55
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_VidSetPinDirection+0x1a6>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_VidSetPinDirection+0x1a2>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	27 c0       	rjmp	.+78     	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    		    		break;
	    		    	case DIO_PORTC:
	    		    		SET_BIT( DDRC , Copy_U8Pin);
     f46:	a4 e3       	ldi	r26, 0x34	; 52
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e4 e3       	ldi	r30, 0x34	; 52
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_VidSetPinDirection+0x1ce>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_VidSetPinDirection+0x1ca>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	13 c0       	rjmp	.+38     	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    		    	    break;
	    		    	case DIO_PORTD:
	    		    		SET_BIT( DDRD , Copy_U8Pin);
     f6e:	a1 e3       	ldi	r26, 0x31	; 49
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e1 e3       	ldi	r30, 0x31	; 49
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_VidSetPinDirection+0x1f6>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_VidSetPinDirection+0x1f2>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
	    		    	    break;
	    		    }
	    	break;
	}
}
     f94:	29 96       	adiw	r28, 0x09	; 9
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <DIO_VidSetPinValue>:
//function for value
void DIO_VidSetPinValue( u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Value)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	29 97       	sbiw	r28, 0x09	; 9
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	6a 83       	std	Y+2, r22	; 0x02
     fbe:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_U8Value)
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	39 87       	std	Y+9, r19	; 0x09
     fc8:	28 87       	std	Y+8, r18	; 0x08
     fca:	88 85       	ldd	r24, Y+8	; 0x08
     fcc:	99 85       	ldd	r25, Y+9	; 0x09
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	39 f0       	breq	.+14     	; 0xfe0 <DIO_VidSetPinValue+0x3a>
     fd2:	28 85       	ldd	r18, Y+8	; 0x08
     fd4:	39 85       	ldd	r19, Y+9	; 0x09
     fd6:	21 30       	cpi	r18, 0x01	; 1
     fd8:	31 05       	cpc	r19, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <DIO_VidSetPinValue+0x38>
     fdc:	75 c0       	rjmp	.+234    	; 0x10c8 <DIO_VidSetPinValue+0x122>
     fde:	e2 c0       	rjmp	.+452    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
	{
	    case DIO_LOW:
	      switch(Copy_U8Port)
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	3f 83       	std	Y+7, r19	; 0x07
     fe8:	2e 83       	std	Y+6, r18	; 0x06
     fea:	8e 81       	ldd	r24, Y+6	; 0x06
     fec:	9f 81       	ldd	r25, Y+7	; 0x07
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	91 05       	cpc	r25, r1
     ff2:	59 f1       	breq	.+86     	; 0x104a <DIO_VidSetPinValue+0xa4>
     ff4:	2e 81       	ldd	r18, Y+6	; 0x06
     ff6:	3f 81       	ldd	r19, Y+7	; 0x07
     ff8:	22 30       	cpi	r18, 0x02	; 2
     ffa:	31 05       	cpc	r19, r1
     ffc:	2c f4       	brge	.+10     	; 0x1008 <DIO_VidSetPinValue+0x62>
     ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    1000:	9f 81       	ldd	r25, Y+7	; 0x07
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	69 f0       	breq	.+26     	; 0x1020 <DIO_VidSetPinValue+0x7a>
    1006:	ce c0       	rjmp	.+412    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
    1008:	2e 81       	ldd	r18, Y+6	; 0x06
    100a:	3f 81       	ldd	r19, Y+7	; 0x07
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	89 f1       	breq	.+98     	; 0x1074 <DIO_VidSetPinValue+0xce>
    1012:	8e 81       	ldd	r24, Y+6	; 0x06
    1014:	9f 81       	ldd	r25, Y+7	; 0x07
    1016:	83 30       	cpi	r24, 0x03	; 3
    1018:	91 05       	cpc	r25, r1
    101a:	09 f4       	brne	.+2      	; 0x101e <DIO_VidSetPinValue+0x78>
    101c:	40 c0       	rjmp	.+128    	; 0x109e <DIO_VidSetPinValue+0xf8>
    101e:	c2 c0       	rjmp	.+388    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
	      {
	    	case DIO_PORTA:
	    		CLR_BIT( PORTA , Copy_U8Pin);
    1020:	ab e3       	ldi	r26, 0x3B	; 59
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	eb e3       	ldi	r30, 0x3B	; 59
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_VidSetPinValue+0x98>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_VidSetPinValue+0x94>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	ad c0       	rjmp	.+346    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
	    		break;
	    	case DIO_PORTB:
	    		CLR_BIT( PORTB , Copy_U8Pin);
    104a:	a8 e3       	ldi	r26, 0x38	; 56
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e8 e3       	ldi	r30, 0x38	; 56
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_VidSetPinValue+0xc2>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_VidSetPinValue+0xbe>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	98 c0       	rjmp	.+304    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
	    		break;
	    	case DIO_PORTC:
	    		CLR_BIT( PORTC , Copy_U8Pin);
    1074:	a5 e3       	ldi	r26, 0x35	; 53
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e5 e3       	ldi	r30, 0x35	; 53
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_VidSetPinValue+0xec>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_VidSetPinValue+0xe8>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	83 c0       	rjmp	.+262    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
	    	    break;
	    	case DIO_PORTD:
	    		CLR_BIT( PORTD , Copy_U8Pin);
    109e:	a2 e3       	ldi	r26, 0x32	; 50
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e2 e3       	ldi	r30, 0x32	; 50
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_VidSetPinValue+0x116>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_VidSetPinValue+0x112>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	6e c0       	rjmp	.+220    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
	    	    break;

	      }
	      break;
	    case DIO_HIGH:
	    	switch(Copy_U8Port)
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	3d 83       	std	Y+5, r19	; 0x05
    10d0:	2c 83       	std	Y+4, r18	; 0x04
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	9d 81       	ldd	r25, Y+5	; 0x05
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	91 05       	cpc	r25, r1
    10da:	49 f1       	breq	.+82     	; 0x112e <DIO_VidSetPinValue+0x188>
    10dc:	2c 81       	ldd	r18, Y+4	; 0x04
    10de:	3d 81       	ldd	r19, Y+5	; 0x05
    10e0:	22 30       	cpi	r18, 0x02	; 2
    10e2:	31 05       	cpc	r19, r1
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <DIO_VidSetPinValue+0x14a>
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	61 f0       	breq	.+24     	; 0x1106 <DIO_VidSetPinValue+0x160>
    10ee:	5a c0       	rjmp	.+180    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
    10f0:	2c 81       	ldd	r18, Y+4	; 0x04
    10f2:	3d 81       	ldd	r19, Y+5	; 0x05
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	71 f1       	breq	.+92     	; 0x1156 <DIO_VidSetPinValue+0x1b0>
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	9d 81       	ldd	r25, Y+5	; 0x05
    10fe:	83 30       	cpi	r24, 0x03	; 3
    1100:	91 05       	cpc	r25, r1
    1102:	e9 f1       	breq	.+122    	; 0x117e <DIO_VidSetPinValue+0x1d8>
    1104:	4f c0       	rjmp	.+158    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
	    		    {
	    		    	case DIO_PORTA:
	    		    		SET_BIT( PORTA , Copy_U8Pin);
    1106:	ab e3       	ldi	r26, 0x3B	; 59
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	eb e3       	ldi	r30, 0x3B	; 59
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_VidSetPinValue+0x17e>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_VidSetPinValue+0x17a>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	3b c0       	rjmp	.+118    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
	    		    		break;
	    		    	case DIO_PORTB:
	    		    		SET_BIT( PORTB , Copy_U8Pin);
    112e:	a8 e3       	ldi	r26, 0x38	; 56
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e8 e3       	ldi	r30, 0x38	; 56
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_VidSetPinValue+0x1a6>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_VidSetPinValue+0x1a2>
    1150:	84 2b       	or	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	27 c0       	rjmp	.+78     	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
	    		    		break;
	    		    	case DIO_PORTC:
	    		    		SET_BIT( PORTC , Copy_U8Pin);
    1156:	a5 e3       	ldi	r26, 0x35	; 53
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e5 e3       	ldi	r30, 0x35	; 53
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_VidSetPinValue+0x1ce>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_VidSetPinValue+0x1ca>
    1178:	84 2b       	or	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	13 c0       	rjmp	.+38     	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
	    		    	    break;
	    		    	case DIO_PORTD:
	    		    		SET_BIT( PORTD , Copy_U8Pin);
    117e:	a2 e3       	ldi	r26, 0x32	; 50
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e2 e3       	ldi	r30, 0x32	; 50
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_VidSetPinValue+0x1f6>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_VidSetPinValue+0x1f2>
    11a0:	84 2b       	or	r24, r20
    11a2:	8c 93       	st	X, r24
	    		    	    break;
	    		    }
	    	        break;
	}

}
    11a4:	29 96       	adiw	r28, 0x09	; 9
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <DIO_VidSetPortDirection>:


 //function to set port direction
void DIO_VidSetPortDirection(u8 Copy_U8Port , u8 Copy_U8Direction)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <DIO_VidSetPortDirection+0x6>
    11bc:	00 d0       	rcall	.+0      	; 0x11be <DIO_VidSetPortDirection+0x8>
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3c 83       	std	Y+4, r19	; 0x04
    11ce:	2b 83       	std	Y+3, r18	; 0x03
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	d1 f0       	breq	.+52     	; 0x120e <DIO_VidSetPortDirection+0x58>
    11da:	2b 81       	ldd	r18, Y+3	; 0x03
    11dc:	3c 81       	ldd	r19, Y+4	; 0x04
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	2c f4       	brge	.+10     	; 0x11ee <DIO_VidSetPortDirection+0x38>
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	61 f0       	breq	.+24     	; 0x1204 <DIO_VidSetPortDirection+0x4e>
    11ec:	1e c0       	rjmp	.+60     	; 0x122a <DIO_VidSetPortDirection+0x74>
    11ee:	2b 81       	ldd	r18, Y+3	; 0x03
    11f0:	3c 81       	ldd	r19, Y+4	; 0x04
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	81 f0       	breq	.+32     	; 0x1218 <DIO_VidSetPortDirection+0x62>
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	81 f0       	breq	.+32     	; 0x1222 <DIO_VidSetPortDirection+0x6c>
    1202:	13 c0       	rjmp	.+38     	; 0x122a <DIO_VidSetPortDirection+0x74>
		    {
		    	case DIO_PORTA:
		    		DDRA= Copy_U8Direction;
    1204:	ea e3       	ldi	r30, 0x3A	; 58
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 83       	st	Z, r24
    120c:	0e c0       	rjmp	.+28     	; 0x122a <DIO_VidSetPortDirection+0x74>
		    		break;
		    	case DIO_PORTB:
		    		DDRB= Copy_U8Direction;
    120e:	e7 e3       	ldi	r30, 0x37	; 55
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	80 83       	st	Z, r24
    1216:	09 c0       	rjmp	.+18     	; 0x122a <DIO_VidSetPortDirection+0x74>
		    		break;
		    	case DIO_PORTC:
		    		DDRC= Copy_U8Direction;
    1218:	e4 e3       	ldi	r30, 0x34	; 52
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	80 83       	st	Z, r24
    1220:	04 c0       	rjmp	.+8      	; 0x122a <DIO_VidSetPortDirection+0x74>
		    	    break;
		    	case DIO_PORTD:
		    		DDRD= Copy_U8Direction;
    1222:	e1 e3       	ldi	r30, 0x31	; 49
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	80 83       	st	Z, r24
		    	    break;
		    }

}
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <DIO_VidSetPortValue>:
//functio to set the port value
void DIO_VidSetPortValue(u8 Copy_U8Port , u8 Copy_U8Value)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <DIO_VidSetPortValue+0x6>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <DIO_VidSetPortValue+0x8>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	3c 83       	std	Y+4, r19	; 0x04
    1250:	2b 83       	std	Y+3, r18	; 0x03
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	91 05       	cpc	r25, r1
    125a:	d1 f0       	breq	.+52     	; 0x1290 <DIO_VidSetPortValue+0x58>
    125c:	2b 81       	ldd	r18, Y+3	; 0x03
    125e:	3c 81       	ldd	r19, Y+4	; 0x04
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	2c f4       	brge	.+10     	; 0x1270 <DIO_VidSetPortValue+0x38>
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	61 f0       	breq	.+24     	; 0x1286 <DIO_VidSetPortValue+0x4e>
    126e:	1e c0       	rjmp	.+60     	; 0x12ac <DIO_VidSetPortValue+0x74>
    1270:	2b 81       	ldd	r18, Y+3	; 0x03
    1272:	3c 81       	ldd	r19, Y+4	; 0x04
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	81 f0       	breq	.+32     	; 0x129a <DIO_VidSetPortValue+0x62>
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	83 30       	cpi	r24, 0x03	; 3
    1280:	91 05       	cpc	r25, r1
    1282:	81 f0       	breq	.+32     	; 0x12a4 <DIO_VidSetPortValue+0x6c>
    1284:	13 c0       	rjmp	.+38     	; 0x12ac <DIO_VidSetPortValue+0x74>
		    {
		    	case DIO_PORTA:
		    		PORTA= Copy_U8Value;
    1286:	eb e3       	ldi	r30, 0x3B	; 59
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	80 83       	st	Z, r24
    128e:	0e c0       	rjmp	.+28     	; 0x12ac <DIO_VidSetPortValue+0x74>
		    		break;
		    	case DIO_PORTB:
		    		PORTB= Copy_U8Value;
    1290:	e8 e3       	ldi	r30, 0x38	; 56
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	80 83       	st	Z, r24
    1298:	09 c0       	rjmp	.+18     	; 0x12ac <DIO_VidSetPortValue+0x74>
		    		break;
		    	case DIO_PORTC:
		    		PORTC= Copy_U8Value;
    129a:	e5 e3       	ldi	r30, 0x35	; 53
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	80 83       	st	Z, r24
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <DIO_VidSetPortValue+0x74>
		    	    break;
		    	case DIO_PORTD:
		    		PORTD= Copy_U8Value;
    12a4:	e2 e3       	ldi	r30, 0x32	; 50
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	80 83       	st	Z, r24
		    	    break;
		    }

}
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <DIO_VidTogglePinValue>:
//function to toggle the pin
void DIO_VidTogglePinValue(u8 Copy_U8Port , u8 Copy_U8Pin)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <DIO_VidTogglePinValue+0x6>
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <DIO_VidTogglePinValue+0x8>
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3c 83       	std	Y+4, r19	; 0x04
    12d2:	2b 83       	std	Y+3, r18	; 0x03
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	91 05       	cpc	r25, r1
    12dc:	49 f1       	breq	.+82     	; 0x1330 <DIO_VidTogglePinValue+0x76>
    12de:	2b 81       	ldd	r18, Y+3	; 0x03
    12e0:	3c 81       	ldd	r19, Y+4	; 0x04
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	2c f4       	brge	.+10     	; 0x12f2 <DIO_VidTogglePinValue+0x38>
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	61 f0       	breq	.+24     	; 0x1308 <DIO_VidTogglePinValue+0x4e>
    12f0:	5a c0       	rjmp	.+180    	; 0x13a6 <DIO_VidTogglePinValue+0xec>
    12f2:	2b 81       	ldd	r18, Y+3	; 0x03
    12f4:	3c 81       	ldd	r19, Y+4	; 0x04
    12f6:	22 30       	cpi	r18, 0x02	; 2
    12f8:	31 05       	cpc	r19, r1
    12fa:	71 f1       	breq	.+92     	; 0x1358 <DIO_VidTogglePinValue+0x9e>
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	83 30       	cpi	r24, 0x03	; 3
    1302:	91 05       	cpc	r25, r1
    1304:	e9 f1       	breq	.+122    	; 0x1380 <DIO_VidTogglePinValue+0xc6>
    1306:	4f c0       	rjmp	.+158    	; 0x13a6 <DIO_VidTogglePinValue+0xec>
		    {
		    	case DIO_PORTA:
		    		TOGGLE_BIT(PORTA , Copy_U8Pin);
    1308:	ab e3       	ldi	r26, 0x3B	; 59
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	eb e3       	ldi	r30, 0x3B	; 59
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_VidTogglePinValue+0x6c>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <DIO_VidTogglePinValue+0x68>
    132a:	84 27       	eor	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	3b c0       	rjmp	.+118    	; 0x13a6 <DIO_VidTogglePinValue+0xec>
		    		break;
		    	case DIO_PORTB:
		    		TOGGLE_BIT(PORTB , Copy_U8Pin);
    1330:	a8 e3       	ldi	r26, 0x38	; 56
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e8 e3       	ldi	r30, 0x38	; 56
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_VidTogglePinValue+0x94>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_VidTogglePinValue+0x90>
    1352:	84 27       	eor	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	27 c0       	rjmp	.+78     	; 0x13a6 <DIO_VidTogglePinValue+0xec>
		    		break;
		    	case DIO_PORTC:
		    		TOGGLE_BIT(PORTC , Copy_U8Pin);
    1358:	a5 e3       	ldi	r26, 0x35	; 53
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e5 e3       	ldi	r30, 0x35	; 53
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_VidTogglePinValue+0xbc>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_VidTogglePinValue+0xb8>
    137a:	84 27       	eor	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	13 c0       	rjmp	.+38     	; 0x13a6 <DIO_VidTogglePinValue+0xec>
		    	    break;
		    	case DIO_PORTD:
		    		TOGGLE_BIT(PORTD , Copy_U8Pin);
    1380:	a2 e3       	ldi	r26, 0x32	; 50
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e2 e3       	ldi	r30, 0x32	; 50
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_VidTogglePinValue+0xe4>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_VidTogglePinValue+0xe0>
    13a2:	84 27       	eor	r24, r20
    13a4:	8c 93       	st	X, r24
		    	    break;
		    }

}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <DIO_U8Get_PinValue>:

u8 DIO_U8Get_PinValue(u8 Copy_U8Port , u8 Copy_U8Pin)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <DIO_U8Get_PinValue+0x6>
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <DIO_U8Get_PinValue+0x8>
    13bc:	0f 92       	push	r0
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	8a 83       	std	Y+2, r24	; 0x02
    13c4:	6b 83       	std	Y+3, r22	; 0x03
	u8 read;
	switch(Copy_U8Port)
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3d 83       	std	Y+5, r19	; 0x05
    13ce:	2c 83       	std	Y+4, r18	; 0x04
    13d0:	4c 81       	ldd	r20, Y+4	; 0x04
    13d2:	5d 81       	ldd	r21, Y+5	; 0x05
    13d4:	41 30       	cpi	r20, 0x01	; 1
    13d6:	51 05       	cpc	r21, r1
    13d8:	41 f1       	breq	.+80     	; 0x142a <DIO_U8Get_PinValue+0x76>
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	82 30       	cpi	r24, 0x02	; 2
    13e0:	91 05       	cpc	r25, r1
    13e2:	34 f4       	brge	.+12     	; 0x13f0 <DIO_U8Get_PinValue+0x3c>
    13e4:	2c 81       	ldd	r18, Y+4	; 0x04
    13e6:	3d 81       	ldd	r19, Y+5	; 0x05
    13e8:	21 15       	cp	r18, r1
    13ea:	31 05       	cpc	r19, r1
    13ec:	61 f0       	breq	.+24     	; 0x1406 <DIO_U8Get_PinValue+0x52>
    13ee:	52 c0       	rjmp	.+164    	; 0x1494 <DIO_U8Get_PinValue+0xe0>
    13f0:	4c 81       	ldd	r20, Y+4	; 0x04
    13f2:	5d 81       	ldd	r21, Y+5	; 0x05
    13f4:	42 30       	cpi	r20, 0x02	; 2
    13f6:	51 05       	cpc	r21, r1
    13f8:	51 f1       	breq	.+84     	; 0x144e <DIO_U8Get_PinValue+0x9a>
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	9d 81       	ldd	r25, Y+5	; 0x05
    13fe:	83 30       	cpi	r24, 0x03	; 3
    1400:	91 05       	cpc	r25, r1
    1402:	b9 f1       	breq	.+110    	; 0x1472 <DIO_U8Get_PinValue+0xbe>
    1404:	47 c0       	rjmp	.+142    	; 0x1494 <DIO_U8Get_PinValue+0xe0>
			    {
			    	case DIO_PORTA:
			    		read =GET_BIT(PINA , Copy_U8Pin);
    1406:	e9 e3       	ldi	r30, 0x39	; 57
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_U8Get_PinValue+0x6a>
    141a:	55 95       	asr	r21
    141c:	47 95       	ror	r20
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_U8Get_PinValue+0x66>
    1422:	ca 01       	movw	r24, r20
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	35 c0       	rjmp	.+106    	; 0x1494 <DIO_U8Get_PinValue+0xe0>
			    		break;
			    	case DIO_PORTB:
			    		read=GET_BIT(PINB , Copy_U8Pin);
    142a:	e6 e3       	ldi	r30, 0x36	; 54
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a9 01       	movw	r20, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_U8Get_PinValue+0x8e>
    143e:	55 95       	asr	r21
    1440:	47 95       	ror	r20
    1442:	8a 95       	dec	r24
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_U8Get_PinValue+0x8a>
    1446:	ca 01       	movw	r24, r20
    1448:	81 70       	andi	r24, 0x01	; 1
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	23 c0       	rjmp	.+70     	; 0x1494 <DIO_U8Get_PinValue+0xe0>
			    		break;
			    	case DIO_PORTC:
			    		read=GET_BIT(PINC , Copy_U8Pin);
    144e:	e3 e3       	ldi	r30, 0x33	; 51
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a9 01       	movw	r20, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_U8Get_PinValue+0xb2>
    1462:	55 95       	asr	r21
    1464:	47 95       	ror	r20
    1466:	8a 95       	dec	r24
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_U8Get_PinValue+0xae>
    146a:	ca 01       	movw	r24, r20
    146c:	81 70       	andi	r24, 0x01	; 1
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	11 c0       	rjmp	.+34     	; 0x1494 <DIO_U8Get_PinValue+0xe0>
			    	    break;
			    	case DIO_PORTD:
			    		read=GET_BIT(PIND , Copy_U8Pin);
    1472:	e0 e3       	ldi	r30, 0x30	; 48
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a9 01       	movw	r20, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <DIO_U8Get_PinValue+0xd6>
    1486:	55 95       	asr	r21
    1488:	47 95       	ror	r20
    148a:	8a 95       	dec	r24
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <DIO_U8Get_PinValue+0xd2>
    148e:	ca 01       	movw	r24, r20
    1490:	81 70       	andi	r24, 0x01	; 1
    1492:	89 83       	std	Y+1, r24	; 0x01
			    	    break;
			    }
	return read;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <EX_INT0VidInit>:
//INT0
#include"EXT_INT0.h"


void EX_INT0VidInit(void)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
	//for global int enable   SREG SET BIT NUM 7
	SET_BIT(SREG,7);
    14ae:	af e5       	ldi	r26, 0x5F	; 95
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	ef e5       	ldi	r30, 0x5F	; 95
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	80 68       	ori	r24, 0x80	; 128
    14ba:	8c 93       	st	X, r24
	//FOR int0 enable   GICR
	SET_BIT(GICR,6);
    14bc:	ab e5       	ldi	r26, 0x5B	; 91
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	eb e5       	ldi	r30, 0x5B	; 91
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	80 64       	ori	r24, 0x40	; 64
    14c8:	8c 93       	st	X, r24
    // FOR MODE MCUCR  ANY CHANG is the best in switches case
    SET_BIT(MCUCR,0);
    14ca:	a5 e5       	ldi	r26, 0x55	; 85
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e5 e5       	ldi	r30, 0x55	; 85
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	81 60       	ori	r24, 0x01	; 1
    14d6:	8c 93       	st	X, r24
    CLR_BIT(MCUCR,1);
    14d8:	a5 e5       	ldi	r26, 0x55	; 85
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e5 e5       	ldi	r30, 0x55	; 85
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8d 7f       	andi	r24, 0xFD	; 253
    14e4:	8c 93       	st	X, r24



}
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <LCD_SEND_COMMAND>:
#include"LCD.h"
void LCD_SEND_COMMAND(u8 Copy_U8LcdCommand)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	69 97       	sbiw	r28, 0x19	; 25
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	89 8f       	std	Y+25, r24	; 0x19
	DIO_VidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_LOW);
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	62 e0       	ldi	r22, 0x02	; 2
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	63 e0       	ldi	r22, 0x03	; 3
    1510:	40 e0       	ldi	r20, 0x00	; 0
    1512:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8LcdCommand);
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	69 8d       	ldd	r22, Y+25	; 0x19
    151a:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_HIGH);
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	64 e0       	ldi	r22, 0x04	; 4
    1522:	41 e0       	ldi	r20, 0x01	; 1
    1524:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a0 e8       	ldi	r26, 0x80	; 128
    152e:	bf e3       	ldi	r27, 0x3F	; 63
    1530:	8d 8b       	std	Y+21, r24	; 0x15
    1532:	9e 8b       	std	Y+22, r25	; 0x16
    1534:	af 8b       	std	Y+23, r26	; 0x17
    1536:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1538:	6d 89       	ldd	r22, Y+21	; 0x15
    153a:	7e 89       	ldd	r23, Y+22	; 0x16
    153c:	8f 89       	ldd	r24, Y+23	; 0x17
    153e:	98 8d       	ldd	r25, Y+24	; 0x18
    1540:	2b ea       	ldi	r18, 0xAB	; 171
    1542:	3a ea       	ldi	r19, 0xAA	; 170
    1544:	4a ea       	ldi	r20, 0xAA	; 170
    1546:	50 e4       	ldi	r21, 0x40	; 64
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	89 8b       	std	Y+17, r24	; 0x11
    1552:	9a 8b       	std	Y+18, r25	; 0x12
    1554:	ab 8b       	std	Y+19, r26	; 0x13
    1556:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1558:	69 89       	ldd	r22, Y+17	; 0x11
    155a:	7a 89       	ldd	r23, Y+18	; 0x12
    155c:	8b 89       	ldd	r24, Y+19	; 0x13
    155e:	9c 89       	ldd	r25, Y+20	; 0x14
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e8       	ldi	r20, 0x80	; 128
    1566:	5f e3       	ldi	r21, 0x3F	; 63
    1568:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    156c:	88 23       	and	r24, r24
    156e:	1c f4       	brge	.+6      	; 0x1576 <LCD_SEND_COMMAND+0x8a>
		__ticks = 1;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	88 8b       	std	Y+16, r24	; 0x10
    1574:	91 c0       	rjmp	.+290    	; 0x1698 <LCD_SEND_COMMAND+0x1ac>
	else if (__tmp > 255)
    1576:	69 89       	ldd	r22, Y+17	; 0x11
    1578:	7a 89       	ldd	r23, Y+18	; 0x12
    157a:	8b 89       	ldd	r24, Y+19	; 0x13
    157c:	9c 89       	ldd	r25, Y+20	; 0x14
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	4f e7       	ldi	r20, 0x7F	; 127
    1584:	53 e4       	ldi	r21, 0x43	; 67
    1586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    158a:	18 16       	cp	r1, r24
    158c:	0c f0       	brlt	.+2      	; 0x1590 <LCD_SEND_COMMAND+0xa4>
    158e:	7b c0       	rjmp	.+246    	; 0x1686 <LCD_SEND_COMMAND+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1590:	6d 89       	ldd	r22, Y+21	; 0x15
    1592:	7e 89       	ldd	r23, Y+22	; 0x16
    1594:	8f 89       	ldd	r24, Y+23	; 0x17
    1596:	98 8d       	ldd	r25, Y+24	; 0x18
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	4a e7       	ldi	r20, 0x7A	; 122
    159e:	54 e4       	ldi	r21, 0x44	; 68
    15a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	8c 87       	std	Y+12, r24	; 0x0c
    15aa:	9d 87       	std	Y+13, r25	; 0x0d
    15ac:	ae 87       	std	Y+14, r26	; 0x0e
    15ae:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    15b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    15b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    15b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	4a e7       	ldi	r20, 0x7A	; 122
    15be:	55 e4       	ldi	r21, 0x45	; 69
    15c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	88 87       	std	Y+8, r24	; 0x08
    15ca:	99 87       	std	Y+9, r25	; 0x09
    15cc:	aa 87       	std	Y+10, r26	; 0x0a
    15ce:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    15d0:	68 85       	ldd	r22, Y+8	; 0x08
    15d2:	79 85       	ldd	r23, Y+9	; 0x09
    15d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    15d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e8       	ldi	r20, 0x80	; 128
    15de:	5f e3       	ldi	r21, 0x3F	; 63
    15e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15e4:	88 23       	and	r24, r24
    15e6:	2c f4       	brge	.+10     	; 0x15f2 <LCD_SEND_COMMAND+0x106>
		__ticks = 1;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	9f 83       	std	Y+7, r25	; 0x07
    15ee:	8e 83       	std	Y+6, r24	; 0x06
    15f0:	3f c0       	rjmp	.+126    	; 0x1670 <LCD_SEND_COMMAND+0x184>
	else if (__tmp > 65535)
    15f2:	68 85       	ldd	r22, Y+8	; 0x08
    15f4:	79 85       	ldd	r23, Y+9	; 0x09
    15f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    15f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	3f ef       	ldi	r19, 0xFF	; 255
    15fe:	4f e7       	ldi	r20, 0x7F	; 127
    1600:	57 e4       	ldi	r21, 0x47	; 71
    1602:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1606:	18 16       	cp	r1, r24
    1608:	4c f5       	brge	.+82     	; 0x165c <LCD_SEND_COMMAND+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160a:	6c 85       	ldd	r22, Y+12	; 0x0c
    160c:	7d 85       	ldd	r23, Y+13	; 0x0d
    160e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1610:	9f 85       	ldd	r25, Y+15	; 0x0f
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e2       	ldi	r20, 0x20	; 32
    1618:	51 e4       	ldi	r21, 0x41	; 65
    161a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	9f 83       	std	Y+7, r25	; 0x07
    1630:	8e 83       	std	Y+6, r24	; 0x06
    1632:	0f c0       	rjmp	.+30     	; 0x1652 <LCD_SEND_COMMAND+0x166>
    1634:	80 e9       	ldi	r24, 0x90	; 144
    1636:	91 e0       	ldi	r25, 0x01	; 1
    1638:	9d 83       	std	Y+5, r25	; 0x05
    163a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	9d 81       	ldd	r25, Y+5	; 0x05
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <LCD_SEND_COMMAND+0x154>
    1644:	9d 83       	std	Y+5, r25	; 0x05
    1646:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1648:	8e 81       	ldd	r24, Y+6	; 0x06
    164a:	9f 81       	ldd	r25, Y+7	; 0x07
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	9f 83       	std	Y+7, r25	; 0x07
    1650:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1652:	8e 81       	ldd	r24, Y+6	; 0x06
    1654:	9f 81       	ldd	r25, Y+7	; 0x07
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	69 f7       	brne	.-38     	; 0x1634 <LCD_SEND_COMMAND+0x148>
    165a:	24 c0       	rjmp	.+72     	; 0x16a4 <LCD_SEND_COMMAND+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165c:	68 85       	ldd	r22, Y+8	; 0x08
    165e:	79 85       	ldd	r23, Y+9	; 0x09
    1660:	8a 85       	ldd	r24, Y+10	; 0x0a
    1662:	9b 85       	ldd	r25, Y+11	; 0x0b
    1664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	9f 83       	std	Y+7, r25	; 0x07
    166e:	8e 83       	std	Y+6, r24	; 0x06
    1670:	8e 81       	ldd	r24, Y+6	; 0x06
    1672:	9f 81       	ldd	r25, Y+7	; 0x07
    1674:	9b 83       	std	Y+3, r25	; 0x03
    1676:	8a 83       	std	Y+2, r24	; 0x02
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <LCD_SEND_COMMAND+0x190>
    1680:	9b 83       	std	Y+3, r25	; 0x03
    1682:	8a 83       	std	Y+2, r24	; 0x02
    1684:	0f c0       	rjmp	.+30     	; 0x16a4 <LCD_SEND_COMMAND+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1686:	69 89       	ldd	r22, Y+17	; 0x11
    1688:	7a 89       	ldd	r23, Y+18	; 0x12
    168a:	8b 89       	ldd	r24, Y+19	; 0x13
    168c:	9c 89       	ldd	r25, Y+20	; 0x14
    168e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	88 8b       	std	Y+16, r24	; 0x10
    1698:	88 89       	ldd	r24, Y+16	; 0x10
    169a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	8a 95       	dec	r24
    16a0:	f1 f7       	brne	.-4      	; 0x169e <LCD_SEND_COMMAND+0x1b2>
    16a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	64 e0       	ldi	r22, 0x04	; 4
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	//_delay_us(1);

}
    16ae:	69 96       	adiw	r28, 0x19	; 25
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <LCD_SEND_Char>:
void LCD_SEND_Char(u8 Copy_U8LcdData) //to send character
{
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	69 97       	sbiw	r28, 0x19	; 25
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	89 8f       	std	Y+25, r24	; 0x19
	DIO_VidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_HIGH);
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	62 e0       	ldi	r22, 0x02	; 2
    16da:	41 e0       	ldi	r20, 0x01	; 1
    16dc:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	63 e0       	ldi	r22, 0x03	; 3
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8LcdData);
    16ea:	82 e0       	ldi	r24, 0x02	; 2
    16ec:	69 8d       	ldd	r22, Y+25	; 0x19
    16ee:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_HIGH);
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	64 e0       	ldi	r22, 0x04	; 4
    16f6:	41 e0       	ldi	r20, 0x01	; 1
    16f8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a0 e8       	ldi	r26, 0x80	; 128
    1702:	bf e3       	ldi	r27, 0x3F	; 63
    1704:	8d 8b       	std	Y+21, r24	; 0x15
    1706:	9e 8b       	std	Y+22, r25	; 0x16
    1708:	af 8b       	std	Y+23, r26	; 0x17
    170a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    170c:	6d 89       	ldd	r22, Y+21	; 0x15
    170e:	7e 89       	ldd	r23, Y+22	; 0x16
    1710:	8f 89       	ldd	r24, Y+23	; 0x17
    1712:	98 8d       	ldd	r25, Y+24	; 0x18
    1714:	2b ea       	ldi	r18, 0xAB	; 171
    1716:	3a ea       	ldi	r19, 0xAA	; 170
    1718:	4a ea       	ldi	r20, 0xAA	; 170
    171a:	50 e4       	ldi	r21, 0x40	; 64
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	89 8b       	std	Y+17, r24	; 0x11
    1726:	9a 8b       	std	Y+18, r25	; 0x12
    1728:	ab 8b       	std	Y+19, r26	; 0x13
    172a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    172c:	69 89       	ldd	r22, Y+17	; 0x11
    172e:	7a 89       	ldd	r23, Y+18	; 0x12
    1730:	8b 89       	ldd	r24, Y+19	; 0x13
    1732:	9c 89       	ldd	r25, Y+20	; 0x14
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e8       	ldi	r20, 0x80	; 128
    173a:	5f e3       	ldi	r21, 0x3F	; 63
    173c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1740:	88 23       	and	r24, r24
    1742:	1c f4       	brge	.+6      	; 0x174a <LCD_SEND_Char+0x8a>
		__ticks = 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	88 8b       	std	Y+16, r24	; 0x10
    1748:	91 c0       	rjmp	.+290    	; 0x186c <LCD_SEND_Char+0x1ac>
	else if (__tmp > 255)
    174a:	69 89       	ldd	r22, Y+17	; 0x11
    174c:	7a 89       	ldd	r23, Y+18	; 0x12
    174e:	8b 89       	ldd	r24, Y+19	; 0x13
    1750:	9c 89       	ldd	r25, Y+20	; 0x14
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	4f e7       	ldi	r20, 0x7F	; 127
    1758:	53 e4       	ldi	r21, 0x43	; 67
    175a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    175e:	18 16       	cp	r1, r24
    1760:	0c f0       	brlt	.+2      	; 0x1764 <LCD_SEND_Char+0xa4>
    1762:	7b c0       	rjmp	.+246    	; 0x185a <LCD_SEND_Char+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1764:	6d 89       	ldd	r22, Y+21	; 0x15
    1766:	7e 89       	ldd	r23, Y+22	; 0x16
    1768:	8f 89       	ldd	r24, Y+23	; 0x17
    176a:	98 8d       	ldd	r25, Y+24	; 0x18
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	4a e7       	ldi	r20, 0x7A	; 122
    1772:	54 e4       	ldi	r21, 0x44	; 68
    1774:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	8c 87       	std	Y+12, r24	; 0x0c
    177e:	9d 87       	std	Y+13, r25	; 0x0d
    1780:	ae 87       	std	Y+14, r26	; 0x0e
    1782:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1784:	6c 85       	ldd	r22, Y+12	; 0x0c
    1786:	7d 85       	ldd	r23, Y+13	; 0x0d
    1788:	8e 85       	ldd	r24, Y+14	; 0x0e
    178a:	9f 85       	ldd	r25, Y+15	; 0x0f
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	4a e7       	ldi	r20, 0x7A	; 122
    1792:	55 e4       	ldi	r21, 0x45	; 69
    1794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	88 87       	std	Y+8, r24	; 0x08
    179e:	99 87       	std	Y+9, r25	; 0x09
    17a0:	aa 87       	std	Y+10, r26	; 0x0a
    17a2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    17a4:	68 85       	ldd	r22, Y+8	; 0x08
    17a6:	79 85       	ldd	r23, Y+9	; 0x09
    17a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e8       	ldi	r20, 0x80	; 128
    17b2:	5f e3       	ldi	r21, 0x3F	; 63
    17b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17b8:	88 23       	and	r24, r24
    17ba:	2c f4       	brge	.+10     	; 0x17c6 <LCD_SEND_Char+0x106>
		__ticks = 1;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9f 83       	std	Y+7, r25	; 0x07
    17c2:	8e 83       	std	Y+6, r24	; 0x06
    17c4:	3f c0       	rjmp	.+126    	; 0x1844 <LCD_SEND_Char+0x184>
	else if (__tmp > 65535)
    17c6:	68 85       	ldd	r22, Y+8	; 0x08
    17c8:	79 85       	ldd	r23, Y+9	; 0x09
    17ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    17cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	3f ef       	ldi	r19, 0xFF	; 255
    17d2:	4f e7       	ldi	r20, 0x7F	; 127
    17d4:	57 e4       	ldi	r21, 0x47	; 71
    17d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17da:	18 16       	cp	r1, r24
    17dc:	4c f5       	brge	.+82     	; 0x1830 <LCD_SEND_Char+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17de:	6c 85       	ldd	r22, Y+12	; 0x0c
    17e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    17e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    17e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e2       	ldi	r20, 0x20	; 32
    17ec:	51 e4       	ldi	r21, 0x41	; 65
    17ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	bc 01       	movw	r22, r24
    17f8:	cd 01       	movw	r24, r26
    17fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	9f 83       	std	Y+7, r25	; 0x07
    1804:	8e 83       	std	Y+6, r24	; 0x06
    1806:	0f c0       	rjmp	.+30     	; 0x1826 <LCD_SEND_Char+0x166>
    1808:	80 e9       	ldi	r24, 0x90	; 144
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	9d 83       	std	Y+5, r25	; 0x05
    180e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
    1812:	9d 81       	ldd	r25, Y+5	; 0x05
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <LCD_SEND_Char+0x154>
    1818:	9d 83       	std	Y+5, r25	; 0x05
    181a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181c:	8e 81       	ldd	r24, Y+6	; 0x06
    181e:	9f 81       	ldd	r25, Y+7	; 0x07
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	9f 83       	std	Y+7, r25	; 0x07
    1824:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1826:	8e 81       	ldd	r24, Y+6	; 0x06
    1828:	9f 81       	ldd	r25, Y+7	; 0x07
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	69 f7       	brne	.-38     	; 0x1808 <LCD_SEND_Char+0x148>
    182e:	24 c0       	rjmp	.+72     	; 0x1878 <LCD_SEND_Char+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1830:	68 85       	ldd	r22, Y+8	; 0x08
    1832:	79 85       	ldd	r23, Y+9	; 0x09
    1834:	8a 85       	ldd	r24, Y+10	; 0x0a
    1836:	9b 85       	ldd	r25, Y+11	; 0x0b
    1838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	9f 83       	std	Y+7, r25	; 0x07
    1842:	8e 83       	std	Y+6, r24	; 0x06
    1844:	8e 81       	ldd	r24, Y+6	; 0x06
    1846:	9f 81       	ldd	r25, Y+7	; 0x07
    1848:	9b 83       	std	Y+3, r25	; 0x03
    184a:	8a 83       	std	Y+2, r24	; 0x02
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	9b 81       	ldd	r25, Y+3	; 0x03
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <LCD_SEND_Char+0x190>
    1854:	9b 83       	std	Y+3, r25	; 0x03
    1856:	8a 83       	std	Y+2, r24	; 0x02
    1858:	0f c0       	rjmp	.+30     	; 0x1878 <LCD_SEND_Char+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    185a:	69 89       	ldd	r22, Y+17	; 0x11
    185c:	7a 89       	ldd	r23, Y+18	; 0x12
    185e:	8b 89       	ldd	r24, Y+19	; 0x13
    1860:	9c 89       	ldd	r25, Y+20	; 0x14
    1862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	88 8b       	std	Y+16, r24	; 0x10
    186c:	88 89       	ldd	r24, Y+16	; 0x10
    186e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	8a 95       	dec	r24
    1874:	f1 f7       	brne	.-4      	; 0x1872 <LCD_SEND_Char+0x1b2>
    1876:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	64 e0       	ldi	r22, 0x04	; 4
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	//_delay_us(1);

}
    1882:	69 96       	adiw	r28, 0x19	; 25
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <LCD_VidInit>:
void LCD_VidInit(void)
{
    1894:	0f 93       	push	r16
    1896:	1f 93       	push	r17
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	cc 54       	subi	r28, 0x4C	; 76
    18a2:	d0 40       	sbci	r29, 0x00	; 0
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(LCD_DATA_PORT,DIO_ALL_OUTPUT);
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	6f ef       	ldi	r22, 0xFF	; 255
    18b2:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_OUTPUT);
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	64 e0       	ldi	r22, 0x04	; 4
    18ba:	41 e0       	ldi	r20, 0x01	; 1
    18bc:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_OUTPUT);
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	63 e0       	ldi	r22, 0x03	; 3
    18c4:	41 e0       	ldi	r20, 0x01	; 1
    18c6:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_OUTPUT);
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	62 e0       	ldi	r22, 0x02	; 2
    18ce:	41 e0       	ldi	r20, 0x01	; 1
    18d0:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
    18d4:	fe 01       	movw	r30, r28
    18d6:	e7 5b       	subi	r30, 0xB7	; 183
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	ac e0       	ldi	r26, 0x0C	; 12
    18e0:	b2 e4       	ldi	r27, 0x42	; 66
    18e2:	80 83       	st	Z, r24
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	a2 83       	std	Z+2, r26	; 0x02
    18e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ea:	8e 01       	movw	r16, r28
    18ec:	0b 5b       	subi	r16, 0xBB	; 187
    18ee:	1f 4f       	sbci	r17, 0xFF	; 255
    18f0:	fe 01       	movw	r30, r28
    18f2:	e7 5b       	subi	r30, 0xB7	; 183
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	60 81       	ld	r22, Z
    18f8:	71 81       	ldd	r23, Z+1	; 0x01
    18fa:	82 81       	ldd	r24, Z+2	; 0x02
    18fc:	93 81       	ldd	r25, Z+3	; 0x03
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	4a e7       	ldi	r20, 0x7A	; 122
    1904:	55 e4       	ldi	r21, 0x45	; 69
    1906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	f8 01       	movw	r30, r16
    1910:	80 83       	st	Z, r24
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	a2 83       	std	Z+2, r26	; 0x02
    1916:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1918:	fe 01       	movw	r30, r28
    191a:	eb 5b       	subi	r30, 0xBB	; 187
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	60 81       	ld	r22, Z
    1920:	71 81       	ldd	r23, Z+1	; 0x01
    1922:	82 81       	ldd	r24, Z+2	; 0x02
    1924:	93 81       	ldd	r25, Z+3	; 0x03
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e8       	ldi	r20, 0x80	; 128
    192c:	5f e3       	ldi	r21, 0x3F	; 63
    192e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1932:	88 23       	and	r24, r24
    1934:	44 f4       	brge	.+16     	; 0x1946 <LCD_VidInit+0xb2>
		__ticks = 1;
    1936:	fe 01       	movw	r30, r28
    1938:	ed 5b       	subi	r30, 0xBD	; 189
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	91 83       	std	Z+1, r25	; 0x01
    1942:	80 83       	st	Z, r24
    1944:	64 c0       	rjmp	.+200    	; 0x1a0e <LCD_VidInit+0x17a>
	else if (__tmp > 65535)
    1946:	fe 01       	movw	r30, r28
    1948:	eb 5b       	subi	r30, 0xBB	; 187
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	60 81       	ld	r22, Z
    194e:	71 81       	ldd	r23, Z+1	; 0x01
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	3f ef       	ldi	r19, 0xFF	; 255
    1958:	4f e7       	ldi	r20, 0x7F	; 127
    195a:	57 e4       	ldi	r21, 0x47	; 71
    195c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1960:	18 16       	cp	r1, r24
    1962:	0c f0       	brlt	.+2      	; 0x1966 <LCD_VidInit+0xd2>
    1964:	43 c0       	rjmp	.+134    	; 0x19ec <LCD_VidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1966:	fe 01       	movw	r30, r28
    1968:	e7 5b       	subi	r30, 0xB7	; 183
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	60 81       	ld	r22, Z
    196e:	71 81       	ldd	r23, Z+1	; 0x01
    1970:	82 81       	ldd	r24, Z+2	; 0x02
    1972:	93 81       	ldd	r25, Z+3	; 0x03
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e2       	ldi	r20, 0x20	; 32
    197a:	51 e4       	ldi	r21, 0x41	; 65
    197c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	8e 01       	movw	r16, r28
    1986:	0d 5b       	subi	r16, 0xBD	; 189
    1988:	1f 4f       	sbci	r17, 0xFF	; 255
    198a:	bc 01       	movw	r22, r24
    198c:	cd 01       	movw	r24, r26
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	f8 01       	movw	r30, r16
    1998:	91 83       	std	Z+1, r25	; 0x01
    199a:	80 83       	st	Z, r24
    199c:	1f c0       	rjmp	.+62     	; 0x19dc <LCD_VidInit+0x148>
    199e:	fe 01       	movw	r30, r28
    19a0:	ef 5b       	subi	r30, 0xBF	; 191
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	80 e9       	ldi	r24, 0x90	; 144
    19a6:	91 e0       	ldi	r25, 0x01	; 1
    19a8:	91 83       	std	Z+1, r25	; 0x01
    19aa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19ac:	fe 01       	movw	r30, r28
    19ae:	ef 5b       	subi	r30, 0xBF	; 191
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <LCD_VidInit+0x122>
    19ba:	fe 01       	movw	r30, r28
    19bc:	ef 5b       	subi	r30, 0xBF	; 191
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	91 83       	std	Z+1, r25	; 0x01
    19c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c4:	de 01       	movw	r26, r28
    19c6:	ad 5b       	subi	r26, 0xBD	; 189
    19c8:	bf 4f       	sbci	r27, 0xFF	; 255
    19ca:	fe 01       	movw	r30, r28
    19cc:	ed 5b       	subi	r30, 0xBD	; 189
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	80 81       	ld	r24, Z
    19d2:	91 81       	ldd	r25, Z+1	; 0x01
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	11 96       	adiw	r26, 0x01	; 1
    19d8:	9c 93       	st	X, r25
    19da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19dc:	fe 01       	movw	r30, r28
    19de:	ed 5b       	subi	r30, 0xBD	; 189
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	80 81       	ld	r24, Z
    19e4:	91 81       	ldd	r25, Z+1	; 0x01
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	d1 f6       	brne	.-76     	; 0x199e <LCD_VidInit+0x10a>
    19ea:	24 c0       	rjmp	.+72     	; 0x1a34 <LCD_VidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ec:	8e 01       	movw	r16, r28
    19ee:	0d 5b       	subi	r16, 0xBD	; 189
    19f0:	1f 4f       	sbci	r17, 0xFF	; 255
    19f2:	fe 01       	movw	r30, r28
    19f4:	eb 5b       	subi	r30, 0xBB	; 187
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	60 81       	ld	r22, Z
    19fa:	71 81       	ldd	r23, Z+1	; 0x01
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	93 81       	ldd	r25, Z+3	; 0x03
    1a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	f8 01       	movw	r30, r16
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	80 83       	st	Z, r24
    1a0e:	fe 01       	movw	r30, r28
    1a10:	ed 5b       	subi	r30, 0xBD	; 189
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	80 81       	ld	r24, Z
    1a16:	91 81       	ldd	r25, Z+1	; 0x01
    1a18:	fe 01       	movw	r30, r28
    1a1a:	ff 96       	adiw	r30, 0x3f	; 63
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	80 83       	st	Z, r24
    1a20:	fe 01       	movw	r30, r28
    1a22:	ff 96       	adiw	r30, 0x3f	; 63
    1a24:	80 81       	ld	r24, Z
    1a26:	91 81       	ldd	r25, Z+1	; 0x01
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <LCD_VidInit+0x194>
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	ff 96       	adiw	r30, 0x3f	; 63
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	80 83       	st	Z, r24
	//DELAY MORE THAN 30 MS
	_delay_ms(35);

	LCD_SEND_COMMAND(0b00111000); //0011NFXX ,    N=HOW MANY LINES YOU WANT TO USE(1)  ,   F= FONT SIZE(0=5*7)
    1a34:	88 e3       	ldi	r24, 0x38	; 56
    1a36:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a8 e4       	ldi	r26, 0x48	; 72
    1a40:	b2 e4       	ldi	r27, 0x42	; 66
    1a42:	8b af       	std	Y+59, r24	; 0x3b
    1a44:	9c af       	std	Y+60, r25	; 0x3c
    1a46:	ad af       	std	Y+61, r26	; 0x3d
    1a48:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a4a:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a4c:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a50:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a52:	2b ea       	ldi	r18, 0xAB	; 171
    1a54:	3a ea       	ldi	r19, 0xAA	; 170
    1a56:	4a ea       	ldi	r20, 0xAA	; 170
    1a58:	50 e4       	ldi	r21, 0x40	; 64
    1a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	8f ab       	std	Y+55, r24	; 0x37
    1a64:	98 af       	std	Y+56, r25	; 0x38
    1a66:	a9 af       	std	Y+57, r26	; 0x39
    1a68:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a6a:	6f a9       	ldd	r22, Y+55	; 0x37
    1a6c:	78 ad       	ldd	r23, Y+56	; 0x38
    1a6e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a70:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	5f e3       	ldi	r21, 0x3F	; 63
    1a7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	1c f4       	brge	.+6      	; 0x1a88 <LCD_VidInit+0x1f4>
		__ticks = 1;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	8e ab       	std	Y+54, r24	; 0x36
    1a86:	91 c0       	rjmp	.+290    	; 0x1baa <LCD_VidInit+0x316>
	else if (__tmp > 255)
    1a88:	6f a9       	ldd	r22, Y+55	; 0x37
    1a8a:	78 ad       	ldd	r23, Y+56	; 0x38
    1a8c:	89 ad       	ldd	r24, Y+57	; 0x39
    1a8e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	4f e7       	ldi	r20, 0x7F	; 127
    1a96:	53 e4       	ldi	r21, 0x43	; 67
    1a98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a9c:	18 16       	cp	r1, r24
    1a9e:	0c f0       	brlt	.+2      	; 0x1aa2 <LCD_VidInit+0x20e>
    1aa0:	7b c0       	rjmp	.+246    	; 0x1b98 <LCD_VidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1aa2:	6b ad       	ldd	r22, Y+59	; 0x3b
    1aa4:	7c ad       	ldd	r23, Y+60	; 0x3c
    1aa6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aa8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	4a e7       	ldi	r20, 0x7A	; 122
    1ab0:	54 e4       	ldi	r21, 0x44	; 68
    1ab2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	8a ab       	std	Y+50, r24	; 0x32
    1abc:	9b ab       	std	Y+51, r25	; 0x33
    1abe:	ac ab       	std	Y+52, r26	; 0x34
    1ac0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac2:	6a a9       	ldd	r22, Y+50	; 0x32
    1ac4:	7b a9       	ldd	r23, Y+51	; 0x33
    1ac6:	8c a9       	ldd	r24, Y+52	; 0x34
    1ac8:	9d a9       	ldd	r25, Y+53	; 0x35
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	4a e7       	ldi	r20, 0x7A	; 122
    1ad0:	55 e4       	ldi	r21, 0x45	; 69
    1ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	8e a7       	std	Y+46, r24	; 0x2e
    1adc:	9f a7       	std	Y+47, r25	; 0x2f
    1ade:	a8 ab       	std	Y+48, r26	; 0x30
    1ae0:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1ae2:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ae4:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ae6:	88 a9       	ldd	r24, Y+48	; 0x30
    1ae8:	99 a9       	ldd	r25, Y+49	; 0x31
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e8       	ldi	r20, 0x80	; 128
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1af6:	88 23       	and	r24, r24
    1af8:	2c f4       	brge	.+10     	; 0x1b04 <LCD_VidInit+0x270>
		__ticks = 1;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9d a7       	std	Y+45, r25	; 0x2d
    1b00:	8c a7       	std	Y+44, r24	; 0x2c
    1b02:	3f c0       	rjmp	.+126    	; 0x1b82 <LCD_VidInit+0x2ee>
	else if (__tmp > 65535)
    1b04:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b06:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b08:	88 a9       	ldd	r24, Y+48	; 0x30
    1b0a:	99 a9       	ldd	r25, Y+49	; 0x31
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	3f ef       	ldi	r19, 0xFF	; 255
    1b10:	4f e7       	ldi	r20, 0x7F	; 127
    1b12:	57 e4       	ldi	r21, 0x47	; 71
    1b14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b18:	18 16       	cp	r1, r24
    1b1a:	4c f5       	brge	.+82     	; 0x1b6e <LCD_VidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1c:	6a a9       	ldd	r22, Y+50	; 0x32
    1b1e:	7b a9       	ldd	r23, Y+51	; 0x33
    1b20:	8c a9       	ldd	r24, Y+52	; 0x34
    1b22:	9d a9       	ldd	r25, Y+53	; 0x35
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e2       	ldi	r20, 0x20	; 32
    1b2a:	51 e4       	ldi	r21, 0x41	; 65
    1b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	bc 01       	movw	r22, r24
    1b36:	cd 01       	movw	r24, r26
    1b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	9d a7       	std	Y+45, r25	; 0x2d
    1b42:	8c a7       	std	Y+44, r24	; 0x2c
    1b44:	0f c0       	rjmp	.+30     	; 0x1b64 <LCD_VidInit+0x2d0>
    1b46:	80 e9       	ldi	r24, 0x90	; 144
    1b48:	91 e0       	ldi	r25, 0x01	; 1
    1b4a:	9b a7       	std	Y+43, r25	; 0x2b
    1b4c:	8a a7       	std	Y+42, r24	; 0x2a
    1b4e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b50:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <LCD_VidInit+0x2be>
    1b56:	9b a7       	std	Y+43, r25	; 0x2b
    1b58:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b5c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	9d a7       	std	Y+45, r25	; 0x2d
    1b62:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b64:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b66:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	69 f7       	brne	.-38     	; 0x1b46 <LCD_VidInit+0x2b2>
    1b6c:	24 c0       	rjmp	.+72     	; 0x1bb6 <LCD_VidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b70:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b72:	88 a9       	ldd	r24, Y+48	; 0x30
    1b74:	99 a9       	ldd	r25, Y+49	; 0x31
    1b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	9d a7       	std	Y+45, r25	; 0x2d
    1b80:	8c a7       	std	Y+44, r24	; 0x2c
    1b82:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b84:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b86:	99 a7       	std	Y+41, r25	; 0x29
    1b88:	88 a7       	std	Y+40, r24	; 0x28
    1b8a:	88 a5       	ldd	r24, Y+40	; 0x28
    1b8c:	99 a5       	ldd	r25, Y+41	; 0x29
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <LCD_VidInit+0x2fa>
    1b92:	99 a7       	std	Y+41, r25	; 0x29
    1b94:	88 a7       	std	Y+40, r24	; 0x28
    1b96:	0f c0       	rjmp	.+30     	; 0x1bb6 <LCD_VidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b98:	6f a9       	ldd	r22, Y+55	; 0x37
    1b9a:	78 ad       	ldd	r23, Y+56	; 0x38
    1b9c:	89 ad       	ldd	r24, Y+57	; 0x39
    1b9e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	8e ab       	std	Y+54, r24	; 0x36
    1baa:	8e a9       	ldd	r24, Y+54	; 0x36
    1bac:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bae:	8f a1       	ldd	r24, Y+39	; 0x27
    1bb0:	8a 95       	dec	r24
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <LCD_VidInit+0x31c>
    1bb4:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50); // DELAY MORE THAN 39 MICRO SEC
	LCD_SEND_COMMAND(0b00001100);  //00001DCB , C = LIKE FLAF WHEN TO STOP(OFF) , B= BLANKING , D= DISPLAY
    1bb6:	8c e0       	ldi	r24, 0x0C	; 12
    1bb8:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a8 e4       	ldi	r26, 0x48	; 72
    1bc2:	b2 e4       	ldi	r27, 0x42	; 66
    1bc4:	8b a3       	std	Y+35, r24	; 0x23
    1bc6:	9c a3       	std	Y+36, r25	; 0x24
    1bc8:	ad a3       	std	Y+37, r26	; 0x25
    1bca:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bcc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bce:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd4:	2b ea       	ldi	r18, 0xAB	; 171
    1bd6:	3a ea       	ldi	r19, 0xAA	; 170
    1bd8:	4a ea       	ldi	r20, 0xAA	; 170
    1bda:	50 e4       	ldi	r21, 0x40	; 64
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	8f 8f       	std	Y+31, r24	; 0x1f
    1be6:	98 a3       	std	Y+32, r25	; 0x20
    1be8:	a9 a3       	std	Y+33, r26	; 0x21
    1bea:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1bec:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bee:	78 a1       	ldd	r23, Y+32	; 0x20
    1bf0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	1c f4       	brge	.+6      	; 0x1c0a <LCD_VidInit+0x376>
		__ticks = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	8e 8f       	std	Y+30, r24	; 0x1e
    1c08:	91 c0       	rjmp	.+290    	; 0x1d2c <LCD_VidInit+0x498>
	else if (__tmp > 255)
    1c0a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c0c:	78 a1       	ldd	r23, Y+32	; 0x20
    1c0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c10:	9a a1       	ldd	r25, Y+34	; 0x22
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	4f e7       	ldi	r20, 0x7F	; 127
    1c18:	53 e4       	ldi	r21, 0x43	; 67
    1c1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c1e:	18 16       	cp	r1, r24
    1c20:	0c f0       	brlt	.+2      	; 0x1c24 <LCD_VidInit+0x390>
    1c22:	7b c0       	rjmp	.+246    	; 0x1d1a <LCD_VidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    1c24:	6b a1       	ldd	r22, Y+35	; 0x23
    1c26:	7c a1       	ldd	r23, Y+36	; 0x24
    1c28:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	4a e7       	ldi	r20, 0x7A	; 122
    1c32:	54 e4       	ldi	r21, 0x44	; 68
    1c34:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	8a 8f       	std	Y+26, r24	; 0x1a
    1c3e:	9b 8f       	std	Y+27, r25	; 0x1b
    1c40:	ac 8f       	std	Y+28, r26	; 0x1c
    1c42:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c44:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c46:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c48:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c4a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	4a e7       	ldi	r20, 0x7A	; 122
    1c52:	55 e4       	ldi	r21, 0x45	; 69
    1c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	8e 8b       	std	Y+22, r24	; 0x16
    1c5e:	9f 8b       	std	Y+23, r25	; 0x17
    1c60:	a8 8f       	std	Y+24, r26	; 0x18
    1c62:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c64:	6e 89       	ldd	r22, Y+22	; 0x16
    1c66:	7f 89       	ldd	r23, Y+23	; 0x17
    1c68:	88 8d       	ldd	r24, Y+24	; 0x18
    1c6a:	99 8d       	ldd	r25, Y+25	; 0x19
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e8       	ldi	r20, 0x80	; 128
    1c72:	5f e3       	ldi	r21, 0x3F	; 63
    1c74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c78:	88 23       	and	r24, r24
    1c7a:	2c f4       	brge	.+10     	; 0x1c86 <LCD_VidInit+0x3f2>
		__ticks = 1;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	9d 8b       	std	Y+21, r25	; 0x15
    1c82:	8c 8b       	std	Y+20, r24	; 0x14
    1c84:	3f c0       	rjmp	.+126    	; 0x1d04 <LCD_VidInit+0x470>
	else if (__tmp > 65535)
    1c86:	6e 89       	ldd	r22, Y+22	; 0x16
    1c88:	7f 89       	ldd	r23, Y+23	; 0x17
    1c8a:	88 8d       	ldd	r24, Y+24	; 0x18
    1c8c:	99 8d       	ldd	r25, Y+25	; 0x19
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	3f ef       	ldi	r19, 0xFF	; 255
    1c92:	4f e7       	ldi	r20, 0x7F	; 127
    1c94:	57 e4       	ldi	r21, 0x47	; 71
    1c96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c9a:	18 16       	cp	r1, r24
    1c9c:	4c f5       	brge	.+82     	; 0x1cf0 <LCD_VidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ca0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ca2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ca4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e2       	ldi	r20, 0x20	; 32
    1cac:	51 e4       	ldi	r21, 0x41	; 65
    1cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	bc 01       	movw	r22, r24
    1cb8:	cd 01       	movw	r24, r26
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	9d 8b       	std	Y+21, r25	; 0x15
    1cc4:	8c 8b       	std	Y+20, r24	; 0x14
    1cc6:	0f c0       	rjmp	.+30     	; 0x1ce6 <LCD_VidInit+0x452>
    1cc8:	80 e9       	ldi	r24, 0x90	; 144
    1cca:	91 e0       	ldi	r25, 0x01	; 1
    1ccc:	9b 8b       	std	Y+19, r25	; 0x13
    1cce:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cd0:	8a 89       	ldd	r24, Y+18	; 0x12
    1cd2:	9b 89       	ldd	r25, Y+19	; 0x13
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <LCD_VidInit+0x440>
    1cd8:	9b 8b       	std	Y+19, r25	; 0x13
    1cda:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cdc:	8c 89       	ldd	r24, Y+20	; 0x14
    1cde:	9d 89       	ldd	r25, Y+21	; 0x15
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	9d 8b       	std	Y+21, r25	; 0x15
    1ce4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ce8:	9d 89       	ldd	r25, Y+21	; 0x15
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	69 f7       	brne	.-38     	; 0x1cc8 <LCD_VidInit+0x434>
    1cee:	24 c0       	rjmp	.+72     	; 0x1d38 <LCD_VidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf0:	6e 89       	ldd	r22, Y+22	; 0x16
    1cf2:	7f 89       	ldd	r23, Y+23	; 0x17
    1cf4:	88 8d       	ldd	r24, Y+24	; 0x18
    1cf6:	99 8d       	ldd	r25, Y+25	; 0x19
    1cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	9d 8b       	std	Y+21, r25	; 0x15
    1d02:	8c 8b       	std	Y+20, r24	; 0x14
    1d04:	8c 89       	ldd	r24, Y+20	; 0x14
    1d06:	9d 89       	ldd	r25, Y+21	; 0x15
    1d08:	99 8b       	std	Y+17, r25	; 0x11
    1d0a:	88 8b       	std	Y+16, r24	; 0x10
    1d0c:	88 89       	ldd	r24, Y+16	; 0x10
    1d0e:	99 89       	ldd	r25, Y+17	; 0x11
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <LCD_VidInit+0x47c>
    1d14:	99 8b       	std	Y+17, r25	; 0x11
    1d16:	88 8b       	std	Y+16, r24	; 0x10
    1d18:	0f c0       	rjmp	.+30     	; 0x1d38 <LCD_VidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d1a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d1c:	78 a1       	ldd	r23, Y+32	; 0x20
    1d1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d20:	9a a1       	ldd	r25, Y+34	; 0x22
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	8e 8f       	std	Y+30, r24	; 0x1e
    1d2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d2e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d32:	8a 95       	dec	r24
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <LCD_VidInit+0x49e>
    1d36:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_SEND_COMMAND(0b00000001);
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	a0 e0       	ldi	r26, 0x00	; 0
    1d44:	b0 e4       	ldi	r27, 0x40	; 64
    1d46:	8b 87       	std	Y+11, r24	; 0x0b
    1d48:	9c 87       	std	Y+12, r25	; 0x0c
    1d4a:	ad 87       	std	Y+13, r26	; 0x0d
    1d4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a e7       	ldi	r20, 0x7A	; 122
    1d5c:	55 e4       	ldi	r21, 0x45	; 69
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	8f 83       	std	Y+7, r24	; 0x07
    1d68:	98 87       	std	Y+8, r25	; 0x08
    1d6a:	a9 87       	std	Y+9, r26	; 0x09
    1d6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d70:	78 85       	ldd	r23, Y+8	; 0x08
    1d72:	89 85       	ldd	r24, Y+9	; 0x09
    1d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e8       	ldi	r20, 0x80	; 128
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	2c f4       	brge	.+10     	; 0x1d90 <LCD_VidInit+0x4fc>
		__ticks = 1;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	8d 83       	std	Y+5, r24	; 0x05
    1d8e:	3f c0       	rjmp	.+126    	; 0x1e0e <LCD_VidInit+0x57a>
	else if (__tmp > 65535)
    1d90:	6f 81       	ldd	r22, Y+7	; 0x07
    1d92:	78 85       	ldd	r23, Y+8	; 0x08
    1d94:	89 85       	ldd	r24, Y+9	; 0x09
    1d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	4f e7       	ldi	r20, 0x7F	; 127
    1d9e:	57 e4       	ldi	r21, 0x47	; 71
    1da0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da4:	18 16       	cp	r1, r24
    1da6:	4c f5       	brge	.+82     	; 0x1dfa <LCD_VidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1daa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e2       	ldi	r20, 0x20	; 32
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	9e 83       	std	Y+6, r25	; 0x06
    1dce:	8d 83       	std	Y+5, r24	; 0x05
    1dd0:	0f c0       	rjmp	.+30     	; 0x1df0 <LCD_VidInit+0x55c>
    1dd2:	80 e9       	ldi	r24, 0x90	; 144
    1dd4:	91 e0       	ldi	r25, 0x01	; 1
    1dd6:	9c 83       	std	Y+4, r25	; 0x04
    1dd8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <LCD_VidInit+0x54a>
    1de2:	9c 83       	std	Y+4, r25	; 0x04
    1de4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	9e 83       	std	Y+6, r25	; 0x06
    1dee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	9e 81       	ldd	r25, Y+6	; 0x06
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	69 f7       	brne	.-38     	; 0x1dd2 <LCD_VidInit+0x53e>
    1df8:	14 c0       	rjmp	.+40     	; 0x1e22 <LCD_VidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfc:	78 85       	ldd	r23, Y+8	; 0x08
    1dfe:	89 85       	ldd	r24, Y+9	; 0x09
    1e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
    1e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e10:	9e 81       	ldd	r25, Y+6	; 0x06
    1e12:	9a 83       	std	Y+2, r25	; 0x02
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_VidInit+0x586>
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // delay more than 1.5 ms
	LCD_SEND_COMMAND(0b00000110); //write from left to right
    1e22:	86 e0       	ldi	r24, 0x06	; 6
    1e24:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>

}
    1e28:	c4 5b       	subi	r28, 0xB4	; 180
    1e2a:	df 4f       	sbci	r29, 0xFF	; 255
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	08 95       	ret

00001e40 <LCD_VidSendStrig>:

void LCD_VidSendStrig(u8 * Copy_Pu8String)
{
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <LCD_VidSendStrig+0x6>
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	9a 83       	std	Y+2, r25	; 0x02
    1e4c:	89 83       	std	Y+1, r24	; 0x01
    1e4e:	0a c0       	rjmp	.+20     	; 0x1e64 <LCD_VidSendStrig+0x24>

	while(*Copy_Pu8String != '\0' ) // \0 is the last element in the arrray
	{
		LCD_SEND_Char(*Copy_Pu8String);
    1e50:	e9 81       	ldd	r30, Y+1	; 0x01
    1e52:	fa 81       	ldd	r31, Y+2	; 0x02
    1e54:	80 81       	ld	r24, Z
    1e56:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <LCD_SEND_Char>
		Copy_Pu8String++;
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	9a 83       	std	Y+2, r25	; 0x02
    1e62:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_VidSendStrig(u8 * Copy_Pu8String)
{

	while(*Copy_Pu8String != '\0' ) // \0 is the last element in the arrray
    1e64:	e9 81       	ldd	r30, Y+1	; 0x01
    1e66:	fa 81       	ldd	r31, Y+2	; 0x02
    1e68:	80 81       	ld	r24, Z
    1e6a:	88 23       	and	r24, r24
    1e6c:	89 f7       	brne	.-30     	; 0x1e50 <LCD_VidSendStrig+0x10>
	{
		LCD_SEND_Char(*Copy_Pu8String);
		Copy_Pu8String++;

	}
}
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <LCD_VidGoTOLocation>:

void LCD_VidGoTOLocation(u8 Copy_U8RowNumber  , u8 Copy_U8ColNumber)
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	62 97       	sbiw	r28, 0x12	; 18
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
    1e8c:	8f 87       	std	Y+15, r24	; 0x0f
    1e8e:	68 8b       	std	Y+16, r22	; 0x10
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a0 e0       	ldi	r26, 0x00	; 0
    1e96:	b0 e4       	ldi	r27, 0x40	; 64
    1e98:	8b 87       	std	Y+11, r24	; 0x0b
    1e9a:	9c 87       	std	Y+12, r25	; 0x0c
    1e9c:	ad 87       	std	Y+13, r26	; 0x0d
    1e9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	4a e7       	ldi	r20, 0x7A	; 122
    1eae:	55 e4       	ldi	r21, 0x45	; 69
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	8f 83       	std	Y+7, r24	; 0x07
    1eba:	98 87       	std	Y+8, r25	; 0x08
    1ebc:	a9 87       	std	Y+9, r26	; 0x09
    1ebe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec2:	78 85       	ldd	r23, Y+8	; 0x08
    1ec4:	89 85       	ldd	r24, Y+9	; 0x09
    1ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e8       	ldi	r20, 0x80	; 128
    1ece:	5f e3       	ldi	r21, 0x3F	; 63
    1ed0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed4:	88 23       	and	r24, r24
    1ed6:	2c f4       	brge	.+10     	; 0x1ee2 <LCD_VidGoTOLocation+0x6a>
		__ticks = 1;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	9e 83       	std	Y+6, r25	; 0x06
    1ede:	8d 83       	std	Y+5, r24	; 0x05
    1ee0:	3f c0       	rjmp	.+126    	; 0x1f60 <LCD_VidGoTOLocation+0xe8>
	else if (__tmp > 65535)
    1ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee4:	78 85       	ldd	r23, Y+8	; 0x08
    1ee6:	89 85       	ldd	r24, Y+9	; 0x09
    1ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	3f ef       	ldi	r19, 0xFF	; 255
    1eee:	4f e7       	ldi	r20, 0x7F	; 127
    1ef0:	57 e4       	ldi	r21, 0x47	; 71
    1ef2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef6:	18 16       	cp	r1, r24
    1ef8:	4c f5       	brge	.+82     	; 0x1f4c <LCD_VidGoTOLocation+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e2       	ldi	r20, 0x20	; 32
    1f08:	51 e4       	ldi	r21, 0x41	; 65
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	9e 83       	std	Y+6, r25	; 0x06
    1f20:	8d 83       	std	Y+5, r24	; 0x05
    1f22:	0f c0       	rjmp	.+30     	; 0x1f42 <LCD_VidGoTOLocation+0xca>
    1f24:	80 e9       	ldi	r24, 0x90	; 144
    1f26:	91 e0       	ldi	r25, 0x01	; 1
    1f28:	9c 83       	std	Y+4, r25	; 0x04
    1f2a:	8b 83       	std	Y+3, r24	; 0x03
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <LCD_VidGoTOLocation+0xb8>
    1f34:	9c 83       	std	Y+4, r25	; 0x04
    1f36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	9e 83       	std	Y+6, r25	; 0x06
    1f40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f42:	8d 81       	ldd	r24, Y+5	; 0x05
    1f44:	9e 81       	ldd	r25, Y+6	; 0x06
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	69 f7       	brne	.-38     	; 0x1f24 <LCD_VidGoTOLocation+0xac>
    1f4a:	14 c0       	rjmp	.+40     	; 0x1f74 <LCD_VidGoTOLocation+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4e:	78 85       	ldd	r23, Y+8	; 0x08
    1f50:	89 85       	ldd	r24, Y+9	; 0x09
    1f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	9e 83       	std	Y+6, r25	; 0x06
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
    1f60:	8d 81       	ldd	r24, Y+5	; 0x05
    1f62:	9e 81       	ldd	r25, Y+6	; 0x06
    1f64:	9a 83       	std	Y+2, r25	; 0x02
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <LCD_VidGoTOLocation+0xf4>
    1f70:	9a 83       	std	Y+2, r25	; 0x02
    1f72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	switch(Copy_U8RowNumber)
    1f74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	3a 8b       	std	Y+18, r19	; 0x12
    1f7c:	29 8b       	std	Y+17, r18	; 0x11
    1f7e:	89 89       	ldd	r24, Y+17	; 0x11
    1f80:	9a 89       	ldd	r25, Y+18	; 0x12
    1f82:	81 30       	cpi	r24, 0x01	; 1
    1f84:	91 05       	cpc	r25, r1
    1f86:	31 f0       	breq	.+12     	; 0x1f94 <LCD_VidGoTOLocation+0x11c>
    1f88:	29 89       	ldd	r18, Y+17	; 0x11
    1f8a:	3a 89       	ldd	r19, Y+18	; 0x12
    1f8c:	22 30       	cpi	r18, 0x02	; 2
    1f8e:	31 05       	cpc	r19, r1
    1f90:	31 f0       	breq	.+12     	; 0x1f9e <LCD_VidGoTOLocation+0x126>
    1f92:	09 c0       	rjmp	.+18     	; 0x1fa6 <LCD_VidGoTOLocation+0x12e>
		{

		    case LCD_RowOne: LCD_SEND_COMMAND(LCD_RowOneStart+ Copy_U8ColNumber);
    1f94:	88 89       	ldd	r24, Y+16	; 0x10
    1f96:	80 58       	subi	r24, 0x80	; 128
    1f98:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
    1f9c:	04 c0       	rjmp	.+8      	; 0x1fa6 <LCD_VidGoTOLocation+0x12e>
		                     break;
		    case LCD_RowTwo: LCD_SEND_COMMAND(LCD_RowTwoStart + Copy_U8ColNumber);
    1f9e:	88 89       	ldd	r24, Y+16	; 0x10
    1fa0:	80 54       	subi	r24, 0x40	; 64
    1fa2:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
		                     break;
		}

}
    1fa6:	62 96       	adiw	r28, 0x12	; 18
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <LCD_VidSendNumber>:

void LCD_VidSendNumber(u32 Copy_U32Number)
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	a4 97       	sbiw	r28, 0x24	; 36
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	69 a3       	std	Y+33, r22	; 0x21
    1fce:	7a a3       	std	Y+34, r23	; 0x22
    1fd0:	8b a3       	std	Y+35, r24	; 0x23
    1fd2:	9c a3       	std	Y+36, r25	; 0x24
	u8 nums[32];
	itoa(Copy_U32Number, nums , 10);  //convert integer data type to string datatype ,10 (base-DEC)
    1fd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd8:	9e 01       	movw	r18, r28
    1fda:	2f 5f       	subi	r18, 0xFF	; 255
    1fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fde:	b9 01       	movw	r22, r18
    1fe0:	4a e0       	ldi	r20, 0x0A	; 10
    1fe2:	50 e0       	ldi	r21, 0x00	; 0
    1fe4:	0e 94 52 14 	call	0x28a4	; 0x28a4 <itoa>
	LCD_VidSendStrig(nums);
    1fe8:	ce 01       	movw	r24, r28
    1fea:	01 96       	adiw	r24, 0x01	; 1
    1fec:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>

}
    1ff0:	a4 96       	adiw	r28, 0x24	; 36
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <SPI_MasterInit>:
#include"STD_TYPES.h"
#include"DIO.h"
#include"SPI.h"

void SPI_MasterInit(void)
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN5,DIO_OUTPUT); //MOSI
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	65 e0       	ldi	r22, 0x05	; 5
    200e:	41 e0       	ldi	r20, 0x01	; 1
    2010:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_INPUT); //MISO
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	66 e0       	ldi	r22, 0x06	; 6
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>

DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN7,DIO_OUTPUT);//CLOCK
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	67 e0       	ldi	r22, 0x07	; 7
    2022:	41 e0       	ldi	r20, 0x01	; 1
    2024:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN4,DIO_OUTPUT); //CS
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	64 e0       	ldi	r22, 0x04	; 4
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
DIO_VidSetPinValue(DIO_PORTB,DIO_PIN4,DIO_HIGH);
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	64 e0       	ldi	r22, 0x04	; 4
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>

SPCR=0b01011110;
    203c:	ed e2       	ldi	r30, 0x2D	; 45
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	8e e5       	ldi	r24, 0x5E	; 94
    2042:	80 83       	st	Z, r24
 * pin2-------cphase
 * pin1,pin0  -------  prescale  64
 * */


}
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <SPI_u8MasterTrancieve>:
u8 SPI_u8MasterTrancieve(u8 Data)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	0f 92       	push	r0
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	89 83       	std	Y+1, r24	; 0x01
	DIO_VidSetPinValue(DIO_PORTB,DIO_PIN4,DIO_LOW);
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	64 e0       	ldi	r22, 0x04	; 4
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	SPDR= Data;
    2060:	ef e2       	ldi	r30, 0x2F	; 47
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,SPIF)==0);
    2068:	ee e2       	ldi	r30, 0x2E	; 46
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	88 23       	and	r24, r24
    2070:	dc f7       	brge	.-10     	; 0x2068 <SPI_u8MasterTrancieve+0x1e>
	DIO_VidSetPinValue(DIO_PORTB,DIO_PIN4,DIO_HIGH);
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	64 e0       	ldi	r22, 0x04	; 4
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	return SPDR;
    207c:	ef e2       	ldi	r30, 0x2F	; 47
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
}
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <SPT_SlaveInit>:
void SPT_SlaveInit(void)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN5,DIO_INPUT);
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	65 e0       	ldi	r22, 0x05	; 5
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	66 e0       	ldi	r22, 0x06	; 6
    20a0:	41 e0       	ldi	r20, 0x01	; 1
    20a2:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>

	DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN7,DIO_INPUT);
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	67 e0       	ldi	r22, 0x07	; 7
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN4,DIO_INPUT);
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	64 e0       	ldi	r22, 0x04	; 4
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	SPCR=0b01001110;
    20ba:	ed e2       	ldi	r30, 0x2D	; 45
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	8e e4       	ldi	r24, 0x4E	; 78
    20c0:	80 83       	st	Z, r24
	 * pin4    ===  slave  =0
	 * pin3 -----cpol
	 * pin2-------cphase
	 * pin1,pin0  -------  prescale  64
	 * */
}
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <SPI_u8SlaveTrancieve>:

u8 SPI_u8SlaveTrancieve(u8 Data)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	0f 92       	push	r0
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	89 83       	std	Y+1, r24	; 0x01

	SPDR= Data;
    20d4:	ef e2       	ldi	r30, 0x2F	; 47
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,SPIF)==0);
    20dc:	ee e2       	ldi	r30, 0x2E	; 46
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	88 23       	and	r24, r24
    20e4:	dc f7       	brge	.-10     	; 0x20dc <SPI_u8SlaveTrancieve+0x14>
	return SPDR;
    20e6:	ef e2       	ldi	r30, 0x2F	; 47
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
}
    20ec:	0f 90       	pop	r0
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	08 95       	ret

000020f4 <main>:
#include"EXT_INT0.h"
#include "Smart_Home_Config.h"
#define F_CPU 16000000 UL

void main(void)
{
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	a3 97       	sbiw	r28, 0x23	; 35
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    u16 LOC_U16DigitalRes, LOC_U16AnalogRES ,LOC_U16TEMP;
    u8 read;
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN4,DIO_OUTPUT); //ROOM1
    2108:	83 e0       	ldi	r24, 0x03	; 3
    210a:	64 e0       	ldi	r22, 0x04	; 4
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT); //ROOM2
    2112:	83 e0       	ldi	r24, 0x03	; 3
    2114:	65 e0       	ldi	r22, 0x05	; 5
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT); //ROOM3
    211c:	83 e0       	ldi	r24, 0x03	; 3
    211e:	66 e0       	ldi	r22, 0x06	; 6
    2120:	41 e0       	ldi	r20, 0x01	; 1
    2122:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_OUTPUT); //ROOM4
    2126:	83 e0       	ldi	r24, 0x03	; 3
    2128:	67 e0       	ldi	r22, 0x07	; 7
    212a:	41 e0       	ldi	r20, 0x01	; 1
    212c:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_OUTPUT); //AIR COND
    2130:	83 e0       	ldi	r24, 0x03	; 3
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_OUTPUT); //TVC
    213a:	83 e0       	ldi	r24, 0x03	; 3
    213c:	61 e0       	ldi	r22, 0x01	; 1
    213e:	41 e0       	ldi	r20, 0x01	; 1
    2140:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN2,DIO_INPUT); //SWITCH FOR AIR COND
    2144:	83 e0       	ldi	r24, 0x03	; 3
    2146:	62 e0       	ldi	r22, 0x02	; 2
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(DIO_PORTD,DIO_PIN2,DIO_HIGH);
    214e:	83 e0       	ldi	r24, 0x03	; 3
    2150:	62 e0       	ldi	r22, 0x02	; 2
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	EX_INT0VidInit();
    2158:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <EX_INT0VidInit>
	LCD_VidInit();
    215c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_VidInit>
	SPT_SlaveInit();
    2160:	0e 94 45 10 	call	0x208a	; 0x208a <SPT_SlaveInit>
	ADC_VidInit();
    2164:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_VidInit>
	while(1)
	{

		read=SPI_u8SlaveTrancieve(10); // read the value from the master MCU
    2168:	8a e0       	ldi	r24, 0x0A	; 10
    216a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <SPI_u8SlaveTrancieve>
    216e:	8d 8f       	std	Y+29, r24	; 0x1d
		if(read=='O')
    2170:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2172:	8f 34       	cpi	r24, 0x4F	; 79
    2174:	69 f4       	brne	.+26     	; 0x2190 <main+0x9c>
		{
			//ROOM1 ON
			LCD_SEND_COMMAND(0x01);
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
			LCD_VidSendStrig(" ROOM1 ON");
    217c:	80 e6       	ldi	r24, 0x60	; 96
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			DIO_VidSetPinValue(DIO_PORTD,DIO_PIN4,DIO_HIGH);
    2184:	83 e0       	ldi	r24, 0x03	; 3
    2186:	64 e0       	ldi	r22, 0x04	; 4
    2188:	41 e0       	ldi	r20, 0x01	; 1
    218a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    218e:	ec cf       	rjmp	.-40     	; 0x2168 <main+0x74>
		}
		else if(read=='*')
    2190:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2192:	8a 32       	cpi	r24, 0x2A	; 42
    2194:	21 f4       	brne	.+8      	; 0x219e <main+0xaa>
		{
			//CLEAR SCREEN
			LCD_SEND_COMMAND(0x01);
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
    219c:	e5 cf       	rjmp	.-54     	; 0x2168 <main+0x74>

		}
		else if(read=='F')
    219e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21a0:	86 34       	cpi	r24, 0x46	; 70
    21a2:	a9 f4       	brne	.+42     	; 0x21ce <main+0xda>
		{
			//ROOM1 OFF
			LCD_SEND_COMMAND(0x01);
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
			LCD_VidSendStrig(" ROOM1 Turned ");
    21aa:	8a e6       	ldi	r24, 0x6A	; 106
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_VidGoTOLocation>
	        LCD_VidSendStrig("OFF");
    21ba:	89 e7       	ldi	r24, 0x79	; 121
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			DIO_VidSetPinValue(DIO_PORTD,DIO_PIN4,DIO_LOW);
    21c2:	83 e0       	ldi	r24, 0x03	; 3
    21c4:	64 e0       	ldi	r22, 0x04	; 4
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    21cc:	cd cf       	rjmp	.-102    	; 0x2168 <main+0x74>
		}
		else if(read=='2')
    21ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d0:	82 33       	cpi	r24, 0x32	; 50
    21d2:	69 f4       	brne	.+26     	; 0x21ee <main+0xfa>
		{
			//ROOM2 ON
			LCD_SEND_COMMAND(0x01);
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
			LCD_VidSendStrig(" ROOM2 Turned On");
    21da:	8d e7       	ldi	r24, 0x7D	; 125
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			DIO_VidSetPinValue(DIO_PORTD,DIO_PIN5,DIO_HIGH);
    21e2:	83 e0       	ldi	r24, 0x03	; 3
    21e4:	65 e0       	ldi	r22, 0x05	; 5
    21e6:	41 e0       	ldi	r20, 0x01	; 1
    21e8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    21ec:	bd cf       	rjmp	.-134    	; 0x2168 <main+0x74>
		}
		else if(read=='3')
    21ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f0:	83 33       	cpi	r24, 0x33	; 51
    21f2:	a9 f4       	brne	.+42     	; 0x221e <main+0x12a>
		{
			//ROOM2 OFF
			LCD_SEND_COMMAND(0x01);
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
			LCD_VidSendStrig(" ROOM2 Turned ");
    21fa:	8e e8       	ldi	r24, 0x8E	; 142
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2202:	82 e0       	ldi	r24, 0x02	; 2
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_VidGoTOLocation>
	        LCD_VidSendStrig("OFF");
    220a:	89 e7       	ldi	r24, 0x79	; 121
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			DIO_VidSetPinValue(DIO_PORTD,DIO_PIN5,DIO_LOW);
    2212:	83 e0       	ldi	r24, 0x03	; 3
    2214:	65 e0       	ldi	r22, 0x05	; 5
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    221c:	a5 cf       	rjmp	.-182    	; 0x2168 <main+0x74>
		}
		else if(read=='4')
    221e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2220:	84 33       	cpi	r24, 0x34	; 52
    2222:	69 f4       	brne	.+26     	; 0x223e <main+0x14a>
		{
			//ROOM3 ON
			LCD_SEND_COMMAND(0x01);
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
			LCD_VidSendStrig(" ROOM3 Turned On");
    222a:	8d e9       	ldi	r24, 0x9D	; 157
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			DIO_VidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
    2232:	83 e0       	ldi	r24, 0x03	; 3
    2234:	66 e0       	ldi	r22, 0x06	; 6
    2236:	41 e0       	ldi	r20, 0x01	; 1
    2238:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    223c:	95 cf       	rjmp	.-214    	; 0x2168 <main+0x74>
		}
		else if(read=='5')
    223e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2240:	85 33       	cpi	r24, 0x35	; 53
    2242:	a9 f4       	brne	.+42     	; 0x226e <main+0x17a>
		{
			//ROOM3 OFF
			LCD_SEND_COMMAND(0x01);
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
			LCD_VidSendStrig(" ROOM3 Turned ");
    224a:	8e ea       	ldi	r24, 0xAE	; 174
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2252:	82 e0       	ldi	r24, 0x02	; 2
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_VidGoTOLocation>
	        LCD_VidSendStrig("OFF");
    225a:	89 e7       	ldi	r24, 0x79	; 121
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			DIO_VidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
    2262:	83 e0       	ldi	r24, 0x03	; 3
    2264:	66 e0       	ldi	r22, 0x06	; 6
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    226c:	7d cf       	rjmp	.-262    	; 0x2168 <main+0x74>
		}
		else if(read=='6')
    226e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2270:	86 33       	cpi	r24, 0x36	; 54
    2272:	69 f4       	brne	.+26     	; 0x228e <main+0x19a>
		{
			//ROOM4 ON
			LCD_SEND_COMMAND(0x01);
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
			LCD_VidSendStrig(" ROOM4 Turned On");
    227a:	8d eb       	ldi	r24, 0xBD	; 189
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			DIO_VidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);
    2282:	83 e0       	ldi	r24, 0x03	; 3
    2284:	67 e0       	ldi	r22, 0x07	; 7
    2286:	41 e0       	ldi	r20, 0x01	; 1
    2288:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    228c:	6d cf       	rjmp	.-294    	; 0x2168 <main+0x74>
		}
		else if(read=='7')
    228e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2290:	87 33       	cpi	r24, 0x37	; 55
    2292:	a9 f4       	brne	.+42     	; 0x22be <main+0x1ca>
		{
			//ROOM4 OFF
			LCD_SEND_COMMAND(0x01);
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
			LCD_VidSendStrig(" ROOM4 Turned ");
    229a:	8e ec       	ldi	r24, 0xCE	; 206
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    22a2:	82 e0       	ldi	r24, 0x02	; 2
    22a4:	60 e0       	ldi	r22, 0x00	; 0
    22a6:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_VidGoTOLocation>
	        LCD_VidSendStrig("OFF");
    22aa:	89 e7       	ldi	r24, 0x79	; 121
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			DIO_VidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
    22b2:	83 e0       	ldi	r24, 0x03	; 3
    22b4:	67 e0       	ldi	r22, 0x07	; 7
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    22bc:	55 cf       	rjmp	.-342    	; 0x2168 <main+0x74>
		}
		else if(read=='8')
    22be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22c0:	88 33       	cpi	r24, 0x38	; 56
    22c2:	69 f4       	brne	.+26     	; 0x22de <main+0x1ea>
		{
			//TV ON
			LCD_SEND_COMMAND(0x01);
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
			LCD_VidSendStrig(" TV Turned On");
    22ca:	8d ed       	ldi	r24, 0xDD	; 221
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			DIO_VidSetPinValue(DIO_PORTD,DIO_PIN1,DIO_HIGH);
    22d2:	83 e0       	ldi	r24, 0x03	; 3
    22d4:	61 e0       	ldi	r22, 0x01	; 1
    22d6:	41 e0       	ldi	r20, 0x01	; 1
    22d8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    22dc:	45 cf       	rjmp	.-374    	; 0x2168 <main+0x74>
		}
		else if(read=='9')
    22de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e0:	89 33       	cpi	r24, 0x39	; 57
    22e2:	69 f4       	brne	.+26     	; 0x22fe <main+0x20a>
		{
			//TV OFF
			LCD_SEND_COMMAND(0x01);
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
			LCD_VidSendStrig(" TV Turned off");
    22ea:	8b ee       	ldi	r24, 0xEB	; 235
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			DIO_VidSetPinValue(DIO_PORTD,DIO_PIN1,DIO_LOW);
    22f2:	83 e0       	ldi	r24, 0x03	; 3
    22f4:	61 e0       	ldi	r22, 0x01	; 1
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    22fc:	35 cf       	rjmp	.-406    	; 0x2168 <main+0x74>
		}
		else if(read=='t')
    22fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2300:	84 37       	cpi	r24, 0x74	; 116
    2302:	09 f0       	breq	.+2      	; 0x2306 <main+0x212>
    2304:	6f c1       	rjmp	.+734    	; 0x25e4 <main+0x4f0>
		{
			//MASTER WANT TO TURN AIR CONDITION ON
	        LCD_SEND_COMMAND(0x01);
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
			LCD_VidSendStrig("  check room ");
    230c:	8a ef       	ldi	r24, 0xFA	; 250
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2314:	82 e0       	ldi	r24, 0x02	; 2
    2316:	60 e0       	ldi	r22, 0x00	; 0
    2318:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_VidGoTOLocation>
	        LCD_VidSendStrig("Temp first");
    231c:	88 e0       	ldi	r24, 0x08	; 8
    231e:	91 e0       	ldi	r25, 0x01	; 1
    2320:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	aa ef       	ldi	r26, 0xFA	; 250
    232a:	b3 e4       	ldi	r27, 0x43	; 67
    232c:	89 8f       	std	Y+25, r24	; 0x19
    232e:	9a 8f       	std	Y+26, r25	; 0x1a
    2330:	ab 8f       	std	Y+27, r26	; 0x1b
    2332:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2334:	69 8d       	ldd	r22, Y+25	; 0x19
    2336:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2338:	8b 8d       	ldd	r24, Y+27	; 0x1b
    233a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	4a e7       	ldi	r20, 0x7A	; 122
    2342:	55 e4       	ldi	r21, 0x45	; 69
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	8d 8b       	std	Y+21, r24	; 0x15
    234e:	9e 8b       	std	Y+22, r25	; 0x16
    2350:	af 8b       	std	Y+23, r26	; 0x17
    2352:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2354:	6d 89       	ldd	r22, Y+21	; 0x15
    2356:	7e 89       	ldd	r23, Y+22	; 0x16
    2358:	8f 89       	ldd	r24, Y+23	; 0x17
    235a:	98 8d       	ldd	r25, Y+24	; 0x18
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e8       	ldi	r20, 0x80	; 128
    2362:	5f e3       	ldi	r21, 0x3F	; 63
    2364:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2368:	88 23       	and	r24, r24
    236a:	2c f4       	brge	.+10     	; 0x2376 <main+0x282>
		__ticks = 1;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9c 8b       	std	Y+20, r25	; 0x14
    2372:	8b 8b       	std	Y+19, r24	; 0x13
    2374:	3f c0       	rjmp	.+126    	; 0x23f4 <main+0x300>
	else if (__tmp > 65535)
    2376:	6d 89       	ldd	r22, Y+21	; 0x15
    2378:	7e 89       	ldd	r23, Y+22	; 0x16
    237a:	8f 89       	ldd	r24, Y+23	; 0x17
    237c:	98 8d       	ldd	r25, Y+24	; 0x18
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	57 e4       	ldi	r21, 0x47	; 71
    2386:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    238a:	18 16       	cp	r1, r24
    238c:	4c f5       	brge	.+82     	; 0x23e0 <main+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238e:	69 8d       	ldd	r22, Y+25	; 0x19
    2390:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2392:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2394:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e2       	ldi	r20, 0x20	; 32
    239c:	51 e4       	ldi	r21, 0x41	; 65
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9c 8b       	std	Y+20, r25	; 0x14
    23b4:	8b 8b       	std	Y+19, r24	; 0x13
    23b6:	0f c0       	rjmp	.+30     	; 0x23d6 <main+0x2e2>
    23b8:	80 e9       	ldi	r24, 0x90	; 144
    23ba:	91 e0       	ldi	r25, 0x01	; 1
    23bc:	9a 8b       	std	Y+18, r25	; 0x12
    23be:	89 8b       	std	Y+17, r24	; 0x11
    23c0:	89 89       	ldd	r24, Y+17	; 0x11
    23c2:	9a 89       	ldd	r25, Y+18	; 0x12
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <main+0x2d0>
    23c8:	9a 8b       	std	Y+18, r25	; 0x12
    23ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23cc:	8b 89       	ldd	r24, Y+19	; 0x13
    23ce:	9c 89       	ldd	r25, Y+20	; 0x14
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	9c 8b       	std	Y+20, r25	; 0x14
    23d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d6:	8b 89       	ldd	r24, Y+19	; 0x13
    23d8:	9c 89       	ldd	r25, Y+20	; 0x14
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	69 f7       	brne	.-38     	; 0x23b8 <main+0x2c4>
    23de:	14 c0       	rjmp	.+40     	; 0x2408 <main+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e0:	6d 89       	ldd	r22, Y+21	; 0x15
    23e2:	7e 89       	ldd	r23, Y+22	; 0x16
    23e4:	8f 89       	ldd	r24, Y+23	; 0x17
    23e6:	98 8d       	ldd	r25, Y+24	; 0x18
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9c 8b       	std	Y+20, r25	; 0x14
    23f2:	8b 8b       	std	Y+19, r24	; 0x13
    23f4:	8b 89       	ldd	r24, Y+19	; 0x13
    23f6:	9c 89       	ldd	r25, Y+20	; 0x14
    23f8:	98 8b       	std	Y+16, r25	; 0x10
    23fa:	8f 87       	std	Y+15, r24	; 0x0f
    23fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23fe:	98 89       	ldd	r25, Y+16	; 0x10
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <main+0x30c>
    2404:	98 8b       	std	Y+16, r25	; 0x10
    2406:	8f 87       	std	Y+15, r24	; 0x0f
	        _delay_ms(500);
	        //WE WILL CHECK ROOM TEMPERATURE FIRST
			LOC_U16DigitalRes=ADC_U16GetDigitalValue(ADC_CHANNEL_0);
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_U16GetDigitalValue>
    240e:	9b a3       	std	Y+35, r25	; 0x23
    2410:	8a a3       	std	Y+34, r24	; 0x22
			LOC_U16AnalogRES= (u16)((LOC_U16DigitalRes * 2560UL/*unsigned long*/)/1024); //(2.56\1024)*1000(scale to mv )
    2412:	8a a1       	ldd	r24, Y+34	; 0x22
    2414:	9b a1       	ldd	r25, Y+35	; 0x23
    2416:	cc 01       	movw	r24, r24
    2418:	a0 e0       	ldi	r26, 0x00	; 0
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	3a e0       	ldi	r19, 0x0A	; 10
    2420:	40 e0       	ldi	r20, 0x00	; 0
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	bc 01       	movw	r22, r24
    2426:	cd 01       	movw	r24, r26
    2428:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__mulsi3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	07 2e       	mov	r0, r23
    2432:	7a e0       	ldi	r23, 0x0A	; 10
    2434:	b6 95       	lsr	r27
    2436:	a7 95       	ror	r26
    2438:	97 95       	ror	r25
    243a:	87 95       	ror	r24
    243c:	7a 95       	dec	r23
    243e:	d1 f7       	brne	.-12     	; 0x2434 <main+0x340>
    2440:	70 2d       	mov	r23, r0
    2442:	99 a3       	std	Y+33, r25	; 0x21
    2444:	88 a3       	std	Y+32, r24	; 0x20
			LOC_U16TEMP=LOC_U16AnalogRES/10; //to be goos with the temp sens
    2446:	88 a1       	ldd	r24, Y+32	; 0x20
    2448:	99 a1       	ldd	r25, Y+33	; 0x21
    244a:	2a e0       	ldi	r18, 0x0A	; 10
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	b9 01       	movw	r22, r18
    2450:	0e 94 07 14 	call	0x280e	; 0x280e <__udivmodhi4>
    2454:	cb 01       	movw	r24, r22
    2456:	9f 8f       	std	Y+31, r25	; 0x1f
    2458:	8e 8f       	std	Y+30, r24	; 0x1e
			LCD_SEND_COMMAND(0x01);
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
			LCD_VidSendStrig(" Room Temp=");
    2460:	83 e1       	ldi	r24, 0x13	; 19
    2462:	91 e0       	ldi	r25, 0x01	; 1
    2464:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			LCD_VidSendNumber(LOC_U16TEMP);
    2468:	8e 8d       	ldd	r24, Y+30	; 0x1e
    246a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    246c:	cc 01       	movw	r24, r24
    246e:	a0 e0       	ldi	r26, 0x00	; 0
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <LCD_VidSendNumber>
			LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    247a:	82 e0       	ldi	r24, 0x02	; 2
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_VidGoTOLocation>
	        LCD_VidSendStrig("Desired TEMP=");
    2482:	8f e1       	ldi	r24, 0x1F	; 31
    2484:	91 e0       	ldi	r25, 0x01	; 1
    2486:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
	        LCD_VidSendNumber(Desired_Temp);
    248a:	66 e1       	ldi	r22, 0x16	; 22
    248c:	70 e0       	ldi	r23, 0x00	; 0
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <LCD_VidSendNumber>
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	aa ef       	ldi	r26, 0xFA	; 250
    249c:	b3 e4       	ldi	r27, 0x43	; 67
    249e:	8b 87       	std	Y+11, r24	; 0x0b
    24a0:	9c 87       	std	Y+12, r25	; 0x0c
    24a2:	ad 87       	std	Y+13, r26	; 0x0d
    24a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	4a e7       	ldi	r20, 0x7A	; 122
    24b4:	55 e4       	ldi	r21, 0x45	; 69
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	8f 83       	std	Y+7, r24	; 0x07
    24c0:	98 87       	std	Y+8, r25	; 0x08
    24c2:	a9 87       	std	Y+9, r26	; 0x09
    24c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24c6:	6f 81       	ldd	r22, Y+7	; 0x07
    24c8:	78 85       	ldd	r23, Y+8	; 0x08
    24ca:	89 85       	ldd	r24, Y+9	; 0x09
    24cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	5f e3       	ldi	r21, 0x3F	; 63
    24d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24da:	88 23       	and	r24, r24
    24dc:	2c f4       	brge	.+10     	; 0x24e8 <main+0x3f4>
		__ticks = 1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	8d 83       	std	Y+5, r24	; 0x05
    24e6:	3f c0       	rjmp	.+126    	; 0x2566 <main+0x472>
	else if (__tmp > 65535)
    24e8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ea:	78 85       	ldd	r23, Y+8	; 0x08
    24ec:	89 85       	ldd	r24, Y+9	; 0x09
    24ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	3f ef       	ldi	r19, 0xFF	; 255
    24f4:	4f e7       	ldi	r20, 0x7F	; 127
    24f6:	57 e4       	ldi	r21, 0x47	; 71
    24f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24fc:	18 16       	cp	r1, r24
    24fe:	4c f5       	brge	.+82     	; 0x2552 <main+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2500:	6b 85       	ldd	r22, Y+11	; 0x0b
    2502:	7c 85       	ldd	r23, Y+12	; 0x0c
    2504:	8d 85       	ldd	r24, Y+13	; 0x0d
    2506:	9e 85       	ldd	r25, Y+14	; 0x0e
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e2       	ldi	r20, 0x20	; 32
    250e:	51 e4       	ldi	r21, 0x41	; 65
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	bc 01       	movw	r22, r24
    251a:	cd 01       	movw	r24, r26
    251c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9e 83       	std	Y+6, r25	; 0x06
    2526:	8d 83       	std	Y+5, r24	; 0x05
    2528:	0f c0       	rjmp	.+30     	; 0x2548 <main+0x454>
    252a:	80 e9       	ldi	r24, 0x90	; 144
    252c:	91 e0       	ldi	r25, 0x01	; 1
    252e:	9c 83       	std	Y+4, r25	; 0x04
    2530:	8b 83       	std	Y+3, r24	; 0x03
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	9c 81       	ldd	r25, Y+4	; 0x04
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <main+0x442>
    253a:	9c 83       	std	Y+4, r25	; 0x04
    253c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253e:	8d 81       	ldd	r24, Y+5	; 0x05
    2540:	9e 81       	ldd	r25, Y+6	; 0x06
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	9e 83       	std	Y+6, r25	; 0x06
    2546:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
    254a:	9e 81       	ldd	r25, Y+6	; 0x06
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	69 f7       	brne	.-38     	; 0x252a <main+0x436>
    2550:	14 c0       	rjmp	.+40     	; 0x257a <main+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2552:	6f 81       	ldd	r22, Y+7	; 0x07
    2554:	78 85       	ldd	r23, Y+8	; 0x08
    2556:	89 85       	ldd	r24, Y+9	; 0x09
    2558:	9a 85       	ldd	r25, Y+10	; 0x0a
    255a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9e 83       	std	Y+6, r25	; 0x06
    2564:	8d 83       	std	Y+5, r24	; 0x05
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	9e 81       	ldd	r25, Y+6	; 0x06
    256a:	9a 83       	std	Y+2, r25	; 0x02
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	9a 81       	ldd	r25, Y+2	; 0x02
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <main+0x47e>
    2576:	9a 83       	std	Y+2, r25	; 0x02
    2578:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			if(LOC_U16TEMP>Desired_Temp)
    257a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    257c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    257e:	87 31       	cpi	r24, 0x17	; 23
    2580:	91 05       	cpc	r25, r1
    2582:	a8 f0       	brcs	.+42     	; 0x25ae <main+0x4ba>
			{
				//RURN TEMP ON
				LCD_SEND_COMMAND(0x01);
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
				LCD_VidSendStrig(" Air condition ");
    258a:	8d e2       	ldi	r24, 0x2D	; 45
    258c:	91 e0       	ldi	r25, 0x01	; 1
    258e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
				LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2592:	82 e0       	ldi	r24, 0x02	; 2
    2594:	60 e0       	ldi	r22, 0x00	; 0
    2596:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_VidGoTOLocation>
		        LCD_VidSendStrig("Turned On ");
    259a:	8d e3       	ldi	r24, 0x3D	; 61
    259c:	91 e0       	ldi	r25, 0x01	; 1
    259e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
		        DIO_VidSetPinValue(DIO_PORTD,DIO_PIN0,DIO_HIGH);
    25a2:	83 e0       	ldi	r24, 0x03	; 3
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	41 e0       	ldi	r20, 0x01	; 1
    25a8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    25ac:	dd cd       	rjmp	.-1094   	; 0x2168 <main+0x74>
			}
			else
			{
				//HE WILL NOT TURN ON THE CINDITIONER BECAUSE THE ROOM TEMP IS LESS THAN THE DESIRED
				LCD_SEND_COMMAND(0x01);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
				LCD_VidSendStrig(" ROOM Temp <=");
    25b4:	88 e4       	ldi	r24, 0x48	; 72
    25b6:	91 e0       	ldi	r25, 0x01	; 1
    25b8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
				LCD_VidSendNumber(Desired_Temp);
    25bc:	66 e1       	ldi	r22, 0x16	; 22
    25be:	70 e0       	ldi	r23, 0x00	; 0
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <LCD_VidSendNumber>
				LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    25c8:	82 e0       	ldi	r24, 0x02	; 2
    25ca:	60 e0       	ldi	r22, 0x00	; 0
    25cc:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_VidGoTOLocation>
		        LCD_VidSendStrig("conditioning OFF ");
    25d0:	86 e5       	ldi	r24, 0x56	; 86
    25d2:	91 e0       	ldi	r25, 0x01	; 1
    25d4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
				DIO_VidSetPinValue(DIO_PORTD,DIO_PIN0,DIO_LOW);
    25d8:	83 e0       	ldi	r24, 0x03	; 3
    25da:	60 e0       	ldi	r22, 0x00	; 0
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    25e2:	c2 cd       	rjmp	.-1148   	; 0x2168 <main+0x74>

			}
		}
		else if(read=='m')
    25e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e6:	8d 36       	cpi	r24, 0x6D	; 109
    25e8:	a9 f4       	brne	.+42     	; 0x2614 <main+0x520>
		{
			//AIE CONDITIONER TURN OFF
			LCD_SEND_COMMAND(0x01);
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
			LCD_VidSendStrig(" air condition ");
    25f0:	88 e6       	ldi	r24, 0x68	; 104
    25f2:	91 e0       	ldi	r25, 0x01	; 1
    25f4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    25f8:	82 e0       	ldi	r24, 0x02	; 2
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_VidGoTOLocation>
	        LCD_VidSendStrig(" Turned off ");
    2600:	88 e7       	ldi	r24, 0x78	; 120
    2602:	91 e0       	ldi	r25, 0x01	; 1
    2604:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
			DIO_VidSetPinValue(DIO_PORTD,DIO_PIN0,DIO_LOW);
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    2612:	aa cd       	rjmp	.-1196   	; 0x2168 <main+0x74>
		}
		else
		{
			//ELSE CLEAR THE SCREEN
			LCD_SEND_COMMAND(0x01);
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
    261a:	a6 cd       	rjmp	.-1204   	; 0x2168 <main+0x74>

0000261c <__vector_1>:
	}

}

ISR(INT0_vect)
{
    261c:	1f 92       	push	r1
    261e:	0f 92       	push	r0
    2620:	0f b6       	in	r0, 0x3f	; 63
    2622:	0f 92       	push	r0
    2624:	11 24       	eor	r1, r1
    2626:	2f 93       	push	r18
    2628:	3f 93       	push	r19
    262a:	4f 93       	push	r20
    262c:	5f 93       	push	r21
    262e:	6f 93       	push	r22
    2630:	7f 93       	push	r23
    2632:	8f 93       	push	r24
    2634:	9f 93       	push	r25
    2636:	af 93       	push	r26
    2638:	bf 93       	push	r27
    263a:	ef 93       	push	r30
    263c:	ff 93       	push	r31
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
    2646:	2e 97       	sbiw	r28, 0x0e	; 14
    2648:	de bf       	out	0x3e, r29	; 62
    264a:	cd bf       	out	0x3d, r28	; 61
	//WHEN THE SWITCH TURN ON OR  OFF (ANY CHANGE IN EXT INTERRUPT0)
	static u8 count=0;
	count++;
    264c:	80 91 8e 01 	lds	r24, 0x018E
    2650:	8f 5f       	subi	r24, 0xFF	; 255
    2652:	80 93 8e 01 	sts	0x018E, r24
	if(count%2==0)
    2656:	80 91 8e 01 	lds	r24, 0x018E
    265a:	88 2f       	mov	r24, r24
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	81 70       	andi	r24, 0x01	; 1
    2660:	90 70       	andi	r25, 0x00	; 0
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	09 f0       	breq	.+2      	; 0x2668 <__vector_1+0x4c>
    2666:	8a c0       	rjmp	.+276    	; 0x277c <__vector_1+0x160>
	{
		//IF HE PRESS EVEN NUMBER OF PRESSES
		LCD_SEND_COMMAND(0x01);
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
		DIO_VidSetPinValue(DIO_PORTD,DIO_PIN0,DIO_LOW);
    266e:	83 e0       	ldi	r24, 0x03	; 3
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	40 e0       	ldi	r20, 0x00	; 0
    2674:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
		LCD_VidSendStrig(" Air condition ");
    2678:	8d e2       	ldi	r24, 0x2D	; 45
    267a:	91 e0       	ldi	r25, 0x01	; 1
    267c:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
		LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2680:	82 e0       	ldi	r24, 0x02	; 2
    2682:	60 e0       	ldi	r22, 0x00	; 0
    2684:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_VidGoTOLocation>
        LCD_VidSendStrig(" Turned off ");
    2688:	88 e7       	ldi	r24, 0x78	; 120
    268a:	91 e0       	ldi	r25, 0x01	; 1
    268c:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	a8 e4       	ldi	r26, 0x48	; 72
    2696:	b3 e4       	ldi	r27, 0x43	; 67
    2698:	8b 87       	std	Y+11, r24	; 0x0b
    269a:	9c 87       	std	Y+12, r25	; 0x0c
    269c:	ad 87       	std	Y+13, r26	; 0x0d
    269e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	4a e7       	ldi	r20, 0x7A	; 122
    26ae:	55 e4       	ldi	r21, 0x45	; 69
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	8f 83       	std	Y+7, r24	; 0x07
    26ba:	98 87       	std	Y+8, r25	; 0x08
    26bc:	a9 87       	std	Y+9, r26	; 0x09
    26be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26c0:	6f 81       	ldd	r22, Y+7	; 0x07
    26c2:	78 85       	ldd	r23, Y+8	; 0x08
    26c4:	89 85       	ldd	r24, Y+9	; 0x09
    26c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e8       	ldi	r20, 0x80	; 128
    26ce:	5f e3       	ldi	r21, 0x3F	; 63
    26d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d4:	88 23       	and	r24, r24
    26d6:	2c f4       	brge	.+10     	; 0x26e2 <__vector_1+0xc6>
		__ticks = 1;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
    26e0:	3f c0       	rjmp	.+126    	; 0x2760 <__vector_1+0x144>
	else if (__tmp > 65535)
    26e2:	6f 81       	ldd	r22, Y+7	; 0x07
    26e4:	78 85       	ldd	r23, Y+8	; 0x08
    26e6:	89 85       	ldd	r24, Y+9	; 0x09
    26e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	3f ef       	ldi	r19, 0xFF	; 255
    26ee:	4f e7       	ldi	r20, 0x7F	; 127
    26f0:	57 e4       	ldi	r21, 0x47	; 71
    26f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f6:	18 16       	cp	r1, r24
    26f8:	4c f5       	brge	.+82     	; 0x274c <__vector_1+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    26fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2700:	9e 85       	ldd	r25, Y+14	; 0x0e
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e2       	ldi	r20, 0x20	; 32
    2708:	51 e4       	ldi	r21, 0x41	; 65
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	8d 83       	std	Y+5, r24	; 0x05
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <__vector_1+0x126>
    2724:	80 e9       	ldi	r24, 0x90	; 144
    2726:	91 e0       	ldi	r25, 0x01	; 1
    2728:	9c 83       	std	Y+4, r25	; 0x04
    272a:	8b 83       	std	Y+3, r24	; 0x03
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	9c 81       	ldd	r25, Y+4	; 0x04
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <__vector_1+0x114>
    2734:	9c 83       	std	Y+4, r25	; 0x04
    2736:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2738:	8d 81       	ldd	r24, Y+5	; 0x05
    273a:	9e 81       	ldd	r25, Y+6	; 0x06
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	9e 83       	std	Y+6, r25	; 0x06
    2740:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2742:	8d 81       	ldd	r24, Y+5	; 0x05
    2744:	9e 81       	ldd	r25, Y+6	; 0x06
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	69 f7       	brne	.-38     	; 0x2724 <__vector_1+0x108>
    274a:	14 c0       	rjmp	.+40     	; 0x2774 <__vector_1+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274c:	6f 81       	ldd	r22, Y+7	; 0x07
    274e:	78 85       	ldd	r23, Y+8	; 0x08
    2750:	89 85       	ldd	r24, Y+9	; 0x09
    2752:	9a 85       	ldd	r25, Y+10	; 0x0a
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	9e 83       	std	Y+6, r25	; 0x06
    275e:	8d 83       	std	Y+5, r24	; 0x05
    2760:	8d 81       	ldd	r24, Y+5	; 0x05
    2762:	9e 81       	ldd	r25, Y+6	; 0x06
    2764:	9a 83       	std	Y+2, r25	; 0x02
    2766:	89 83       	std	Y+1, r24	; 0x01
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	9a 81       	ldd	r25, Y+2	; 0x02
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <__vector_1+0x150>
    2770:	9a 83       	std	Y+2, r25	; 0x02
    2772:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(200);
        LCD_SEND_COMMAND(0x01);
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
    277a:	14 c0       	rjmp	.+40     	; 0x27a4 <__vector_1+0x188>
	}
	else
	{
		//IF HE PRESS ODD NUMBER OF PRESSED ------- TURN ON THE AIR CONDITIONER
		LCD_SEND_COMMAND(0x01);
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <LCD_SEND_COMMAND>
		DIO_VidSetPinValue(DIO_PORTD,DIO_PIN0,DIO_HIGH);
    2782:	83 e0       	ldi	r24, 0x03	; 3
    2784:	60 e0       	ldi	r22, 0x00	; 0
    2786:	41 e0       	ldi	r20, 0x01	; 1
    2788:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
		LCD_VidSendStrig(" Air condition ");
    278c:	8d e2       	ldi	r24, 0x2D	; 45
    278e:	91 e0       	ldi	r25, 0x01	; 1
    2790:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
		LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2794:	82 e0       	ldi	r24, 0x02	; 2
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_VidGoTOLocation>
        LCD_VidSendStrig("Turned On ");
    279c:	8d e3       	ldi	r24, 0x3D	; 61
    279e:	91 e0       	ldi	r25, 0x01	; 1
    27a0:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LCD_VidSendStrig>
	}


}
    27a4:	2e 96       	adiw	r28, 0x0e	; 14
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	ff 91       	pop	r31
    27b0:	ef 91       	pop	r30
    27b2:	bf 91       	pop	r27
    27b4:	af 91       	pop	r26
    27b6:	9f 91       	pop	r25
    27b8:	8f 91       	pop	r24
    27ba:	7f 91       	pop	r23
    27bc:	6f 91       	pop	r22
    27be:	5f 91       	pop	r21
    27c0:	4f 91       	pop	r20
    27c2:	3f 91       	pop	r19
    27c4:	2f 91       	pop	r18
    27c6:	0f 90       	pop	r0
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	0f 90       	pop	r0
    27cc:	1f 90       	pop	r1
    27ce:	18 95       	reti

000027d0 <__mulsi3>:
    27d0:	62 9f       	mul	r22, r18
    27d2:	d0 01       	movw	r26, r0
    27d4:	73 9f       	mul	r23, r19
    27d6:	f0 01       	movw	r30, r0
    27d8:	82 9f       	mul	r24, r18
    27da:	e0 0d       	add	r30, r0
    27dc:	f1 1d       	adc	r31, r1
    27de:	64 9f       	mul	r22, r20
    27e0:	e0 0d       	add	r30, r0
    27e2:	f1 1d       	adc	r31, r1
    27e4:	92 9f       	mul	r25, r18
    27e6:	f0 0d       	add	r31, r0
    27e8:	83 9f       	mul	r24, r19
    27ea:	f0 0d       	add	r31, r0
    27ec:	74 9f       	mul	r23, r20
    27ee:	f0 0d       	add	r31, r0
    27f0:	65 9f       	mul	r22, r21
    27f2:	f0 0d       	add	r31, r0
    27f4:	99 27       	eor	r25, r25
    27f6:	72 9f       	mul	r23, r18
    27f8:	b0 0d       	add	r27, r0
    27fa:	e1 1d       	adc	r30, r1
    27fc:	f9 1f       	adc	r31, r25
    27fe:	63 9f       	mul	r22, r19
    2800:	b0 0d       	add	r27, r0
    2802:	e1 1d       	adc	r30, r1
    2804:	f9 1f       	adc	r31, r25
    2806:	bd 01       	movw	r22, r26
    2808:	cf 01       	movw	r24, r30
    280a:	11 24       	eor	r1, r1
    280c:	08 95       	ret

0000280e <__udivmodhi4>:
    280e:	aa 1b       	sub	r26, r26
    2810:	bb 1b       	sub	r27, r27
    2812:	51 e1       	ldi	r21, 0x11	; 17
    2814:	07 c0       	rjmp	.+14     	; 0x2824 <__udivmodhi4_ep>

00002816 <__udivmodhi4_loop>:
    2816:	aa 1f       	adc	r26, r26
    2818:	bb 1f       	adc	r27, r27
    281a:	a6 17       	cp	r26, r22
    281c:	b7 07       	cpc	r27, r23
    281e:	10 f0       	brcs	.+4      	; 0x2824 <__udivmodhi4_ep>
    2820:	a6 1b       	sub	r26, r22
    2822:	b7 0b       	sbc	r27, r23

00002824 <__udivmodhi4_ep>:
    2824:	88 1f       	adc	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	5a 95       	dec	r21
    282a:	a9 f7       	brne	.-22     	; 0x2816 <__udivmodhi4_loop>
    282c:	80 95       	com	r24
    282e:	90 95       	com	r25
    2830:	bc 01       	movw	r22, r24
    2832:	cd 01       	movw	r24, r26
    2834:	08 95       	ret

00002836 <__prologue_saves__>:
    2836:	2f 92       	push	r2
    2838:	3f 92       	push	r3
    283a:	4f 92       	push	r4
    283c:	5f 92       	push	r5
    283e:	6f 92       	push	r6
    2840:	7f 92       	push	r7
    2842:	8f 92       	push	r8
    2844:	9f 92       	push	r9
    2846:	af 92       	push	r10
    2848:	bf 92       	push	r11
    284a:	cf 92       	push	r12
    284c:	df 92       	push	r13
    284e:	ef 92       	push	r14
    2850:	ff 92       	push	r15
    2852:	0f 93       	push	r16
    2854:	1f 93       	push	r17
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	ca 1b       	sub	r28, r26
    2860:	db 0b       	sbc	r29, r27
    2862:	0f b6       	in	r0, 0x3f	; 63
    2864:	f8 94       	cli
    2866:	de bf       	out	0x3e, r29	; 62
    2868:	0f be       	out	0x3f, r0	; 63
    286a:	cd bf       	out	0x3d, r28	; 61
    286c:	09 94       	ijmp

0000286e <__epilogue_restores__>:
    286e:	2a 88       	ldd	r2, Y+18	; 0x12
    2870:	39 88       	ldd	r3, Y+17	; 0x11
    2872:	48 88       	ldd	r4, Y+16	; 0x10
    2874:	5f 84       	ldd	r5, Y+15	; 0x0f
    2876:	6e 84       	ldd	r6, Y+14	; 0x0e
    2878:	7d 84       	ldd	r7, Y+13	; 0x0d
    287a:	8c 84       	ldd	r8, Y+12	; 0x0c
    287c:	9b 84       	ldd	r9, Y+11	; 0x0b
    287e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2880:	b9 84       	ldd	r11, Y+9	; 0x09
    2882:	c8 84       	ldd	r12, Y+8	; 0x08
    2884:	df 80       	ldd	r13, Y+7	; 0x07
    2886:	ee 80       	ldd	r14, Y+6	; 0x06
    2888:	fd 80       	ldd	r15, Y+5	; 0x05
    288a:	0c 81       	ldd	r16, Y+4	; 0x04
    288c:	1b 81       	ldd	r17, Y+3	; 0x03
    288e:	aa 81       	ldd	r26, Y+2	; 0x02
    2890:	b9 81       	ldd	r27, Y+1	; 0x01
    2892:	ce 0f       	add	r28, r30
    2894:	d1 1d       	adc	r29, r1
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	ed 01       	movw	r28, r26
    28a2:	08 95       	ret

000028a4 <itoa>:
    28a4:	fb 01       	movw	r30, r22
    28a6:	9f 01       	movw	r18, r30
    28a8:	e8 94       	clt
    28aa:	42 30       	cpi	r20, 0x02	; 2
    28ac:	c4 f0       	brlt	.+48     	; 0x28de <itoa+0x3a>
    28ae:	45 32       	cpi	r20, 0x25	; 37
    28b0:	b4 f4       	brge	.+44     	; 0x28de <itoa+0x3a>
    28b2:	4a 30       	cpi	r20, 0x0A	; 10
    28b4:	29 f4       	brne	.+10     	; 0x28c0 <itoa+0x1c>
    28b6:	97 fb       	bst	r25, 7
    28b8:	1e f4       	brtc	.+6      	; 0x28c0 <itoa+0x1c>
    28ba:	90 95       	com	r25
    28bc:	81 95       	neg	r24
    28be:	9f 4f       	sbci	r25, 0xFF	; 255
    28c0:	64 2f       	mov	r22, r20
    28c2:	77 27       	eor	r23, r23
    28c4:	0e 94 07 14 	call	0x280e	; 0x280e <__udivmodhi4>
    28c8:	80 5d       	subi	r24, 0xD0	; 208
    28ca:	8a 33       	cpi	r24, 0x3A	; 58
    28cc:	0c f0       	brlt	.+2      	; 0x28d0 <itoa+0x2c>
    28ce:	89 5d       	subi	r24, 0xD9	; 217
    28d0:	81 93       	st	Z+, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	a1 f7       	brne	.-24     	; 0x28c0 <itoa+0x1c>
    28d8:	16 f4       	brtc	.+4      	; 0x28de <itoa+0x3a>
    28da:	5d e2       	ldi	r21, 0x2D	; 45
    28dc:	51 93       	st	Z+, r21
    28de:	10 82       	st	Z, r1
    28e0:	c9 01       	movw	r24, r18
    28e2:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <strrev>

000028e6 <strrev>:
    28e6:	dc 01       	movw	r26, r24
    28e8:	fc 01       	movw	r30, r24
    28ea:	67 2f       	mov	r22, r23
    28ec:	71 91       	ld	r23, Z+
    28ee:	77 23       	and	r23, r23
    28f0:	e1 f7       	brne	.-8      	; 0x28ea <strrev+0x4>
    28f2:	32 97       	sbiw	r30, 0x02	; 2
    28f4:	04 c0       	rjmp	.+8      	; 0x28fe <strrev+0x18>
    28f6:	7c 91       	ld	r23, X
    28f8:	6d 93       	st	X+, r22
    28fa:	70 83       	st	Z, r23
    28fc:	62 91       	ld	r22, -Z
    28fe:	ae 17       	cp	r26, r30
    2900:	bf 07       	cpc	r27, r31
    2902:	c8 f3       	brcs	.-14     	; 0x28f6 <strrev+0x10>
    2904:	08 95       	ret

00002906 <_exit>:
    2906:	f8 94       	cli

00002908 <__stop_program>:
    2908:	ff cf       	rjmp	.-2      	; 0x2908 <__stop_program>
